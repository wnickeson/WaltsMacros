'MacroName:Show007Maps.2024.01
'MacroDescription:Displays the codes in an 007 field in a bibliographic record for
' cartographic resources in a friendly way for verification and/or correction.
'
' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
' https://orcid.org/0000-0003-0484-6938
'
' with some ideas from Joel Hahn.
'
' Last updated: 9 February 2024.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 3.1 and Windows 11 Enterprise & 64-bit
' Windows 10 Pro, but no guarantees are promised or implied.
'
'***************************************************************************************#
' How it works: In a record for a map, run the macro. It looks for the first map 007
' field and shows the field's values in a dialog box with drop-down lists so the values
' can be verified and changed if necessary. If the cursor is placed in a map 007, that
' field is used in the macro (i.e., the macro will not search for another 007 field). If
' there is no 007, use the dialog box to enter correct values in a new field. Default
' values for new fields can be set in the section below that starts on line 97.
'****************************************************************************************

Option Explicit

Declare Sub FillArrays

Declare Function GetSubfieldValue( InString$, WhichSubfield$ ) As String
Declare Function ChangeTest      ( WhichControl$ )             As Integer

Declare Function Dialog1ControlFunction( Id$, Action%, SValue& )

Global BValue$
Global DValue$
Global EValue$
Global FValue$
Global GValue$
Global HValue$
Global WaltsMacros$

Global AddNew

Global BArray( 9 )  As String
Global DArray( 2 )  As String
Global EArray( 21 ) As String
Global FArray( 4 )  As String
Global GArray( 6 )  As String
Global HArray( 4 )  As String

'****************************************************************************************

Sub Main

Dim CS As Object
On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Const CRITICAL_MESSAGE As Integer = 16
Const WARNING_QUERY    As Integer = 32

Const ANSWER_YES       As Integer = 6
Const YES_NO           As Integer = 4

Dim DEFAULT_SUBFIELD_B As String*1
Dim DEFAULT_SUBFIELD_D As String*1
Dim DEFAULT_SUBFIELD_E As String*1
Dim DEFAULT_SUBFIELD_F As String*1
Dim DEFAULT_SUBFIELD_G As String*1
Dim DEFAULT_SUBFIELD_H As String*1
Dim SUBFIELD_B         As String*2 : SUBFIELD_B   = Chr$( 223 ) & "b"
Dim SUBFIELD_D         As String*2 : SUBFIELD_D   = Chr$( 223 ) & "d"
Dim SUBFIELD_E         As String*2 : SUBFIELD_E   = Chr$( 223 ) & "e"
Dim SUBFIELD_F         As String*2 : SUBFIELD_F   = Chr$( 223 ) & "f"
Dim SUBFIELD_G         As String*2 : SUBFIELD_G   = Chr$( 223 ) & "g"
Dim SUBFIELD_H         As String*2 : SUBFIELD_H   = Chr$( 223 ) & "h"

Dim Field007String$
Dim FieldData$
Dim Instance%                      : Instance%    = 1
Dim Row%
Dim TypeOfWindow%

Dim Changed                        : Changed      = FALSE
Dim Field007Bool                   : Field007Bool = FALSE

AddNew       = FALSE
WaltsMacros$ = "[Walt's macros] Extras1:Show007Maps"

'########################################################################################

' SET THE DEFAULT VALUES FOR NEW 007 FIELDS HERE

' Enter values in lowercase. Input a blank (" ") as the value for optional subfields that
' will not be coded.

DEFAULT_SUBFIELD_B = "j"   'MANDATORY SUBFIELD
DEFAULT_SUBFIELD_D = "a"   'OPTIONAL SUBFIELD
DEFAULT_SUBFIELD_E = "a"   'OPTIONAL SUBFIELD
DEFAULT_SUBFIELD_F = "n"   'OPTIONAL SUBFIELD
DEFAULT_SUBFIELD_G = "z"   'OPTIONAL SUBFIELD
DEFAULT_SUBFIELD_H = "n"   'OPTIONAL SUBFIELD

'########################################################################################

' If what is displayed is not a bibliographic record, quit.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case -1, 3 To 16, 18, 20 To 26
    MsgBox "Sorry, this macro works only in a bibliographic record!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End Select

' If the cursor is in a map 007 field, work on that one; otherwise cycle through the
' first 10 007 fields in the record looking for a map 007.

Row% = CS.CursorRow
If CS.GetField( "...", Row%, FieldData$ ) = TRUE Then
    If Mid$( FieldData$, 1, 3 ) = "007" And Mid$( FieldData$, 6, 1 ) = "a" Then GoTo GetValues:
End If

Do Until Field007Bool = TRUE Or Instance% = 10
  Field007Bool = CS.GetField( "007", Instance%, FieldData$ )
  If Field007Bool = TRUE Then
      If Mid$( FieldData$, 6, 1 ) = "a" Then
          Exit Do
        Else
          Field007Bool = FALSE
      End If
  End If
  Instance% = Instance% + 1
Loop

If Instance% = 10 Then
    If MsgBox( "No map 007 field found! Create a new one?", WARNING_QUERY + YES_NO, WaltsMacros$ ) = ANSWER_YES Then
        AddNew  = TRUE
        Changed = TRUE
      Else
        Exit Sub
    End If
End If

' Now find all the subfields and their values. Subfield $b is mandatory, so if it is not
' found, that means no 007 field exists and a new one is added, with the default values
' given above.

GetValues:

If AddNew = TRUE Then
    BValue$ = DEFAULT_SUBFIELD_B
    DValue$ = DEFAULT_SUBFIELD_D
    EValue$ = DEFAULT_SUBFIELD_E
    FValue$ = DEFAULT_SUBFIELD_F
    GValue$ = DEFAULT_SUBFIELD_G
    HValue$ = DEFAULT_SUBFIELD_H
  Else
    BValue$ = GetSubfieldValue( FieldData$, SUBFIELD_B )
    DValue$ = GetSubfieldValue( FieldData$, SUBFIELD_D )
    EValue$ = GetSubfieldValue( FieldData$, SUBFIELD_E )
    FValue$ = GetSubfieldValue( FieldData$, SUBFIELD_F )
    GValue$ = GetSubfieldValue( FieldData$, SUBFIELD_G )
    HValue$ = GetSubfieldValue( FieldData$, SUBFIELD_H )
End If

FillArrays

' The main dialog box, showing the present values in the 007 field and offering drop-down
' lists for changing those values, or adding new ones.

Begin Dialog Dialog1Definition  282, 140, WaltsMacros$, .Dialog1ControlFunction
  PushButton    158, 116,  52,  14, "",                                   .OK
  CancelButton  218, 116,  52,  14
  DropListBox   119,  10, 152, 112, BArray(),                             .B
  DropListBox   119,  26, 152,  48, DArray(),                             .D
  DropListBox   119,  42, 152, 200, EArray(),                             .E
  DropListBox   119,  58, 152,  64, FArray(),                             .F
  DropListBox   119,  74, 152,  80, GArray(),                             .G
  DropListBox   119,  90, 152,  56, HArray(),                             .H
  Text           10,  12, 108,   8, "*Specific material designation:"
  Text           10,  28, 108,   8, "Color:"
  Text           10,  44, 108,   8, "Physical medium:"
  Text           10,  60, 108,   8, "Type of reproduction:"
  Text           10,  76, 108,   8, "Production/reproduction details:"
  Text           10,  92, 108,   8, "Positive/negative aspect:"
  Text           20, 108,  64,   8, "*Mandatory subfield"
End Dialog

Dim Dialog1 As Dialog1Definition

If Dialog( Dialog1 ) = 0 Then Exit Sub

' Build a new 007 field with the values derived from the dialog.

BValue$ = Left$( BArray( Dialog1.B ), 1 )
DValue$ = Left$( DArray( Dialog1.D ), 1 )
EValue$ = Left$( EArray( Dialog1.E ), 1 )
FValue$ = Left$( FArray( Dialog1.F ), 1 )
GValue$ = Left$( GArray( Dialog1.G ), 1 )
HValue$ = Left$( HArray( Dialog1.H ), 1 )

Field007String$ = "007  a " & SUBFIELD_B & " " & BValue$
If DVAlue$ <> " " Then Field007String$ = Field007String$ & " " & SUBFIELD_D & " " & DValue$
If EVAlue$ <> " " Then Field007String$ = Field007String$ & " " & SUBFIELD_E & " " & EValue$
If FVAlue$ <> " " Then Field007String$ = Field007String$ & " " & SUBFIELD_F & " " & FValue$
If GVAlue$ <> " " Then Field007String$ = Field007String$ & " " & SUBFIELD_G & " " & GValue$
If HVAlue$ <> " " Then Field007String$ = Field007String$ & " " & SUBFIELD_H & " " & HValue$

If AddNew Then
    If CS.AddField( 1, Field007String$ ) = FALSE Then
        MsgBox "Sorry, could not add map 007 field.", CRITICAL_MESSAGE, WaltsMacros$
    End If
  Else
    If CS.SetField( Instance%, Field007String$ ) = FALSE Then
        MsgBox "Sorry, could not change map 007 field.", CRITICAL_MESSAGE, WaltsMacros$
    End If
End If

End Sub

'****************************************************************************************

Sub FillArrays

BArray( 0 )  = "d - Atlas"
BArray( 1 )  = "g - Diagram"
BArray( 2 )  = "j - Map"
BArray( 3 )  = "k - Profile"
BArray( 4 )  = "q - Model"
BArray( 5 )  = "r - Remote-sensing image"
BArray( 6 )  = "s - Section"
BArray( 7 )  = "u - Unspecified"
BArray( 8 )  = "y - View"
BArray( 9 )  = "z - Other"

DArray( 0 )  = " "
DArray( 1 )  = "a - One color"
DArray( 2 )  = "c - Multicolor"

EArray( 0  ) = " "
EArray( 1  ) = "a - Paper"
EArray( 2  ) = "b - Wood"
EArray( 3  ) = "c - Stone"
EArray( 4  ) = "d - Metal"
EArray( 5  ) = "e - Synthetic"
EArray( 6  ) = "f - Skin"
EArray( 7  ) = "g - Textiles"
EArray( 8  ) = "i - Plastic"
EArray( 9  ) = "j - Glass"
EArray( 10 ) = "l - Vinyl"
EArray( 11 ) = "n - Vellum"
EArray( 12 ) = "p - Plaster"
EArray( 13 ) = "q - Flexible base photographic, positive"
EArray( 14 ) = "r - Flexible base photographic, negative"
EArray( 15 ) = "s - Non-flexible base photographic, positive"
EArray( 16 ) = "t - Non-flexible base photographic, negative"
EArray( 17 ) = "u - Unknown"
EArray( 18 ) = "v - Leather"
EArray( 19 ) = "w - Parchment"
EArray( 20 ) = "y - Other photographic medium"
EArray( 21 ) = "z - Other"

FArray( 0 )  = " "
FArray( 1 )  = "f - Facsimile"
FArray( 2 )  = "n - Not applicable"
FArray( 3 )  = "u - Unknown"
FArray( 4 )  = "z - Other"

GArray( 0 )  = " "
GArray( 1 )  = "a - Photocopy, blueline print"
GArray( 2 )  = "b - Photocopy"
GArray( 3 )  = "c - Pre-production"
GArray( 4 )  = "d - Film"
GArray( 5 )  = "u - Unknown"
GArray( 6 )  = "z - Other"

HArray( 0 )  = " "
HArray( 1 )  = "a - Positive"
HArray( 2 )  = "b - Negative"
HArray( 3 )  = "m - Mixed polarity"
HArray( 4 )  = "n - Not applicable"

End Sub

'****************************************************************************************

Function ChangeTest( WhichControl$ ) As Integer

Dim Changed                  : Changed = FALSE

Select Case WhichControl$

  Case "B"
    If Left$( DlgText( "B" ), 1 ) <> BValue$ Then Changed = TRUE
  Case "D"
    If Left$( DlgText( "D" ), 1 ) <> DValue$ Then Changed = TRUE
  Case "E"
    If Left$( DlgText( "E" ), 1 ) <> EValue$ Then Changed = TRUE
  Case "F"
    If Left$( DlgText( "F" ), 1 ) <> FValue$ Then Changed = TRUE
  Case "G"
    If Left$( DlgText( "G" ), 1 ) <> GValue$ Then Changed = TRUE
  Case "H"
    If Left$( DlgText( "H" ), 1 ) <> HValue$ Then Changed = TRUE

End Select

If Changed Then
    ChangeTest = -1
  Else
    ChangeTest = 0
End If

End Function

'****************************************************************************************

Function GetSubfieldValue( InString$, WhichSubfield$ ) As String

Dim p As Integer

p = Instr( InString$, WhichSubfield$ )
If p <> 0 Then
    GetSubfieldValue = Mid$( InString$, p + 3, 1 )
  Else
    GetSubfieldValue = " "
End If

End Function

'****************************************************************************************

Function Dialog1ControlFunction( Id$, Action%, SValue& )

Const CONTROL_CHANGE As Integer = 2
Const DISABLED       As Integer = 0
Const ENABLED        As Integer = 1
Const INITIALIZE     As Integer = 1

Dim Changed                  : Changed = TRUE

Select Case Action%

  Case INITIALIZE

    DlgText   "B",  BValue$
    DlgText   "D",  DValue$
    DlgText   "E",  EValue$
    DlgText   "F",  FValue$
    DlgText   "G",  GValue$
    DlgText   "H",  HValue$
    If AddNew Then
        DlgText   "OK", "Add 007"
      Else
        DlgText   "OK", "Close"
    End If


  Case CONTROL_CHANGE

    If AddNew = FALSE Then
        If ChangeTest( "B" ) = 0 Then
            If ChangeTest( "D" ) = 0 Then
                If ChangeTest( "E" ) = 0 Then
                    If ChangeTest( "F" ) = 0 Then
                        If ChangeTest( "G" ) = 0 Then
                            If ChangeTest( "H" ) = 0 Then
                                Changed = FALSE
                            End If
                        End If
                    End If
                End If
            End If
        End If
        If Changed Then
            DlgText   "OK", "Change 007"
          Else
            DlgText   "OK", "Close"
        End If
    End If

End Select

End Function
'39213037

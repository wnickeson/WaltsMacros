' MacroName:Show041B.2025.01
' MacroDescription:Displays the language codes in an 041 field in a bibliographic record
' for guided entry or verification.
'
' This macro was written by Walter F. Nickeson and last updated 2 May 2025.
' It was developed in Connexion client 3.1 running in Windows 11 Enterprise and 64-bit
' Windows 10 Pro.
' Walt's macros for the Connexion client: https://github.com/wnickeson/WaltsMacros
' wfnickeson@zohomail.com
'
' Copyright 2025 Walter F. Nickeson.
'
' Permission is hereby granted, free of charge, to any person obtaining a copy of this
' software and associated documentation files (the "Software"), to deal in the Software
' without restriction, including without limitation the rights to use, copy, modify,
' merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
' permit persons to whom the Software is furnished to do so, subject to the following
' conditions:
'
' The above copyright notice and this permission notice shall be included in all copies
' or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
' INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
' PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
' HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
' THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'****************************************************************************************
' How it works: Run the macro to display an 041 field in a view with labeled subfields
' and a searchable list of languages, to aid in verification and editing of the field. If
' the macro is run with the cursor already in an 041 field, that field will be the one on
' display; otherwise, the macro displays the first 041 field in the record. If no 041
' field is present, the macro can help create one by offering guided input.
'
' The macro shows an 041 field in subfield groups. For each subfield, the macro displays
' a trio of text boxes, containing codes for the languages of the item, any original
' languages, and intermediate translations. Enter language codes in the text boxes, or
' browse or search the list of MARC languages in the dialog box to have codes adde
' directly. The only formatting requirement for input is that each language code in a
' text box be separated from the next by a single space. If multiple codes are found in a
' single subfield, as might be seen on an older record, the macro separates them
' automatically and can update the field without making any other changes.
'
' When searching for a language name, enter at least three characters. This will retrieve
' language codes as well as names. The shorter the search string entered, the more
' language names are likely to be retrieved. The list sorts the names by relevance.
' Whether a language name is found by a browse or by a search, the code for that language
' can be quickly added to the end of the selected subfield with a click of the mouse.

' The order of subfields in an existing field is maintained. New subfields added to the
' field appear following any subfields already present. When adding subfields, add them
' in the appropriate order for the item; the macro doesn't know enough to do that on its
' own. For any specific subfield containing the language codes of the item, the macro
' always keeps its associated subfields for related translation codes together. The only
' reordering done by this macro is in subfields $b and $f. In those subfields, language
' codes are put into alphabetical order.
'
' If subfields $h, $k, $m, or $n are present or added, the first indicator ("Item is or
' includes a translation") is set to "1", but of course whether or not the item is or
' includes a translation must be confirmed. These subfields can't be added at all if they
' follow a subfield code for which no language of original is allowed, such as for tables
' of contents (subfield $f).
'
' If the language code in the fixed field does not appear as the first language code in
' an 041 field, the macro offers a quick fix to set things right--to either change the
' fixed field to match the 041 field, or to change the first code in the 041 field to
' match the fixed field.
'
' The macro will not add a new 041 field consisting of only one language code, following
' OCLC policy.
'
' Finally, the macro works only with fields containing three-letter MARC language codes.
' Fields containing second indicator "7," stating that non-MARC codes are used, are
' rejected for consideration.
'****************************************************************************************

Option Compare Text
Option Explicit

Declare Sub MatchNamesToCodes  ( StringIn$ )
Declare Sub SearchLanguageNames( InString$ )
Declare Sub SetLanguageArrays

Declare Function FieldOutput             ( DelimSymbol$ )     As String
Declare Function FindCodesForNames       ( InputString$, _
                                           High%, _
                                           Low% )             As Integer
Declare Function FormatSubfieldsForOutput( InString$, _
                                           SubfCode$, _
                                           DelimSymbol$ )     As String
Declare Function SortSubfieldCodes       ( InString$ )        As String
Declare Function ToggleCodeIndex         ( InVal As Variant ) As Variant

Declare Function Dialog1ControlFunction( Id$, Action%, SVal& )

Type SubfieldStrings
 tInterLang        As String
 tOriginalLang     As String
 tOriginalLangCode As String
 tPrimaryLangs     As String
End Type

Global Const LANG_CODE_LENGTH     As Integer = 3
Global Const LANGUAGE_CODES_COUNT As Integer = 485
Global Const WARNING_MESSAGE      As Integer = 48

Global Const ARROW_PREFIX         As String  = "=>  "    'A prefix to a subfield in the list to show that it appears in the
                                                         ' field.
Global Const SPACE_PREFIX         As String  = "      "  'A prefix in the list of subfields to attempt to line them up, since
                                                         'OML has no way to align text within list boxes in a dialog box.

' Theses constants are for the subfields available in the drop-down list of subfields.
' There are no constants for subfields associated with translations, because those
' subfields can only exist in relation to one of the primary subfields below. Codes for
' the languages in these subfields, and for languages of the original and for
' intermediate translations, are contained together in the special record variable
' "SubfieldStrings."

Global Const aA As Integer = 0
Global Const aB As Integer = 1
Global Const aD As Integer = 2
Global Const aE As Integer = 3
Global Const aF As Integer = 4
Global Const aG As Integer = 5
Global Const aI As Integer = 6
Global Const aJ As Integer = 7
Global Const aP As Integer = 8
Global Const aQ As Integer = 9
Global Const aR As Integer = 10
Global Const aT As Integer = 11

Global CS As Object

Global FF_Lang$
Global FirstCode$
Global Ind1$
Global Ind2$
Global NewField$
Global OriginalField$
Global SubfieldsUsed$
Global TypeOfRecord%
Global WaltsMacros$

Global AddNew

Global DELIMITER    As String*1
Global DOUBLE_QUOTE As String*1

Global LanguageCodes   ( LANGUAGE_CODES_COUNT ) As String
Global LanguageNames   ( LANGUAGE_CODES_COUNT ) As String
Global RelatedSubfields( 2 )                    As String
Global ShowCodesNames  ()                       As String
Global SubfieldList    ( 11 )                   As String
Global Subfields       ( 11 )                   As SubfieldStrings

'****************************************************************************************

Sub Main

On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Const CRITICAL_MESSAGE     As Integer = 16
Const DIALOG_BUTTON_CANCEL As Integer = 102
Const INFORMATION_MESSAGE  As Integer = 64

Const FILL_CHAR            As Integer = 252

Dim ArrayIndex%
Dim BrowseListInstructions$
Dim CodeStringSplit%
Dim CurrArrayString$
Dim DataEntryInstructions$
Dim FFChangedNote$
Dim FF_Type$
Dim FieldData$
Dim LangCode$
Dim NextDelimiter%
Dim PosFF%
Dim PrevSubfieldCode$
Dim Row%
Dim SearchBoxInstructions$
Dim SubfieldCode$
Dim SubfieldSplit%
Dim SubfieldString$
Dim Tag$
Dim TempString$
Dim TestChar$
Dim TypeOfWindow%
Dim WorkformTest$

Dim EmptyField               : EmptyField = FALSE
Dim Found041                 : Found041   = FALSE
Dim In041                    : In041      = FALSE

Dim i As Integer, j As Integer, p As Integer, q As Integer

DELIMITER    = Chr$( 223 )
DOUBLE_QUOTE = Chr$( 034 )

WaltsMacros$ = "[Walt's macros] Extras1:Show041"

' The list of subfields available to edit. The other subfields valid in the field are for
' the original language and intermediate translations, but they can only appear following
' the actual language of the item in one of the subfields below. Note the variable
' spacing to try to align the columns of codes and descriptions; OML has no way to fine-
' tune layout in a dialog box on its own.

SubfieldList( 0  ) = "a - Language code of text/sound track or separate title"
SubfieldList( 1  ) = "b - Language code of summary or abstract"
SubfieldList( 2  ) = "d - Language code of sung or spoken text"
SubfieldList( 3  ) = "e - Language code of librettos"
SubfieldList( 4  ) = "f -  Language code of table of contents"
SubfieldList( 5  ) = "g - Language code of accompanying material other than librettos and transcripts"
SubfieldList( 6  ) = "i -  Language code of intertitles"
SubfieldList( 7  ) = "j -  Language code of subtitles"
SubfieldList( 8  ) = "p - Language code of captions"
SubfieldList( 9  ) = "q - Language code of accessible audio"
SubfieldList( 10 ) = "r -  Language code of accessible visual language"
SubfieldList( 11 ) = "t -  Language code of accompanying transcripts for audiovisual materials"

' Instructions for the dialog box.

DataEntryInstructions$  = "Select a subfield from the drop-down list above. Enter language codes directly, or browse or search"
DataEntryInstructions$  = DataEntryInstructions$ & " in the boxes below. Separate language codes in a subfield with spaces."
BrowseListInstructions$ = "Browse for a language name from this list:"
FFChangedNote$          = "The language code in the fixed field was changed from " & DOUBLE_QUOTE & FF_Lang$ & DOUBLE_QUOTE
FFChangedNote$          = FFChangedNote$ & " to " & DOUBLE_QUOTE & FirstCode & DOUBLE_QUOTE & "."
SearchBoxInstructions$  = "Or search for a language name or code (enter at least 3 characters):"

' First, make sure a bibliographic record is displayed.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case -1, 3 To 16, 18, 20 To 26
    MsgBox "Sorry, this macro works only in a bibliographic record!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End Select

' If the cursor is already in an 041 field, get that field for processing; otherwise
' search for the first 041 field in the record. If an 041 field is found, check the
' second indicator to make sure the macro is going to encounter only MARC language codes.

Row% = CS.CursorRow
If CS.GetField( "...", Row%, FieldData$ ) Then
    Tag$ = Left$( FieldData$, 3 )
    If Tag$ = "041" Then
        OriginalField$ = FieldData$
        Found041       = TRUE
        In041          = TRUE
        AddNew         = FALSE
      Else
        If CS.GetField( "041", 1, FieldData$ ) Then
            OriginalField$ = FieldData$
            Found041       = TRUE
            AddNew         = FALSE
          Else
            Found041       = FALSE
            AddNew         = TRUE
            EmptyField     = TRUE
        End If
    End If
End If

' Proceed by getting some fixed field values, which may mean altering and then restoring
' display of the fixed field. If the fixed field values being sought are unavailable or
' are fill characters, give them dummy values using the digit "9" (safe because the
' allowable values are letters).

PosFF% = CS.FixedFieldPosition
If PosFF% <> 1 Then CS.FixedFieldPosition = 1

If CS.GetFixedField( "Type", FF_Type$ ) Then
    If Asc( FF_Type$ ) = FILL_CHAR Then
        FF_Type$ = "9"
    End If
  Else
    FF_Type$ = "9"
End If
If CS.GetFixedField( "Lang", FF_Lang$ ) Then
    If Asc( Left$( FF_Lang$, 1 ) ) = FILL_CHAR Then
        FF_Lang$ = "999"
      Else
        If FF_Type$ Like "[ij]" Then
            TypeOfRecord% = aD
          Else
            TypeOfRecord% = aA
        End If
    End If
  Else
    FF_Lang$ = "999"
End If

CS.FixedFieldPosition = PosFF%

' Fill the two language arrays.

SetLanguageArrays

If Found041 Then

' If an 041 field is found, first see if it's empty, as it will be on a workform. If it
' is, jump down to the section to add a new field. Otherwise, proceed by checking the
' second indicator to make sure the field contains only MARC codes.

    Ind2$ = Mid$( FieldData$, 5, 1 )
    If Ind2$ = "7" Then
        MsgBox "Sorry, this macro deals only with MARC language codes.", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If
    Ind1$      = Mid$( FieldData$, 4, 1 )
    FieldData$ = Mid$( FieldData$, 6 )

    WorkformTest$ = Mid$( FieldData$, 6 )
    Do
      p = InStr( WorkformTest$, DELIMITER )
      If p <> 0 Then
          WorkformTest$ = Left$( WorkformTest$, p - 1 ) & Mid$( WorkformTest$, p + 2 )
      End If
    Loop Until p = 0
    If Trim$( WorkformTest$ ) = "" Then
        AddNew     = TRUE
        EmptyField = TRUE
    End If
'    FieldData$ = Trim$( Mid$( FieldData$, 5 ) )

' To aid in processing, make sure the field begins with a delimiter and "a", which OCLC
' hides by default if the first subfield is "a".

    If EmptyField = FALSE Then
        If Left$( FieldData$, 1 ) <> DELIMITER Then
            FieldData$ = DELIMITER & "a " & FieldData$
        End If

' Break up the field into its constituent subfields.

        SubfieldSplit% = 1
        NextDelimiter% = 1
        Do
          p = InStr( SubfieldSplit%, FieldData$, DELIMITER )
          If p <> 0 Then

        ' If a delimiter is found, look ahead to the next one (or to the end of the field), and
        ' take the text string between the two occurrences for manipulation

              NextDelimiter% = InStr( p + 1, FieldData$, DELIMITER )
              If NextDelimiter% = 0 Then
                  NextDelimiter% = Len( FieldData$ ) + 2
              End If
              SubfieldString$ = Mid$( FieldData$, p, NextDelimiter% - 1 - p )
              SubfieldCode$   = Mid$( SubfieldString$, 2, 1 )
              ArrayIndex%     = ToggleCodeIndex( SubfieldCode$ )
              SubfieldString$ = Trim$( Mid$( SubfieldString$, 3 ) )
              If Len( SubfieldString$ ) Mod 3 > 0 Then
                  MsgBox "Something's wrong in the 041 field"
                  Exit Sub
                Else
                  CodeStringSplit% = 1
                  Do
                    LangCode$ = Mid$( SubfieldString$, CodeStringSplit%, LANG_CODE_LENGTH )
                    If FirstCode$ = "" Then
                        FirstCode$ = LangCode$
                    End If
                    If SubfieldCode$ Like "[abdefgijpqrt]" Then
                        CurrArrayString$ = Subfields( ArrayIndex% ).tPrimaryLangs
                        If InStr( CurrArrayString$, LangCode$ ) = 0 Then
                             Subfields( ArrayIndex% ).tPrimaryLangs = CurrArrayString$ & " " & LangCode$
                        End If

' Assume, in an existing field, that codes for intermediate and original languages
' immediately follow the appropriate code. The subfield code for an intermediate
' translation is always "k", but the code for original languages depends on on which
' subfield it follows.

                      ElseIf SubfieldCode$ = "k" Then
                        For i = Len( SubfieldsUsed$ ) To 1 Step -1
                          TestChar$ = Mid$( SubfieldsUsed$, i, 1 )
                          If TestChar$ Like "[abdefgijpqrt]" Then
                              PrevSubfieldCode$ = TestChar$
                              ArrayIndex%       = ToggleCodeIndex( PrevSubfieldCode$ )
                          End If
                        Next i
                        CurrArrayString$ = Subfields( ArrayIndex% ).tInterLang
                        If InStr( CurrArrayString$, LangCode$ ) = 0 Then
                             Subfields( ArrayIndex% ).tInterLang = CurrArrayString$ & " " & LangCode$
                        End If
                      Else
                        For i = Len( SubfieldsUsed$ ) To 1 Step -1
                          TestChar$ = Mid$( SubfieldsUsed$, i, 1 )
                          If TestChar$ Like "[abdefghijkpqrt]" Then
                              PrevSubfieldCode$ = TestChar$
                              ArrayIndex%       = ToggleCodeIndex( PrevSubfieldCode$ )
                              Exit For
                          End If
                        Next i
                        CurrArrayString$ = Subfields( ArrayIndex% ).tOriginalLang
                        If InStr( CurrArrayString$, LangCode$ ) = 0 Then
                             Subfields( ArrayIndex% ).tOriginalLang = CurrArrayString$ & " " & LangCode$
                        End If
                        Subfields( ArrayIndex% ).tOriginalLangCode = SubfieldCode$
                    End If
                    CodeStringSplit% = CodeStringSplit% + LANG_CODE_LENGTH
                  Loop Until CodeStringSplit% > Len( SubfieldString$ )
                  If InStr( SubfieldsUsed$, SubfieldCode$ ) = 0 Then
                      SubfieldsUsed$ = SubfieldsUsed$ & SubfieldCode$
                  End If
              End If

          End If
          SubfieldSplit% = p + 1
        Loop Until p = 0

' Subfields $b and $f should have their contents sorted.

        TempString$ = Subfields( ToggleCodeIndex( "b" ) ).tPrimaryLangs
        If TempString$ <> "" Then
            Call SortSubfieldCodes( TempString$ )
        End If

        TempString$ = Subfields( ToggleCodeIndex( "f" ) ).tPrimaryLangs
        If TempString$ <> "" Then
            Call SortSubfieldCodes( TempString$ )
        End If

' Trim a leading space in each subfield, but make sure there is a trailing space, so the
' subfield is ready to add a new code.

        For j = 0 To 11
          TempString$ = LTrim$( Subfields( j ).tPrimaryLangs )
          If TempString$ <> "" Then
              If Right( TempString$, 1 ) <> " " Then
                  Subfields( j ).tPrimaryLangs = TempString$ & " "
              End If
          End If
          TempString$ = LTrim$( Subfields( j ).tInterLang )
          If TempString$ <> "" Then
              If Right( TempString$, 1 ) <> " " Then
                  Subfields( j ).tInterLang = TempString$ & " "
              End If
          End If
          TempString$ = LTrim$( Subfields( j ).tOriginalLang )
          If TempString$ <> "" Then
              If Right( TempString$, 1 ) <> " " Then
                  Subfields( j ).tOriginalLang = TempString$ & " "
              End If
          End If
        Next j

    End If
End If

If AddNew Then
    If FF_Lang$ <> "999" Then
        Subfields( TypeOfRecord% ).tPrimaryLangs     = FF_Lang$ & " "
        Subfields( TypeOfRecord% ).tOriginalLangCode = "h"
        SubfieldsUsed$ = ToggleCodeIndex( TypeOfRecord% )
        Tag$           = "041"
        Ind1$          = " "
        Ind2$          = " "
    End If
End If

' Add an arrow to subfields used in the list of subfields, solely as a visual aid.

For i = 0 To 11
  If Subfields( i ).tPrimaryLangs = "" Then
      SubfieldList( i ) = SPACE_PREFIX & SubfieldList( i )
    Else
      SubfieldList( i ) = ARROW_PREFIX & SubfieldList( i )
  End If
Next i

Begin Dialog Dialog1Definition  348, 274, WaltsMacros$, .Dialog1ControlFunction
  PushButton    214, 248,  64,  16, "",                                         .OK
  CancelButton  286, 248,  52,  16
  DropListBox    18,  22, 312, 112, SubfieldList(),                             .SubfieldsListBox
  TextBox        18,  40, 312,  12,                                             .PrimariesTextBox
  TextBox        18,  66, 128,  12,                                             .OriginalsTextBox
  TextBox       202,  66, 128,  12,                                             .IntermediatesTextBox
  DropListBox    18, 132, 144, 128, LanguageNames(),                            .LanguageSelectionListBox
  ListBox       186, 132, 144,  56, ShowCodesNames(),                           .ViewCodesListBox
  TextBox        18, 170,  88,  12,                                             .SearchBox
  PushButton    114, 170,  48,  12, "Search",                                   .SearchButton
  DropListBox   248, 188,  28,  48, RelatedSubfields(),                         .SubfieldTrioListBox
  PushButton    282, 188,  48,  12, "&Add",                                     .AddButton
  Text           18,  12, 312,   8, "",                                         .DialogBoxTopText
  Text           18,  56, 120,   8, "",                                         .OriginalLang
  Text          202,  56, 120,   8, "Intermediate translations [subfield $k]:", .InterLang
  Text           18,  83, 312,  16, DataEntryInstructions$,                     .DataEntryInstructions
  Text           18, 122, 144,   8, BrowseListInstructions$,                    .BrowseListInstructions
  Text          186, 122, 144,   8, "",                                         .ViewCodesLegend
  Text           18, 152, 144,  16, SearchBoxInstructions$,                     .SearchBoxInstructions
  Text          186, 190,  56,   8, "... to this subfield:",                    .AddCodePrompt
  Text           16, 223, 316,   8, "",                                         .DisplayField
  Text           16, 246, 128,  16, FFChangedNote$,                             .FFChangeNote
  GroupBox       10,   4, 328, 100, "",                                         .SubfieldsGroupBox
  GroupBox       10, 110, 160, 100, "Browse/Search languages",                  .CodesListGroupBox
  GroupBox      178, 110, 160, 100, "",                                         .ViewCodesGroupBox
  GroupBox       10, 214, 328,  24, "",                                         .DisplayFieldGroupBox
End Dialog

Dim Dialog1 As Dialog1Definition
On Error Resume Next
Dialog Dialog1
If Err = DIALOG_BUTTON_CANCEL Then Exit Sub

' Add a new field.

'If OriginalField$ <> "" Then
    If NewField$ <> OriginalField$ Then
        If AddNew = TRUE Then
            If CS.AddField( 1, NewField$ ) Then
                If Ind1$ = "1" And AddNew = TRUE Then
                    MsgBox "041 field added. Verify the value of the first indicator: Is the item really a translation?", WARNING_MESSAGE, WaltsMacros$
                End If
              Else
                MsgBox "Sorry, could not add new 041 field.", CRITICAL_MESSAGE, WaltsMacros$
            End If

' Replace an existing field.

          Else
            If In041 Then
                If CS.SetFieldLine( Row%, NewField$ ) = FALSE Then
                    MsgBox "Sorry, could not replace 041 field.", CRITICAL_MESSAGE, WaltsMacros$
                End If
              Else
                If Len( NewField$ ) > 8 Then
                    If CS.SetField( 1, NewField$ ) = FALSE Then
                        MsgBox "Sorry, could not replace 041 field.", CRITICAL_MESSAGE, WaltsMacros$
                    End If
                End If
            End If
        End If
    End If
'End If

End Sub

'****************************************************************************************

Sub MatchNamesToCodes( StringIn$ )

' This sub takes an input of language codes and links them with their names, by using the
' two language arrays, in the form a list of items with the form "code = Language". This
' search must be a simple linear search through the whole list of language codes because
' that list is not in alphabetical order.

Const SUBSCRIPT_OUT_OF_RANGE As Integer = 9   'The Error value returned when an element of an array can't be accessed, as when
                                              ' a dynamic array has not been initialized.

Dim ArrayIndex%
Dim FieldNumber%
Dim LangCode$
Dim LangPair$
Dim UBShowCodesNames%
Dim WorkString$

Dim i As Integer, p As Integer'

Erase ShowCodesNames

WorkString$ = Trim$( StringIn$ )
If WorkString$ = "" Then
    Exit Sub
End If

' Remove any introduced double spaces, as this function uses the OML function "GetField,"
' in which a space character separates the "fields" (that is, codes) within a string.
' Extra spaces could prove fatal.

Do
  p = InStr( WorkString$, "  " )
  If p <> 0 Then
      WorkString$ = Left$( WorkString$, p - 1 ) & Mid$( WorkString$, p + 1 )
  End If
Loop Until p = 0

' Get all the three-character language codes.

ArrayIndex%  = 0
FieldNumber% = 1

Do
  LangCode$ = GetField$( WorkString$, FieldNumber%, " " )
  If LangCode$ = "" Then Exit Sub

' Check that the language code doesn't already appear in the array. If the array hasn't
' been initialized, do that now.

  On Error Resume Next
  UBShowCodesNames% = UBound( ShowCodesNames )
  If Err <> SUBSCRIPT_OUT_OF_RANGE Then
      For i = 0 To UBShowCodesNames%
        If LangCode$ = Trim$( Left$( ShowCodesNames( i ), 4 ) ) Then
            ArrayIndex% = ArrayIndex% + 1
            GoTo Increment:
        End If
      Next i
  End If

' Go through the array, from beginning to end, and get the name that matches the code,
' glue it to the code with the equals sign, and fill the intermediate array for later
' filling of the specific subfield array.

  If Len( LangCode$ ) > 2 Then
      If Len( LangCode$ ) = 3 Then
          For i = 1 To LANGUAGE_CODES_COUNT
            If LanguageCodes( i ) = LangCode$ Then
                LangPair$ = LangCode$ & " = " & LanguageNames( i )
                Exit For
            End If
          Next i
        ElseIf Len( LangCode$ ) > 3 Then
          LangPair$ = LangCode$ & " = ERROR IN CODE!"
      End If
    Else

' If codes are being deleted, remove them from the box as soon as they become strings of
' fewer than three characters.

      UBShowCodesNames% = UBound( ShowCodesNames )
      If ArrayIndex% = UBShowCodesNames% Then 'CODES ARE BEING DELETED?
          If ArrayIndex% = 0 Then
              ReDim ShowCodesNames( 0 )
            Else
              ReDim Preserve ShowCodesNames( ArrayIndex% - 1 )
          End If
        ElseIf ArrayIndex% < UBShowCodesNames% Then
          For i = ArrayIndex% + 1 To UBShowCodesNames%
            ShowCodesNames( i - 1 ) = ShowCodesNames( i )
          Next i
          ReDim Preserve ShowCodesNames( UBShowCodesNames% - 1 )
      End If
      GoTo Increment:
  End If
 If LangPair$ = "" Then
      LangPair$ = LangCode$ & " = Unknown"
  End If
  ReDim Preserve ShowCodesNames( ArrayIndex% )
  ShowCodesNames( ArrayIndex% ) = LangPair$
  LangPair$   = ""
  ArrayIndex% = ArrayIndex% + 1

Increment:

  FieldNumber% = FieldNumber% + 1
Loop Until LangCode = ""

End Sub

'****************************************************************************************

Sub SearchLanguageNames( InString$ )

' This sub searches for language names that contain the search string and attempts to
' rank the results.

Dim LanguageName$
Dim RankPosition$
Dim RankSize$
Dim Term1$
Dim Term2$
Dim UBTempArray%

Dim Swapped

Dim i As Integer, j As Integer, p As Integer

Dim TempArray() As String

' A code that matches the search term is automatically added as the first entry in the
' list. Set a flag, because if this string is selected, it doesn't need to have its code
' searched as all the other results in the TempArray do.

ReDim TempArray( 0 )
For i = 1 To LANGUAGE_CODES_COUNT
  If InString$ = LanguageCodes( i ) Then
      TempArray( 0 )    = "000000" & InString$ & " = " & LanguageNames( i )
      Exit For
  End If
Next i

If TempArray( 0 ) = "" Then
    j = 0
  Else
    j = 1
End If

' Then go through the list of language names, from beginning to end, looking for a match
' to the search term. From each language name, remove parenthetical information and the
' words "language" and "languages," as they should not be considered for the comparison.

For i = 1 To LANGUAGE_CODES_COUNT
  LanguageName$ = LanguageNames( i )
  p = InStr( LanguageName$, "(" )
  If p > 0 Then
      LanguageName$ = Trim$( Left$( LanguageName$, p - 1 ) )
  End If
  p = InStr( LanguageName$, "languages" )
  If p > 0 Then
      LanguageName$ = Trim$( Left$( LanguageName$, p - 1 ) )
  End If
  p = InStr( LanguageName$, InString$ )

' Ranking the results takes into account two factors: 1) How close the search string is
' to the beginning of the language name--the assumption being that the desired name is
' more likely to be searched by its beginning than by a sequence of characters in its
' middle; and 2) How much of the desired name is matched by the search string--the
' assumption being that the more complete the match, the more likely it is that that name
' is the one being sought. The two ranks are turned into number strings and prefixed to
' the language names. The strings will be sorted, then the prefixed numbers removed for
' display.

  If p > 0 Then

' The pseudo-scientific ranking system. The "rank position" factor takes the position of
' the search string within the language name and multiplies that number by 5.

      RankPosition$ = Trim$( Str$( ( p - 1 ) * 5 ) )
      RankPosition$ = String$( 3 - Len( RankPosition$ ), "0" ) & RankPosition$

' The "rank size" factor calculates the ratio of the length of the language name to the
' length of the search string, inverts it, multiplies it by 10, and makes it an integer.

      p = Int( 10 / ( Len( InString$ ) / Len( LanguageName$ ) ) )
      RankSize$ = Trim$( Str$( p ) )
      RankSize$ = String$( 3 - Len( RankSize$ ), "0" ) & RankSize$
      ReDim Preserve TempArray( j )
      TempArray( j ) = RankPosition$ & RankSize$ & LanguageNames( i )
      j = j + 1
  End If
Next i

UBTempArray% = UBound( TempArray )

' Do a bubble sort to get the strings in order of relevance.

Do
  Swapped = FALSE
  For i = 0 To UBTempArray% - 1
    Term1$ = TempArray( i )
    Term2$ = TempArray( i + 1 )
    If Term1$ > Term2$ Then
        TempArray( i )     = Term2$
        TempArray( i + 1 ) = Term1$
        Swapped            = TRUE
    End If
  Next i
Loop Until Swapped = FALSE

If UBTempArray% = 0 And TempArray( 0 ) = "" Then
    UBTempArray% = 1
    ReDim TempArray( UBTempArray% )
    TempArray( 0 ) = "      No match was found for the search term"
    TempArray( 1 ) = "      " & DOUBLE_QUOTE & InString$ & DOUBLE_QUOTE
End If

ReDim ShowCodesNames( UBTempArray% )
For i = 0 To UBTempArray%
  ShowCodesNames( i ) = Mid$( TempArray( i ), 7 )
Next i

End Sub

'****************************************************************************************

Sub SetLanguageArrays

' This routine fills the arrays for help in adding language codes. Codes and names are
' from MARC List for Languages at <https://id.loc.gov/vocabulary/languages.html>, last
' updated 2024-09-12. Discontinued codes, and languages assigned a group code only, are
' excluded, as also are tracings or references.

LanguageCodes(   0 ) = ""    : LanguageNames(   0 ) = "  - - - Select a language - - -  "
LanguageCodes(   1 ) = "abk" : LanguageNames(   1 ) = "Abkhaz"
LanguageCodes(   2 ) = "ace" : LanguageNames(   2 ) = "Achinese"
LanguageCodes(   3 ) = "ach" : LanguageNames(   3 ) = "Acoli"
LanguageCodes(   4 ) = "ada" : LanguageNames(   4 ) = "Adangme"
LanguageCodes(   5 ) = "ady" : LanguageNames(   5 ) = "Adygei"
LanguageCodes(   6 ) = "aar" : LanguageNames(   6 ) = "Afar"
LanguageCodes(   7 ) = "afh" : LanguageNames(   7 ) = "Afrihili (Artificial language)"
LanguageCodes(   8 ) = "afr" : LanguageNames(   8 ) = "Afrikaans"
LanguageCodes(   9 ) = "afa" : LanguageNames(   9 ) = "Afroasiatic (Other)"
LanguageCodes(  10 ) = "ain" : LanguageNames(  10 ) = "Ainu"
LanguageCodes(  11 ) = "aka" : LanguageNames(  11 ) = "Akan"
LanguageCodes(  12 ) = "akk" : LanguageNames(  12 ) = "Akkadian"
LanguageCodes(  13 ) = "alb" : LanguageNames(  13 ) = "Albanian"
LanguageCodes(  14 ) = "ale" : LanguageNames(  14 ) = "Aleut"
LanguageCodes(  15 ) = "alg" : LanguageNames(  15 ) = "Algonquian (Other)"
LanguageCodes(  16 ) = "alt" : LanguageNames(  16 ) = "Altai"
LanguageCodes(  17 ) = "tut" : LanguageNames(  17 ) = "Altaic (Other)"
LanguageCodes(  18 ) = "amh" : LanguageNames(  18 ) = "Amharic"
LanguageCodes(  19 ) = "anp" : LanguageNames(  19 ) = "Angika"
LanguageCodes(  20 ) = "apa" : LanguageNames(  20 ) = "Apache languages"
LanguageCodes(  21 ) = "ara" : LanguageNames(  21 ) = "Arabic"
LanguageCodes(  22 ) = "arg" : LanguageNames(  22 ) = "Aragonese"
LanguageCodes(  23 ) = "arc" : LanguageNames(  23 ) = "Aramaic"
LanguageCodes(  24 ) = "arp" : LanguageNames(  24 ) = "Arapaho"
LanguageCodes(  25 ) = "arw" : LanguageNames(  25 ) = "Arawak"
LanguageCodes(  26 ) = "arm" : LanguageNames(  26 ) = "Armenian"
LanguageCodes(  27 ) = "rup" : LanguageNames(  27 ) = "Aromanian"
LanguageCodes(  28 ) = "art" : LanguageNames(  28 ) = "Artificial (Other)"
LanguageCodes(  29 ) = "asm" : LanguageNames(  29 ) = "Assamese"
LanguageCodes(  30 ) = "ath" : LanguageNames(  30 ) = "Athapascan (Other)"
LanguageCodes(  31 ) = "aus" : LanguageNames(  31 ) = "Australian languages"
LanguageCodes(  32 ) = "map" : LanguageNames(  32 ) = "Austronesian (Other)"
LanguageCodes(  33 ) = "ava" : LanguageNames(  33 ) = "Avaric"
LanguageCodes(  34 ) = "ave" : LanguageNames(  34 ) = "Avestan"
LanguageCodes(  35 ) = "awa" : LanguageNames(  35 ) = "Awadhi"
LanguageCodes(  36 ) = "aym" : LanguageNames(  36 ) = "Aymara"
LanguageCodes(  37 ) = "aze" : LanguageNames(  37 ) = "Azerbaijani"
LanguageCodes(  38 ) = "ast" : LanguageNames(  38 ) = "Bable"
LanguageCodes(  39 ) = "ban" : LanguageNames(  39 ) = "Balinese"
LanguageCodes(  40 ) = "bat" : LanguageNames(  40 ) = "Baltic (Other)"
LanguageCodes(  41 ) = "bal" : LanguageNames(  41 ) = "Baluchi"
LanguageCodes(  42 ) = "bam" : LanguageNames(  42 ) = "Bambara"
LanguageCodes(  43 ) = "bai" : LanguageNames(  43 ) = "Bamileke languages"
LanguageCodes(  44 ) = "bad" : LanguageNames(  44 ) = "Banda languages"
LanguageCodes(  45 ) = "bnt" : LanguageNames(  45 ) = "Bantu (Other)"
LanguageCodes(  46 ) = "bas" : LanguageNames(  46 ) = "Basa"
LanguageCodes(  47 ) = "bak" : LanguageNames(  47 ) = "Bashkir"
LanguageCodes(  48 ) = "baq" : LanguageNames(  48 ) = "Basque"
LanguageCodes(  49 ) = "btk" : LanguageNames(  49 ) = "Batak"
LanguageCodes(  50 ) = "bej" : LanguageNames(  50 ) = "Beja"
LanguageCodes(  51 ) = "bel" : LanguageNames(  51 ) = "Belarusian"
LanguageCodes(  52 ) = "bem" : LanguageNames(  52 ) = "Bemba"
LanguageCodes(  53 ) = "ben" : LanguageNames(  53 ) = "Bengali"
LanguageCodes(  54 ) = "ber" : LanguageNames(  54 ) = "Berber (Other)"
LanguageCodes(  55 ) = "bho" : LanguageNames(  55 ) = "Bhojpuri"
LanguageCodes(  56 ) = "bih" : LanguageNames(  56 ) = "Bihari (Other)"
LanguageCodes(  57 ) = "bik" : LanguageNames(  57 ) = "Bikol"
LanguageCodes(  58 ) = "byn" : LanguageNames(  58 ) = "Bilin"
LanguageCodes(  59 ) = "bis" : LanguageNames(  59 ) = "Bislama"
LanguageCodes(  60 ) = "zbl" : LanguageNames(  60 ) = "Blissymbolics"
LanguageCodes(  61 ) = "bos" : LanguageNames(  61 ) = "Bosnian"
LanguageCodes(  62 ) = "bra" : LanguageNames(  62 ) = "Braj"
LanguageCodes(  63 ) = "bre" : LanguageNames(  63 ) = "Breton"
LanguageCodes(  64 ) = "bug" : LanguageNames(  64 ) = "Bugis"
LanguageCodes(  65 ) = "bul" : LanguageNames(  65 ) = "Bulgarian"
LanguageCodes(  66 ) = "bua" : LanguageNames(  66 ) = "Buriat"
LanguageCodes(  67 ) = "bur" : LanguageNames(  67 ) = "Burmese"
LanguageCodes(  68 ) = "cad" : LanguageNames(  68 ) = "Caddo"
LanguageCodes(  69 ) = "car" : LanguageNames(  69 ) = "Carib"
LanguageCodes(  70 ) = "cat" : LanguageNames(  70 ) = "Catalan"
LanguageCodes(  71 ) = "cau" : LanguageNames(  71 ) = "Caucasian (Other)"
LanguageCodes(  72 ) = "ceb" : LanguageNames(  72 ) = "Cebuano"
LanguageCodes(  73 ) = "cel" : LanguageNames(  73 ) = "Celtic (Other)"
LanguageCodes(  74 ) = "cai" : LanguageNames(  74 ) = "Central American Indian (Other)"
LanguageCodes(  75 ) = "chg" : LanguageNames(  75 ) = "Chagatai"
LanguageCodes(  76 ) = "cmc" : LanguageNames(  76 ) = "Chamic languages"
LanguageCodes(  77 ) = "cha" : LanguageNames(  77 ) = "Chamorro"
LanguageCodes(  78 ) = "che" : LanguageNames(  78 ) = "Chechen"
LanguageCodes(  79 ) = "chr" : LanguageNames(  79 ) = "Cherokee"
LanguageCodes(  80 ) = "chy" : LanguageNames(  80 ) = "Cheyenne"
LanguageCodes(  81 ) = "chb" : LanguageNames(  81 ) = "Chibcha"
LanguageCodes(  82 ) = "chi" : LanguageNames(  82 ) = "Chinese"
LanguageCodes(  83 ) = "chn" : LanguageNames(  83 ) = "Chinook jargon"
LanguageCodes(  84 ) = "chp" : LanguageNames(  84 ) = "Chipewyan"
LanguageCodes(  85 ) = "cho" : LanguageNames(  85 ) = "Choctaw"
LanguageCodes(  86 ) = "chu" : LanguageNames(  86 ) = "Church Slavic"
LanguageCodes(  87 ) = "chk" : LanguageNames(  87 ) = "Chuukese"
LanguageCodes(  88 ) = "chv" : LanguageNames(  88 ) = "Chuvash"
LanguageCodes(  89 ) = "cop" : LanguageNames(  89 ) = "Coptic"
LanguageCodes(  90 ) = "cor" : LanguageNames(  90 ) = "Cornish"
LanguageCodes(  91 ) = "cos" : LanguageNames(  91 ) = "Corsican"
LanguageCodes(  92 ) = "cre" : LanguageNames(  92 ) = "Cree"
LanguageCodes(  93 ) = "mus" : LanguageNames(  93 ) = "Creek"
LanguageCodes(  94 ) = "crp" : LanguageNames(  94 ) = "Creoles and Pidgins (Other)"
LanguageCodes(  95 ) = "cpe" : LanguageNames(  95 ) = "Creoles and Pidgins, English-based (Other)"
LanguageCodes(  96 ) = "cpf" : LanguageNames(  96 ) = "Creoles and Pidgins, French-based (Other)"
LanguageCodes(  97 ) = "cpp" : LanguageNames(  97 ) = "Creoles and Pidgins, Portuguese-based (Other)"
LanguageCodes(  98 ) = "crh" : LanguageNames(  98 ) = "Crimean Tatar"
LanguageCodes(  99 ) = "hrv" : LanguageNames(  99 ) = "Croatian"
LanguageCodes( 100 ) = "cus" : LanguageNames( 100 ) = "Cushitic (Other)"
LanguageCodes( 101 ) = "cze" : LanguageNames( 101 ) = "Czech"
LanguageCodes( 102 ) = "dak" : LanguageNames( 102 ) = "Dakota"
LanguageCodes( 103 ) = "dan" : LanguageNames( 103 ) = "Danish"
LanguageCodes( 104 ) = "dar" : LanguageNames( 104 ) = "Dargwa"
LanguageCodes( 105 ) = "day" : LanguageNames( 105 ) = "Dayak"
LanguageCodes( 106 ) = "del" : LanguageNames( 106 ) = "Delaware"
LanguageCodes( 107 ) = "din" : LanguageNames( 107 ) = "Dinka"
LanguageCodes( 108 ) = "div" : LanguageNames( 108 ) = "Divehi"
LanguageCodes( 109 ) = "doi" : LanguageNames( 109 ) = "Dogri"
LanguageCodes( 110 ) = "dra" : LanguageNames( 110 ) = "Dravidian (Other)"
LanguageCodes( 111 ) = "dua" : LanguageNames( 111 ) = "Duala"
LanguageCodes( 112 ) = "dut" : LanguageNames( 112 ) = "Dutch"
LanguageCodes( 113 ) = "dum" : LanguageNames( 113 ) = "Dutch, Middle (ca. 1050-1350)"
LanguageCodes( 114 ) = "dyu" : LanguageNames( 114 ) = "Dyula"
LanguageCodes( 115 ) = "dzo" : LanguageNames( 115 ) = "Dzongkha"
LanguageCodes( 116 ) = "frs" : LanguageNames( 116 ) = "East Frisian"
LanguageCodes( 117 ) = "bin" : LanguageNames( 117 ) = "Edo"
LanguageCodes( 118 ) = "efi" : LanguageNames( 118 ) = "Efik"
LanguageCodes( 119 ) = "egy" : LanguageNames( 119 ) = "Egyptian"
LanguageCodes( 120 ) = "eka" : LanguageNames( 120 ) = "Ekajuk"
LanguageCodes( 121 ) = "elx" : LanguageNames( 121 ) = "Elamite"
LanguageCodes( 122 ) = "eng" : LanguageNames( 122 ) = "English"
LanguageCodes( 123 ) = "enm" : LanguageNames( 123 ) = "English, Middle (1100-1500)"
LanguageCodes( 124 ) = "ang" : LanguageNames( 124 ) = "English, Old (ca. 450-1100)"
LanguageCodes( 125 ) = "myv" : LanguageNames( 125 ) = "Erzya"
LanguageCodes( 126 ) = "epo" : LanguageNames( 126 ) = "Esperanto"
LanguageCodes( 127 ) = "est" : LanguageNames( 127 ) = "Estonian"
LanguageCodes( 128 ) = "gez" : LanguageNames( 128 ) = "Ethiopic"
LanguageCodes( 129 ) = "ewe" : LanguageNames( 129 ) = "Ewe"
LanguageCodes( 130 ) = "ewo" : LanguageNames( 130 ) = "Ewondo"
LanguageCodes( 131 ) = "fan" : LanguageNames( 131 ) = "Fang"
LanguageCodes( 132 ) = "fat" : LanguageNames( 132 ) = "Fanti"
LanguageCodes( 133 ) = "fao" : LanguageNames( 133 ) = "Faroese"
LanguageCodes( 134 ) = "fij" : LanguageNames( 134 ) = "Fijian"
LanguageCodes( 135 ) = "fil" : LanguageNames( 135 ) = "Filipino"
LanguageCodes( 136 ) = "fin" : LanguageNames( 136 ) = "Finnish"
LanguageCodes( 137 ) = "fiu" : LanguageNames( 137 ) = "Finno-Ugrian (Other)"
LanguageCodes( 138 ) = "fon" : LanguageNames( 138 ) = "Fon"
LanguageCodes( 139 ) = "fre" : LanguageNames( 139 ) = "French"
LanguageCodes( 140 ) = "frm" : LanguageNames( 140 ) = "French, Middle (ca. 1300-1600)"
LanguageCodes( 141 ) = "fro" : LanguageNames( 141 ) = "French, Old (ca. 842-1300)"
LanguageCodes( 142 ) = "fry" : LanguageNames( 142 ) = "Frisian"
LanguageCodes( 143 ) = "fur" : LanguageNames( 143 ) = "Friulian"
LanguageCodes( 144 ) = "ful" : LanguageNames( 144 ) = "Fula"
LanguageCodes( 145 ) = "glg" : LanguageNames( 145 ) = "Galician"
LanguageCodes( 146 ) = "lug" : LanguageNames( 146 ) = "Ganda"
LanguageCodes( 147 ) = "gay" : LanguageNames( 147 ) = "Gayo"
LanguageCodes( 148 ) = "gba" : LanguageNames( 148 ) = "Gbaya"
LanguageCodes( 149 ) = "geo" : LanguageNames( 149 ) = "Georgian"
LanguageCodes( 150 ) = "ger" : LanguageNames( 150 ) = "German"
LanguageCodes( 151 ) = "gmh" : LanguageNames( 151 ) = "German, Middle High (ca. 1050-1500)"
LanguageCodes( 152 ) = "goh" : LanguageNames( 152 ) = "German, Old High (ca. 750-1050)"
LanguageCodes( 153 ) = "gem" : LanguageNames( 153 ) = "Germanic (Other)"
LanguageCodes( 154 ) = "gil" : LanguageNames( 154 ) = "Gilbertese"
LanguageCodes( 155 ) = "gon" : LanguageNames( 155 ) = "Gondi"
LanguageCodes( 156 ) = "gor" : LanguageNames( 156 ) = "Gorontalo"
LanguageCodes( 157 ) = "got" : LanguageNames( 157 ) = "Gothic"
LanguageCodes( 158 ) = "grb" : LanguageNames( 158 ) = "Grebo"
LanguageCodes( 159 ) = "grc" : LanguageNames( 159 ) = "Greek, Ancient (to 1453)"
LanguageCodes( 160 ) = "gre" : LanguageNames( 160 ) = "Greek, Modern (1453- )"
LanguageCodes( 161 ) = "grn" : LanguageNames( 161 ) = "Guarani"
LanguageCodes( 162 ) = "guj" : LanguageNames( 162 ) = "Gujarati"
LanguageCodes( 163 ) = "gwi" : LanguageNames( 163 ) = "Gwich'in"
LanguageCodes( 164 ) = "gaa" : LanguageNames( 164 ) = "Gã"
LanguageCodes( 165 ) = "hai" : LanguageNames( 165 ) = "Haida"
LanguageCodes( 166 ) = "hat" : LanguageNames( 166 ) = "Haitian French Creole"
LanguageCodes( 167 ) = "hau" : LanguageNames( 167 ) = "Hausa"
LanguageCodes( 168 ) = "haw" : LanguageNames( 168 ) = "Hawaiian"
LanguageCodes( 169 ) = "heb" : LanguageNames( 169 ) = "Hebrew"
LanguageCodes( 170 ) = "her" : LanguageNames( 170 ) = "Herero"
LanguageCodes( 171 ) = "hil" : LanguageNames( 171 ) = "Hiligaynon"
LanguageCodes( 172 ) = "hin" : LanguageNames( 172 ) = "Hindi"
LanguageCodes( 173 ) = "hmo" : LanguageNames( 173 ) = "Hiri Motu"
LanguageCodes( 174 ) = "hit" : LanguageNames( 174 ) = "Hittite"
LanguageCodes( 175 ) = "hmn" : LanguageNames( 175 ) = "Hmong"
LanguageCodes( 176 ) = "hun" : LanguageNames( 176 ) = "Hungarian"
LanguageCodes( 177 ) = "hup" : LanguageNames( 177 ) = "Hupa"
LanguageCodes( 178 ) = "iba" : LanguageNames( 178 ) = "Iban"
LanguageCodes( 179 ) = "ice" : LanguageNames( 179 ) = "Icelandic"
LanguageCodes( 180 ) = "ido" : LanguageNames( 180 ) = "Ido"
LanguageCodes( 181 ) = "ibo" : LanguageNames( 181 ) = "Igbo"
LanguageCodes( 182 ) = "ijo" : LanguageNames( 182 ) = "Ijo"
LanguageCodes( 183 ) = "ilo" : LanguageNames( 183 ) = "Iloko"
LanguageCodes( 184 ) = "smn" : LanguageNames( 184 ) = "Inari Sami"
LanguageCodes( 185 ) = "inc" : LanguageNames( 185 ) = "Indic (Other)"
LanguageCodes( 186 ) = "ine" : LanguageNames( 186 ) = "Indo-European (Other)"
LanguageCodes( 187 ) = "ind" : LanguageNames( 187 ) = "Indonesian"
LanguageCodes( 188 ) = "inh" : LanguageNames( 188 ) = "Ingush"
LanguageCodes( 189 ) = "ina" : LanguageNames( 189 ) = "Interlingua (International Auxiliary Language Association)"
LanguageCodes( 190 ) = "ile" : LanguageNames( 190 ) = "Interlingue"
LanguageCodes( 191 ) = "iku" : LanguageNames( 191 ) = "Inuktitut"
LanguageCodes( 192 ) = "ipk" : LanguageNames( 192 ) = "Inupiaq"
LanguageCodes( 193 ) = "ira" : LanguageNames( 193 ) = "Iranian (Other)"
LanguageCodes( 194 ) = "gle" : LanguageNames( 194 ) = "Irish"
LanguageCodes( 195 ) = "mga" : LanguageNames( 195 ) = "Irish, Middle (ca. 1100-1550)"
LanguageCodes( 196 ) = "sga" : LanguageNames( 196 ) = "Irish, Old (to 1100)"
LanguageCodes( 197 ) = "iro" : LanguageNames( 197 ) = "Iroquoian (Other)"
LanguageCodes( 198 ) = "ita" : LanguageNames( 198 ) = "Italian"
LanguageCodes( 199 ) = "jpn" : LanguageNames( 199 ) = "Japanese"
LanguageCodes( 200 ) = "jav" : LanguageNames( 200 ) = "Javanese"
LanguageCodes( 201 ) = "jrb" : LanguageNames( 201 ) = "Judeo-Arabic"
LanguageCodes( 202 ) = "jpr" : LanguageNames( 202 ) = "Judeo-Persian"
LanguageCodes( 203 ) = "kbd" : LanguageNames( 203 ) = "Kabardian"
LanguageCodes( 204 ) = "kab" : LanguageNames( 204 ) = "Kabyle"
LanguageCodes( 205 ) = "kac" : LanguageNames( 205 ) = "Kachin"
LanguageCodes( 206 ) = "kal" : LanguageNames( 206 ) = "Kalâtdlisut"
LanguageCodes( 207 ) = "kam" : LanguageNames( 207 ) = "Kamba"
LanguageCodes( 208 ) = "kan" : LanguageNames( 208 ) = "Kannada"
LanguageCodes( 209 ) = "kau" : LanguageNames( 209 ) = "Kanuri"
LanguageCodes( 210 ) = "kaa" : LanguageNames( 210 ) = "Kara-Kalpak"
LanguageCodes( 211 ) = "krc" : LanguageNames( 211 ) = "Karachay-Balkar"
LanguageCodes( 212 ) = "krl" : LanguageNames( 212 ) = "Karelian"
LanguageCodes( 213 ) = "kar" : LanguageNames( 213 ) = "Karen languages"
LanguageCodes( 214 ) = "kas" : LanguageNames( 214 ) = "Kashmiri"
LanguageCodes( 215 ) = "csb" : LanguageNames( 215 ) = "Kashubian"
LanguageCodes( 216 ) = "kaw" : LanguageNames( 216 ) = "Kawi"
LanguageCodes( 217 ) = "kaz" : LanguageNames( 217 ) = "Kazakh"
LanguageCodes( 218 ) = "kha" : LanguageNames( 218 ) = "Khasi"
LanguageCodes( 219 ) = "khm" : LanguageNames( 219 ) = "Khmer"
LanguageCodes( 220 ) = "khi" : LanguageNames( 220 ) = "Khoisan (Other)"
LanguageCodes( 221 ) = "kho" : LanguageNames( 221 ) = "Khotanese"
LanguageCodes( 222 ) = "kik" : LanguageNames( 222 ) = "Kikuyu"
LanguageCodes( 223 ) = "kmb" : LanguageNames( 223 ) = "Kimbundu"
LanguageCodes( 224 ) = "kin" : LanguageNames( 224 ) = "Kinyarwanda"
LanguageCodes( 225 ) = "tlh" : LanguageNames( 225 ) = "Klingon (Artificial language)"
LanguageCodes( 226 ) = "kom" : LanguageNames( 226 ) = "Komi"
LanguageCodes( 227 ) = "kon" : LanguageNames( 227 ) = "Kongo"
LanguageCodes( 228 ) = "kok" : LanguageNames( 228 ) = "Konkani"
LanguageCodes( 229 ) = "kut" : LanguageNames( 229 ) = "Kootenai"
LanguageCodes( 230 ) = "kor" : LanguageNames( 230 ) = "Korean"
LanguageCodes( 231 ) = "kos" : LanguageNames( 231 ) = "Kosraean"
LanguageCodes( 232 ) = "kpe" : LanguageNames( 232 ) = "Kpelle"
LanguageCodes( 233 ) = "kro" : LanguageNames( 233 ) = "Kru (Other)"
LanguageCodes( 234 ) = "kua" : LanguageNames( 234 ) = "Kuanyama"
LanguageCodes( 235 ) = "kum" : LanguageNames( 235 ) = "Kumyk"
LanguageCodes( 236 ) = "kur" : LanguageNames( 236 ) = "Kurdish"
LanguageCodes( 237 ) = "kru" : LanguageNames( 237 ) = "Kurukh"
LanguageCodes( 238 ) = "kir" : LanguageNames( 238 ) = "Kyrgyz"
LanguageCodes( 239 ) = "lad" : LanguageNames( 239 ) = "Ladino"
LanguageCodes( 240 ) = "lah" : LanguageNames( 240 ) = "Lahnda"
LanguageCodes( 241 ) = "lam" : LanguageNames( 241 ) = "Lamba (Zambia and Congo)"
LanguageCodes( 242 ) = "lao" : LanguageNames( 242 ) = "Lao"
LanguageCodes( 243 ) = "lat" : LanguageNames( 243 ) = "Latin"
LanguageCodes( 244 ) = "lav" : LanguageNames( 244 ) = "Latvian"
LanguageCodes( 245 ) = "lez" : LanguageNames( 245 ) = "Lezgian"
LanguageCodes( 246 ) = "lim" : LanguageNames( 246 ) = "Limburgish"
LanguageCodes( 247 ) = "lin" : LanguageNames( 247 ) = "Lingala"
LanguageCodes( 248 ) = "lit" : LanguageNames( 248 ) = "Lithuanian"
LanguageCodes( 249 ) = "jbo" : LanguageNames( 249 ) = "Lojban (Artificial language)"
LanguageCodes( 250 ) = "nds" : LanguageNames( 250 ) = "Low German"
LanguageCodes( 251 ) = "dsb" : LanguageNames( 251 ) = "Lower Sorbian"
LanguageCodes( 252 ) = "loz" : LanguageNames( 252 ) = "Lozi"
LanguageCodes( 253 ) = "lub" : LanguageNames( 253 ) = "Luba-Katanga"
LanguageCodes( 254 ) = "lua" : LanguageNames( 254 ) = "Luba-Lulua"
LanguageCodes( 255 ) = "lui" : LanguageNames( 255 ) = "Luiseño"
LanguageCodes( 256 ) = "smj" : LanguageNames( 256 ) = "Lule Sami"
LanguageCodes( 257 ) = "lun" : LanguageNames( 257 ) = "Lunda"
LanguageCodes( 258 ) = "luo" : LanguageNames( 258 ) = "Luo (Kenya and Tanzania)"
LanguageCodes( 259 ) = "lus" : LanguageNames( 259 ) = "Lushai"
LanguageCodes( 260 ) = "ltz" : LanguageNames( 260 ) = "Luxembourgish"
LanguageCodes( 261 ) = "mas" : LanguageNames( 261 ) = "Maasai"
LanguageCodes( 262 ) = "mac" : LanguageNames( 262 ) = "Macedonian"
LanguageCodes( 263 ) = "mad" : LanguageNames( 263 ) = "Madurese"
LanguageCodes( 264 ) = "mag" : LanguageNames( 264 ) = "Magahi"
LanguageCodes( 265 ) = "mai" : LanguageNames( 265 ) = "Maithili"
LanguageCodes( 266 ) = "mak" : LanguageNames( 266 ) = "Makasar"
LanguageCodes( 267 ) = "mlg" : LanguageNames( 267 ) = "Malagasy"
LanguageCodes( 268 ) = "may" : LanguageNames( 268 ) = "Malay"
LanguageCodes( 269 ) = "mal" : LanguageNames( 269 ) = "Malayalam"
LanguageCodes( 270 ) = "mlt" : LanguageNames( 270 ) = "Maltese"
LanguageCodes( 271 ) = "mnc" : LanguageNames( 271 ) = "Manchu"
LanguageCodes( 272 ) = "mdr" : LanguageNames( 272 ) = "Mandar"
LanguageCodes( 273 ) = "man" : LanguageNames( 273 ) = "Mandingo"
LanguageCodes( 274 ) = "mni" : LanguageNames( 274 ) = "Manipuri"
LanguageCodes( 275 ) = "mno" : LanguageNames( 275 ) = "Manobo languages"
LanguageCodes( 276 ) = "glv" : LanguageNames( 276 ) = "Manx"
LanguageCodes( 277 ) = "mao" : LanguageNames( 277 ) = "Maori"
LanguageCodes( 278 ) = "arn" : LanguageNames( 278 ) = "Mapuche"
LanguageCodes( 279 ) = "mar" : LanguageNames( 279 ) = "Marathi"
LanguageCodes( 280 ) = "chm" : LanguageNames( 280 ) = "Mari"
LanguageCodes( 281 ) = "mah" : LanguageNames( 281 ) = "Marshallese"
LanguageCodes( 282 ) = "mwr" : LanguageNames( 282 ) = "Marwari"
LanguageCodes( 283 ) = "myn" : LanguageNames( 283 ) = "Mayan languages"
LanguageCodes( 284 ) = "men" : LanguageNames( 284 ) = "Mende"
LanguageCodes( 285 ) = "mic" : LanguageNames( 285 ) = "Micmac"
LanguageCodes( 286 ) = "min" : LanguageNames( 286 ) = "Minangkabau"
LanguageCodes( 287 ) = "mwl" : LanguageNames( 287 ) = "Mirandese"
LanguageCodes( 288 ) = "mis" : LanguageNames( 288 ) = "Miscellaneous languages"
LanguageCodes( 289 ) = "moh" : LanguageNames( 289 ) = "Mohawk"
LanguageCodes( 290 ) = "mdf" : LanguageNames( 290 ) = "Moksha"
LanguageCodes( 291 ) = "mkh" : LanguageNames( 291 ) = "Mon-Khmer (Other)"
LanguageCodes( 292 ) = "lol" : LanguageNames( 292 ) = "Mongo-Nkundu"
LanguageCodes( 293 ) = "mon" : LanguageNames( 293 ) = "Mongolian"
LanguageCodes( 294 ) = "cnr" : LanguageNames( 294 ) = "Montenegrin"
LanguageCodes( 295 ) = "mos" : LanguageNames( 295 ) = "Mooré"
LanguageCodes( 296 ) = "mul" : LanguageNames( 296 ) = "Multiple languages"
LanguageCodes( 297 ) = "mun" : LanguageNames( 297 ) = "Munda (Other)"
LanguageCodes( 298 ) = "nqo" : LanguageNames( 298 ) = "N'Ko"
LanguageCodes( 299 ) = "nah" : LanguageNames( 299 ) = "Nahuatl"
LanguageCodes( 300 ) = "nau" : LanguageNames( 300 ) = "Nauru"
LanguageCodes( 301 ) = "nav" : LanguageNames( 301 ) = "Navajo"
LanguageCodes( 302 ) = "nbl" : LanguageNames( 302 ) = "Ndebele (South Africa)"
LanguageCodes( 303 ) = "nde" : LanguageNames( 303 ) = "Ndebele (Zimbabwe)"
LanguageCodes( 304 ) = "ndo" : LanguageNames( 304 ) = "Ndonga"
LanguageCodes( 305 ) = "nap" : LanguageNames( 305 ) = "Neapolitan Italian"
LanguageCodes( 306 ) = "nep" : LanguageNames( 306 ) = "Nepali"
LanguageCodes( 307 ) = "new" : LanguageNames( 307 ) = "Newari"
LanguageCodes( 308 ) = "nwc" : LanguageNames( 308 ) = "Newari, Old"
LanguageCodes( 309 ) = "nia" : LanguageNames( 309 ) = "Nias"
LanguageCodes( 310 ) = "nic" : LanguageNames( 310 ) = "Niger-Kordofanian (Other)"
LanguageCodes( 311 ) = "ssa" : LanguageNames( 311 ) = "Nilo-Saharan (Other)"
LanguageCodes( 312 ) = "niu" : LanguageNames( 312 ) = "Niuean"
LanguageCodes( 313 ) = "zxx" : LanguageNames( 313 ) = "No linguistic content"
LanguageCodes( 314 ) = "nog" : LanguageNames( 314 ) = "Nogai"
LanguageCodes( 315 ) = "nai" : LanguageNames( 315 ) = "North American Indian (Other)"
LanguageCodes( 316 ) = "frr" : LanguageNames( 316 ) = "North Frisian"
LanguageCodes( 317 ) = "sme" : LanguageNames( 317 ) = "Northern Sami"
LanguageCodes( 318 ) = "nso" : LanguageNames( 318 ) = "Northern Sotho"
LanguageCodes( 319 ) = "nob" : LanguageNames( 319 ) = "Norwegian (Bokmål)"
LanguageCodes( 320 ) = "nno" : LanguageNames( 320 ) = "Norwegian (Nynorsk)"
LanguageCodes( 321 ) = "nor" : LanguageNames( 321 ) = "Norwegian"
LanguageCodes( 322 ) = "nub" : LanguageNames( 322 ) = "Nubian languages"
LanguageCodes( 323 ) = "nym" : LanguageNames( 323 ) = "Nyamwezi"
LanguageCodes( 324 ) = "nya" : LanguageNames( 324 ) = "Nyanja"
LanguageCodes( 325 ) = "nyn" : LanguageNames( 325 ) = "Nyankole"
LanguageCodes( 326 ) = "nyo" : LanguageNames( 326 ) = "Nyoro"
LanguageCodes( 327 ) = "nzi" : LanguageNames( 327 ) = "Nzima"
LanguageCodes( 328 ) = "oci" : LanguageNames( 328 ) = "Occitan (post-1500)"
LanguageCodes( 329 ) = "xal" : LanguageNames( 329 ) = "Oirat"
LanguageCodes( 330 ) = "oji" : LanguageNames( 330 ) = "Ojibwa"
LanguageCodes( 331 ) = "non" : LanguageNames( 331 ) = "Old Norse"
LanguageCodes( 332 ) = "peo" : LanguageNames( 332 ) = "Old Persian (ca. 600-400 B.C.)"
LanguageCodes( 333 ) = "ori" : LanguageNames( 333 ) = "Oriya"
LanguageCodes( 334 ) = "orm" : LanguageNames( 334 ) = "Oromo"
LanguageCodes( 335 ) = "osa" : LanguageNames( 335 ) = "Osage"
LanguageCodes( 336 ) = "oss" : LanguageNames( 336 ) = "Ossetic"
LanguageCodes( 337 ) = "oto" : LanguageNames( 337 ) = "Otomian languages"
LanguageCodes( 338 ) = "pal" : LanguageNames( 338 ) = "Pahlavi"
LanguageCodes( 339 ) = "pau" : LanguageNames( 339 ) = "Palauan"
LanguageCodes( 340 ) = "pli" : LanguageNames( 340 ) = "Pali"
LanguageCodes( 341 ) = "pam" : LanguageNames( 341 ) = "Pampanga"
LanguageCodes( 342 ) = "pag" : LanguageNames( 342 ) = "Pangasinan"
LanguageCodes( 343 ) = "pan" : LanguageNames( 343 ) = "Panjabi"
LanguageCodes( 344 ) = "pap" : LanguageNames( 344 ) = "Papiamento"
LanguageCodes( 345 ) = "paa" : LanguageNames( 345 ) = "Papuan (Other)"
LanguageCodes( 346 ) = "per" : LanguageNames( 346 ) = "Persian"
LanguageCodes( 347 ) = "phi" : LanguageNames( 347 ) = "Philippine (Other)"
LanguageCodes( 348 ) = "phn" : LanguageNames( 348 ) = "Phoenician"
LanguageCodes( 349 ) = "pon" : LanguageNames( 349 ) = "Pohnpeian"
LanguageCodes( 350 ) = "pol" : LanguageNames( 350 ) = "Polish"
LanguageCodes( 351 ) = "por" : LanguageNames( 351 ) = "Portuguese"
LanguageCodes( 352 ) = "pra" : LanguageNames( 352 ) = "Prakrit languages"
LanguageCodes( 353 ) = "pro" : LanguageNames( 353 ) = "Provençal (to 1500)"
LanguageCodes( 354 ) = "pus" : LanguageNames( 354 ) = "Pushto"
LanguageCodes( 355 ) = "que" : LanguageNames( 355 ) = "Quechua"
LanguageCodes( 356 ) = "roh" : LanguageNames( 356 ) = "Raeto-Romance"
LanguageCodes( 357 ) = "raj" : LanguageNames( 357 ) = "Rajasthani"
LanguageCodes( 358 ) = "rap" : LanguageNames( 358 ) = "Rapanui"
LanguageCodes( 359 ) = "rar" : LanguageNames( 359 ) = "Rarotongan"
LanguageCodes( 360 ) = "roa" : LanguageNames( 360 ) = "Romance (Other)"
LanguageCodes( 361 ) = "rom" : LanguageNames( 361 ) = "Romani"
LanguageCodes( 362 ) = "rum" : LanguageNames( 362 ) = "Romanian"
LanguageCodes( 363 ) = "run" : LanguageNames( 363 ) = "Rundi"
LanguageCodes( 364 ) = "rus" : LanguageNames( 364 ) = "Russian"
LanguageCodes( 365 ) = "sal" : LanguageNames( 365 ) = "Salishan languages"
LanguageCodes( 366 ) = "sam" : LanguageNames( 366 ) = "Samaritan Aramaic"
LanguageCodes( 367 ) = "smi" : LanguageNames( 367 ) = "Sami"
LanguageCodes( 368 ) = "smo" : LanguageNames( 368 ) = "Samoan"
LanguageCodes( 369 ) = "sad" : LanguageNames( 369 ) = "Sandawe"
LanguageCodes( 370 ) = "sag" : LanguageNames( 370 ) = "Sango (Ubangi Creole)"
LanguageCodes( 371 ) = "san" : LanguageNames( 371 ) = "Sanskrit"
LanguageCodes( 372 ) = "sat" : LanguageNames( 372 ) = "Santali"
LanguageCodes( 373 ) = "srd" : LanguageNames( 373 ) = "Sardinian"
LanguageCodes( 374 ) = "sas" : LanguageNames( 374 ) = "Sasak"
LanguageCodes( 375 ) = "sco" : LanguageNames( 375 ) = "Scots"
LanguageCodes( 376 ) = "gla" : LanguageNames( 376 ) = "Scottish Gaelic"
LanguageCodes( 377 ) = "sel" : LanguageNames( 377 ) = "Selkup"
LanguageCodes( 378 ) = "sem" : LanguageNames( 378 ) = "Semitic (Other)"
LanguageCodes( 379 ) = "srp" : LanguageNames( 379 ) = "Serbian"
LanguageCodes( 380 ) = "srr" : LanguageNames( 380 ) = "Serer"
LanguageCodes( 381 ) = "shn" : LanguageNames( 381 ) = "Shan"
LanguageCodes( 382 ) = "sna" : LanguageNames( 382 ) = "Shona"
LanguageCodes( 383 ) = "iii" : LanguageNames( 383 ) = "Sichuan Yi"
LanguageCodes( 384 ) = "scn" : LanguageNames( 384 ) = "Sicilian Italian"
LanguageCodes( 385 ) = "sid" : LanguageNames( 385 ) = "Sidamo"
LanguageCodes( 386 ) = "sgn" : LanguageNames( 386 ) = "Sign languages"
LanguageCodes( 387 ) = "bla" : LanguageNames( 387 ) = "Siksika"
LanguageCodes( 388 ) = "snd" : LanguageNames( 388 ) = "Sindhi"
LanguageCodes( 389 ) = "sin" : LanguageNames( 389 ) = "Sinhalese"
LanguageCodes( 390 ) = "sit" : LanguageNames( 390 ) = "Sino-Tibetan (Other)"
LanguageCodes( 391 ) = "sio" : LanguageNames( 391 ) = "Siouan (Other)"
LanguageCodes( 392 ) = "sms" : LanguageNames( 392 ) = "Skolt Sami"
LanguageCodes( 393 ) = "den" : LanguageNames( 393 ) = "Slavey"
LanguageCodes( 394 ) = "sla" : LanguageNames( 394 ) = "Slavic (Other)"
LanguageCodes( 395 ) = "slo" : LanguageNames( 395 ) = "Slovak"
LanguageCodes( 396 ) = "slv" : LanguageNames( 396 ) = "Slovenian"
LanguageCodes( 397 ) = "sog" : LanguageNames( 397 ) = "Sogdian"
LanguageCodes( 398 ) = "som" : LanguageNames( 398 ) = "Somali"
LanguageCodes( 399 ) = "son" : LanguageNames( 399 ) = "Songhai"
LanguageCodes( 400 ) = "snk" : LanguageNames( 400 ) = "Soninke"
LanguageCodes( 401 ) = "wen" : LanguageNames( 401 ) = "Sorbian (Other)"
LanguageCodes( 402 ) = "sot" : LanguageNames( 402 ) = "Sotho"
LanguageCodes( 403 ) = "sai" : LanguageNames( 403 ) = "South American Indian (Other)"
LanguageCodes( 404 ) = "sma" : LanguageNames( 404 ) = "Southern Sami"
LanguageCodes( 405 ) = "spa" : LanguageNames( 405 ) = "Spanish"
LanguageCodes( 406 ) = "srn" : LanguageNames( 406 ) = "Sranan"
LanguageCodes( 407 ) = "suk" : LanguageNames( 407 ) = "Sukuma"
LanguageCodes( 408 ) = "sux" : LanguageNames( 408 ) = "Sumerian"
LanguageCodes( 409 ) = "sun" : LanguageNames( 409 ) = "Sundanese"
LanguageCodes( 410 ) = "sus" : LanguageNames( 410 ) = "Susu"
LanguageCodes( 411 ) = "swa" : LanguageNames( 411 ) = "Swahili"
LanguageCodes( 412 ) = "ssw" : LanguageNames( 412 ) = "Swazi"
LanguageCodes( 413 ) = "swe" : LanguageNames( 413 ) = "Swedish"
LanguageCodes( 414 ) = "gsw" : LanguageNames( 414 ) = "Swiss German"
LanguageCodes( 415 ) = "syc" : LanguageNames( 415 ) = "Syriac"
LanguageCodes( 416 ) = "syr" : LanguageNames( 416 ) = "Syriac, Modern"
LanguageCodes( 417 ) = "tgl" : LanguageNames( 417 ) = "Tagalog"
LanguageCodes( 418 ) = "tah" : LanguageNames( 418 ) = "Tahitian"
LanguageCodes( 419 ) = "tai" : LanguageNames( 419 ) = "Tai (Other)"
LanguageCodes( 420 ) = "tgk" : LanguageNames( 420 ) = "Tajik"
LanguageCodes( 421 ) = "tmh" : LanguageNames( 421 ) = "Tamashek"
LanguageCodes( 422 ) = "tam" : LanguageNames( 422 ) = "Tamil"
LanguageCodes( 423 ) = "tat" : LanguageNames( 423 ) = "Tatar"
LanguageCodes( 424 ) = "tel" : LanguageNames( 424 ) = "Telugu"
LanguageCodes( 425 ) = "tem" : LanguageNames( 425 ) = "Temne"
LanguageCodes( 426 ) = "ter" : LanguageNames( 426 ) = "Terena"
LanguageCodes( 427 ) = "tet" : LanguageNames( 427 ) = "Tetum"
LanguageCodes( 428 ) = "tha" : LanguageNames( 428 ) = "Thai"
LanguageCodes( 429 ) = "tib" : LanguageNames( 429 ) = "Tibetan"
LanguageCodes( 430 ) = "tir" : LanguageNames( 430 ) = "Tigrinya"
LanguageCodes( 431 ) = "tig" : LanguageNames( 431 ) = "Tigré"
LanguageCodes( 432 ) = "tiv" : LanguageNames( 432 ) = "Tiv"
LanguageCodes( 433 ) = "dgr" : LanguageNames( 433 ) = "Tlicho"
LanguageCodes( 434 ) = "tli" : LanguageNames( 434 ) = "Tlingit"
LanguageCodes( 435 ) = "tpi" : LanguageNames( 435 ) = "Tok Pisin"
LanguageCodes( 436 ) = "tkl" : LanguageNames( 436 ) = "Tokelauan"
LanguageCodes( 437 ) = "tog" : LanguageNames( 437 ) = "Tonga (Nyasa)"
LanguageCodes( 438 ) = "ton" : LanguageNames( 438 ) = "Tongan"
LanguageCodes( 439 ) = "tsi" : LanguageNames( 439 ) = "Tsimshian"
LanguageCodes( 440 ) = "tso" : LanguageNames( 440 ) = "Tsonga"
LanguageCodes( 441 ) = "tsn" : LanguageNames( 441 ) = "Tswana"
LanguageCodes( 442 ) = "tum" : LanguageNames( 442 ) = "Tumbuka"
LanguageCodes( 443 ) = "tup" : LanguageNames( 443 ) = "Tupi languages"
LanguageCodes( 444 ) = "tur" : LanguageNames( 444 ) = "Turkish"
LanguageCodes( 445 ) = "ota" : LanguageNames( 445 ) = "Turkish, Ottoman"
LanguageCodes( 446 ) = "tuk" : LanguageNames( 446 ) = "Turkmen"
LanguageCodes( 447 ) = "tvl" : LanguageNames( 447 ) = "Tuvaluan"
LanguageCodes( 448 ) = "tyv" : LanguageNames( 448 ) = "Tuvinian"
LanguageCodes( 449 ) = "twi" : LanguageNames( 449 ) = "Twi"
LanguageCodes( 450 ) = "udm" : LanguageNames( 450 ) = "Udmurt"
LanguageCodes( 451 ) = "uga" : LanguageNames( 451 ) = "Ugaritic"
LanguageCodes( 452 ) = "uig" : LanguageNames( 452 ) = "Uighur"
LanguageCodes( 453 ) = "ukr" : LanguageNames( 453 ) = "Ukrainian"
LanguageCodes( 454 ) = "umb" : LanguageNames( 454 ) = "Umbundu"
LanguageCodes( 455 ) = "und" : LanguageNames( 455 ) = "Undetermined"
LanguageCodes( 456 ) = "hsb" : LanguageNames( 456 ) = "Upper Sorbian"
LanguageCodes( 457 ) = "urd" : LanguageNames( 457 ) = "Urdu"
LanguageCodes( 458 ) = "uzb" : LanguageNames( 458 ) = "Uzbek"
LanguageCodes( 459 ) = "vai" : LanguageNames( 459 ) = "Vai"
LanguageCodes( 460 ) = "ven" : LanguageNames( 460 ) = "Venda"
LanguageCodes( 461 ) = "vie" : LanguageNames( 461 ) = "Vietnamese"
LanguageCodes( 462 ) = "vol" : LanguageNames( 462 ) = "Volapük"
LanguageCodes( 463 ) = "vot" : LanguageNames( 463 ) = "Votic"
LanguageCodes( 464 ) = "wak" : LanguageNames( 464 ) = "Wakashan languages"
LanguageCodes( 465 ) = "wln" : LanguageNames( 465 ) = "Walloon"
LanguageCodes( 466 ) = "war" : LanguageNames( 466 ) = "Waray"
LanguageCodes( 467 ) = "was" : LanguageNames( 467 ) = "Washoe"
LanguageCodes( 468 ) = "wel" : LanguageNames( 468 ) = "Welsh"
LanguageCodes( 469 ) = "him" : LanguageNames( 469 ) = "Western Pahari languages"
LanguageCodes( 470 ) = "wal" : LanguageNames( 470 ) = "Wolayta"
LanguageCodes( 471 ) = "wol" : LanguageNames( 471 ) = "Wolof"
LanguageCodes( 472 ) = "xho" : LanguageNames( 472 ) = "Xhosa"
LanguageCodes( 473 ) = "sah" : LanguageNames( 473 ) = "Yakut"
LanguageCodes( 474 ) = "yao" : LanguageNames( 474 ) = "Yao (Africa)"
LanguageCodes( 475 ) = "yap" : LanguageNames( 475 ) = "Yapese"
LanguageCodes( 476 ) = "yid" : LanguageNames( 476 ) = "Yiddish"
LanguageCodes( 477 ) = "yor" : LanguageNames( 477 ) = "Yoruba"
LanguageCodes( 478 ) = "ypk" : LanguageNames( 478 ) = "Yupik languages"
LanguageCodes( 479 ) = "znd" : LanguageNames( 479 ) = "Zande languages"
LanguageCodes( 480 ) = "zap" : LanguageNames( 480 ) = "Zapotec"
LanguageCodes( 481 ) = "zza" : LanguageNames( 481 ) = "Zaza"
LanguageCodes( 482 ) = "zen" : LanguageNames( 482 ) = "Zenaga"
LanguageCodes( 483 ) = "zha" : LanguageNames( 483 ) = "Zhuang"
LanguageCodes( 484 ) = "zul" : LanguageNames( 484 ) = "Zulu"
LanguageCodes( 485 ) = "zun" : LanguageNames( 485 ) = "Zuni"

End Sub

'****************************************************************************************

Function FieldOutput( DelimSymbol$ ) As String

Dim SubfieldCode$
Dim SubfieldCodeOriginal$
Dim TempField$
Dim TempString$

Dim i As Integer, j As Integer

For i = 1 To Len( SubfieldsUsed$ )
  SubfieldCode$ = Mid$( SubfieldsUsed$, i, 1 )

  If SubfieldCode$ Like "[abdefgijpqrt]" Then
      TempString$ = Subfields( ToggleCodeIndex( SubfieldCode$ ) ).tPrimaryLangs
      If TempString$ <> "" Then
          TempString$ = FormatSubfieldsForOutput( TempString$, SubfieldCode$, DelimSymbol$ )
      End If

      TempField$ = TempField$ & TempString$

      TempString$ = Subfields( ToggleCodeIndex( SubfieldCode$ ) ).tInterLang
      If TempString$ <> "" Then
          TempString = FormatSubfieldsForOutput( TempString$, "k", DelimSymbol$ )
      End If

      TempField$ = TempField$ & TempString$

      TempString$ = Subfields( ToggleCodeIndex( SubfieldCode$ ) ).tOriginalLang
      If TempString$ <> "" Then
          SubfieldCodeOriginal$ = Subfields( ToggleCodeIndex( SubfieldCode$ ) ).tOriginalLangCode

' The subfield code for the original language of a resource depends on what the primary
' language is. For most material the subfield code is $h, but for original accompanying
' materials other than librettos, the code is $m, and for the original libretto, it is
' $n. For other subfields, it is simply not possible to add language codes for an
' original language, such as for tables of contents (subfield $f).

          If SubfieldCodeOriginal$ = "" Then
              If SubfieldCode$ Like "[adhk]" Then
                  SubfieldCodeOriginal$ = "h"
                ElseIf SubfieldCode$ Like "[bg]" Then
                  SubfieldCodeOriginal$ = "m"
                ElseIf SubfieldCode$ = "e" Then
                  SubfieldCodeOriginal$ = "n"
              End If
          End If
          TempString = FormatSubfieldsForOutput( TempString$, SubfieldCodeOriginal$, DelimSymbol$ )
      End If

      TempField$ = TempField$ & TempString$
  End If
Next i

FieldOutput = Trim$( TempField$ )

End Function

'****************************************************************************************

Function FindCodesForNames( InputString$, High%, Low% ) As Integer

' This function searches the list of names to find the appropriate code when a name has
' been selected by the dialog box search. It can use a linear binary search because the
' list of names is already in alphabetical order, unlike the list of codes.

Dim Beyond$
Dim Compare%
Dim Pivot%
Dim Result%
Dim Test$

Dim Match : Match = FALSE

Dim i As Integer

Do
  Pivot% = Int( ( High% + Low% ) / 2 )
'  Test$    = LanguageNames( Pivot% )
  Compare% = StrComp( LanguageNames( Pivot% ), InputString$ )
  Select Case Compare%
    Case -1
      Low%    = Pivot%
    Case 0
      Match   = TRUE
      Result% = Pivot%
      Exit Do
    Case 1
      High%   = Pivot%
  End Select
Loop Until Match = TRUE Or Beyond$ <> ""

If Beyond$ <> "" Then Result% = 0

FindCodesForNames = Result%

End Function

'****************************************************************************************

Function FormatSubfieldsForOutput( InString$, SubfCode$, DelimiterSymbol$ )

' This function takes a string of language codes and formats it for use in the field,
' adding the supplied delimiter symbol (the dollar sign for display in the dialog box,
' the traditional OCLC alveolar click for the bibliographic record) and subfield code
' before each language code.

Dim LangCode$
Dim TempField$
Dim TempSubfield$

Dim i As Integer

i = 1
Do
  LangCode$ = GetField$( InString$, i, " " )
  If LangCode$ <> "" Then
      LangCode$     = DelimiterSymbol$ & SubfCode$ & " " & GetField$( InString$, i, " " ) & " "
      TempSubfield$ = TempSubfield$ & LangCode$
      i = i + 1
  End If
Loop Until LangCode$ = ""
TempField$    = TempField$ & TempSubfield$
TempSubfield$ = ""

FormatSubfieldsForOutput = TempField$

End Function

'****************************************************************************************

Function SortSubfieldCodes( InString$ ) As String

' This function uses an inefficient but simple to code bubble sort to arrange the codes
' in alphabetical order in subfields $b and $f.

Dim CodeCount%
Dim Code1$
Dim Code2$
Dim Start%
Dim TempField$

Dim Swapped

Dim i As Integer, p As Integer

TempField$ = Trim$( InString$ )

' First, the number of elements to be sorted must be found; this is done by counting the
' spaces in the string, which serve as separators in OML's "GetField" function. The
' number of spaces will be one less than the number of elements, which conveniently is
' how the upper limit of this routine is established when run on an array.

Start% = 1
Do
  p = InStr( Start%, TempField$, " " )
  If p > 0 Then
      CodeCount% = CodeCount% + 1
      Start% = p + 1
    Else
      If Start% = 1 Then
          SortSubfieldCodes = TempField$
          Exit Function
      End If
  End If
Loop Until p = 0

' Then do the sort, which simply repeats swapping adjacent elements when they are out of
' order until no more swapping has been done.

Do
  Swapped = FALSE
  For i = 1 To CodeCount%
    Code1$ = GetField$( TempField$, i, " " )
    Code2$ = GetField$( TempField$, i + 1, " " )
    If Code1$ > Code2$ Then
        TempField$ = SetField$( TempField$, i, Code2$, " " )
        TempField$ = SetField$( TempField$, i + 1, Code1$, " " )
        Swapped    = TRUE
    End If
  Next i
Loop Until Swapped = FALSE

SortSubfieldCodes = Trim$( TempField$ )

End Function

'****************************************************************************************

Function ToggleCodeIndex( InVal As Variant ) As Variant

' This function converts a subfield code to the index of the array and vice versa.

Const VAR_TYPE_INTEGER As Integer = 2

If VarType( InVal ) = VAR_TYPE_INTEGER Then
    Select Case InVal
      Case aA
        ToggleCodeIndex = "a"
      Case aB
        ToggleCodeIndex = "b"
      Case aD
        ToggleCodeIndex = "d"
      Case aE
        ToggleCodeIndex = "e"
      Case aF
        ToggleCodeIndex = "f"
      Case aG
        ToggleCodeIndex = "g"
      Case aI
        ToggleCodeIndex = "i"
      Case aJ
        ToggleCodeIndex = "j"
      Case aP
        ToggleCodeIndex = "p"
      Case aQ
        ToggleCodeIndex = "q"
      Case aR
        ToggleCodeIndex = "r"
      Case aT
        ToggleCodeIndex = "t"
    End Select
  Else
    Select Case InVal
      Case "a"
        ToggleCodeIndex = aA
      Case "b"
        ToggleCodeIndex = aB
      Case "d"
        ToggleCodeIndex = aD
      Case "e"
        ToggleCodeIndex = aE
      Case "f"
        ToggleCodeIndex = aF
      Case "g"
        ToggleCodeIndex = aG
      Case "i"
        ToggleCodeIndex = aI
      Case "j"
        ToggleCodeIndex = aJ
      Case "p"
        ToggleCodeIndex = aP
      Case "q"
        ToggleCodeIndex = aQ
      Case "r"
        ToggleCodeIndex = aR
      Case "t"
        ToggleCodeIndex = aT
    End Select
End If

End Function

'****************************************************************************************

Function Dialog1ControlFunction( Id$, Action%, SVal& )

Const CONTROL_CHANGE As Integer = 2
Const DISABLED       As Integer = 0
Const ENABLED        As Integer = 1
Const FOCUS_CHANGE   As Integer = 4
Const IDLE_STATE     As Integer = 5
Const INITIALIZE     As Integer = 1
Const INVISIBLE      As Integer = 0
Const KEEP_DLG_OPEN  As Integer = -1
Const VISIBLE        As Integer = 1

Const ADD            As String  = "&Add field"
Const KLOSE          As String  = "&Close"
Const REPLACE        As String  = "&Replace field"

Static CurrDisplayField$
Static CurrSubfInter$
Static CurrSubfOriginal$
Static CurrSubfieldCode$
Static InitialSubfSelection%
Static MismatchLegend$
Static PrevDisplayField$
Static PrevValTBIntermediate$
Static PrevValTBOriginal$
Static PrevValTBPrimaries$

Static IgnoreMismatch
Static NewSubfield
Static SearchDone

Dim ArrayIndex%
Dim CurrValTBIntermediate$
Dim CurrValTBOriginal$
Dim CurrValTBPrimaries$
Dim LangSearchResultsSelection%
Dim LanguageSelection%
Dim SearchStringForCodes$
Dim SearchedCode$
Dim SelectedLanguage$
Dim SubfieldCodeSelection%
Dim SubfieldCodeTest$
Dim SubfieldListSelection%
Dim TempString$

Dim i As Integer, p As Integer

MismatchLegend$ = "The language code in the fixed field does not match the first language code in the 041 field. Select an option to continue:"

Select Case Action%

  Case INITIALIZE

ReShow:

    NewSubfield = TRUE

    If AddNew Then
        DlgText         "DialogBoxTopText",     "NEW 041 FIELD BEING CREATED! Click on a subfield to add language codes:"
        DlgText         "OK",                   ADD
        DlgFocus        "PrimariesTextBox"
      Else
        DlgText         "DialogBoxTopText",     "Select a subfield to view or edit its language codes:"
    End If

' The default selection in the list of subfield codes is either dependent on the type of
' record (music or not) or on the first subfield actually used.

    If Left$( SubfieldsUsed$, 1 ) = ToggleCodeIndex( TypeOfRecord% ) Then
        InitialSubfSelection% = TypeOfRecord%
      Else
        InitialSubfSelection% = ToggleCodeIndex( Left$( SubfieldsUsed$, 1 ) )
    End If

' Fill the text boxes with values from the array, if any, and make the previous values in
' those text boxes the same, so the macro won't think there's anything to replace at this
' point.

    DlgValue        "SubfieldsListBox",     InitialSubfSelection%
    DlgText         "PrimariesTextBox",     Subfields( InitialSubfSelection% ).tPrimaryLangs
    DlgText         "IntermediatesTextBox", Subfields( InitialSubfSelection% ).tInterLang
    DlgText         "OriginalsTextBox",     Subfields( InitialSubfSelection% ).tOriginalLang
    PrevValTBPrimaries$    = DlgText( "PrimariesTextBox" )
    PrevValTBIntermediate$ = DlgText( "IntermediatesTextBox" )
    PrevValTBOriginal$     = DlgText( "OriginalsTextBox" )
    CurrSubfieldCode$      = ToggleCodeIndex( InitialSubfSelection% )
    CurrSubfOriginal$      = Subfields( InitialSubfSelection% ).tOriginalLangCode
    If CurrSubfOriginal$ = "" Then
        Select Case CurrSubfieldCode$
          Case "a", "d"
            CurrSubfOriginal$ = "h"
          Case "b", "g"
            CurrSubfOriginal$ = "m"
          Case "e"
            CurrSubfOriginal$ = "n"
        End Select
      Else
    End If
    CurrSubfInter$ = "k"
    DlgText         "OriginalLang",         "Original language(s) [subfield $" & CurrSubfOriginal$ & "]"
    DlgText         "DisplayField",         CurrDisplayField$
    DlgText         "ViewCodesLegend",      "Language names in subfield $" & CurrSubfieldCode$ & ":"
    RelatedSubfields( 0 ) = CurrSubfieldCode$
    RelatedSubfields( 1 ) = CurrSubfInter$
    RelatedSubfields( 2 ) = CurrSubfOriginal$
    DlgListBoxArray "SubfieldTrioListBox",  RelatedSubfields()
    DlgValue        "SubfieldTrioListBox",  0
    DlgVisible      "AddButton",            INVISIBLE
    DlgVisible      "AddCodePrompt",        INVISIBLE
    DlgVisible      "SubfieldTrioListBox",  INVISIBLE
    DlgText         "ViewCodesGroupBox",    "View language codes"
    MatchNamesToCodes( DlgText( "PrimariesTextBox" ) )
    DlgListBoxArray "ViewCodesListBox",     ShowCodesNames()
    If IgnoreMismatch <> TRUE Then
        IgnoreMismatch = FALSE
    End If
    DlgVisible      "FFChangeNote",         INVISIBLE


  Case CONTROL_CHANGE

    Select Case Id$

      Case "SubfieldsListBox"

        SubfieldListSelection% = DlgValue( "SubfieldsListBox" )
        CurrSubfieldCode$      = ToggleCodeIndex( SubfieldListSelection% )

' Some subfields don't allow for a language of original, so disable the controls for
' those subfields.

        If CurrSubfieldCode$ Like "[abdeghk]" Then
            DlgEnable       "OriginalLang",         ENABLED
            DlgEnable       "OriginalsTextBox",     ENABLED
          Else
            DlgEnable       "OriginalLang",         DISABLED
            DlgEnable       "OriginalsTextBox",     DISABLED
        End If

' Match subfield codes of the original language with the subfield codes of the
' translations.

        Select Case CurrSubfieldCode$
          Case "a", "d", "f", "j"
            CurrSubfOriginal$ = "h"
          Case "b", "g"
            CurrSubfOriginal$ = "m"
          Case "e"
            CurrSubfOriginal$ = "n"
        End Select

' Go through the list of subfields to see if this is a new subfield being added, or an
' existing subfield being added to.

        For i = 1 To Len( SubfieldsUsed$ )
          SubfieldCodeTest$ = Mid$( SubfieldsUsed$, i, 1 )
          If SubfieldCodeTest$ Like "[abdefgijpqrt]" Then
              ArrayIndex% = ToggleCodeIndex( SubfieldCodeTest$ )
          End If
          If SubfieldCodeTest$ = CurrSubfieldCode$ Then   'ADDING TO AN EXISTING SUBFIELD!
              NewSubfield            = FALSE
              PrevValTBPrimaries$    = Subfields( ArrayIndex% ).tPrimaryLangs  'Make the existing codes the previous values
              PrevValTBIntermediate$ = Subfields( ArrayIndex% ).tInterLang
              PrevValTBOriginal$     = Subfields( ArrayIndex% ).tOriginalLang
              CurrSubfOriginal$      = Subfields( ArrayIndex% ).tOriginalLangCode
              DlgText         "PrimariesTextBox",     Subfields( SubfieldListSelection% ).tPrimaryLangs
              DlgText         "IntermediatesTextBox", Subfields( SubfieldListSelection% ).tInterLang
              DlgText         "OriginalsTextBox",     Subfields( SubfieldListSelection% ).tOriginalLang
              MatchNamesToCodes( DlgText( "PrimariesTextBox" ) )
              DlgListBoxArray "ViewCodesListBox",     ShowCodesNames()
              Exit For
          End If
        Next i

        If NewSubfield Then
            SubfieldsUsed$ = SubfieldsUsed$ & CurrSubfieldCode$
            DlgText         "PrimariesTextBox",     ""
            DlgText         "IntermediatesTextBox", ""
            DlgText         "OriginalsTextBox",     ""
            PrevValTBPrimaries$    = ""
            PrevValTBIntermediate$ = ""
            PrevValTBOriginal$     = ""
        End If
        DlgFocus        "PrimariesTextBox"

        DlgText         "OriginalLang",         "Original language(s) [subfield $" & CurrSubfOriginal$ & "]"

        RelatedSubfields( 0 ) = CurrSubfieldCode$
        RelatedSubfields( 1 ) = CurrSubfInter$
        RelatedSubfields( 2 ) = CurrSubfOriginal$
        DlgListBoxArray "SubfieldTrioListBox",  RelatedSubfields()

      Case "LanguageSelectionListBox"

        LanguageSelection% = DlgValue( "LanguageSelectionListBox" )
        ReDim ShowCodesNames( 0 )
        ShowCodesNames( 0 ) = LanguageNames( LanguageSelection% )
        DlgListBoxArray "ViewCodesListBox",     ShowCodesNames()
        DlgValue        "ViewCodesListBox",     0
        DlgVisible      "AddButton",            VISIBLE
        DlgVisible      "AddCodePrompt",        VISIBLE
        DlgVisible      "SubfieldTrioListBox",  VISIBLE
        DlgFocus        "AddButton"
        DlgText         "ViewCodesGroupBox",    "Add language codes"
        DlgText         "ViewCodesLegend",      "Add code for this language ..."
        SearchDone = TRUE


      Case "SearchButton"

        SearchStringForCodes$ = DlgText( "SearchBox" )
        Call SearchLanguageNames( SearchStringForCodes$ )
        DlgListBoxArray "ViewCodesListBox",     ShowCodesNames()
        SearchDone            = TRUE
        DlgText         "SearchBox",            ""
        If Left$( ShowCodesNames( 0 ), 8 ) = "No match" Then
            DlgText         "ViewCodesLegend",      "Select a language to add to a subfield:"
            DlgVisible      "AddButton",            INVISIBLE
            DlgVisible      "AddCodePrompt",        INVISIBLE
            DlgVisible      "SubfieldTrioListBox",  INVISIBLE
            DlgFocus        "OK"
          Else
            If UBound( ShowCodesNames ) = 0 Then
                DlgValue        "ViewCodesListBox",     0
                DlgText         "ViewCodesLegend",      "Add the code for this language ..."
                DlgVisible      "AddButton",            VISIBLE
                DlgVisible      "AddCodePrompt",        VISIBLE
                DlgVisible      "SubfieldTrioListBox",  VISIBLE
              Else
                DlgText         "ViewCodesLegend",      "Select a language to add its code ..."
                DlgVisible      "AddButton",            INVISIBLE
                DlgVisible      "AddCodePrompt",        INVISIBLE
                DlgVisible      "SubfieldTrioListBox",  INVISIBLE
            End If
        End If
        Dialog1ControlFunction = KEEP_DLG_OPEN

      Case "AddButton"

        LangSearchResultsSelection% = DlgValue( "ViewCodesListBox" )
        SearchStringForCodes$       = DlgText( "ViewCodesListBox" )
        If InStr( SearchStringForCodes$, "=" ) Then
            SearchedCode$ = Left$( SearchStringForCodes$, 3 )
          Else
            SearchedCode$ = LanguageCodes( FindCodesForNames( SearchStringForCodes$, LANGUAGE_CODES_COUNT, 0 ) )
        End If
        SubfieldCodeSelection%      = DlgValue( "SubfieldTrioListBox" )
        ArrayIndex%                 = ToggleCodeIndex( CurrSubfieldCode$ )
        Select Case SubfieldCodeSelection%
          Case 0
            Subfields( ArrayIndex% ).tPrimaryLangs = Subfields( ArrayIndex% ).tPrimaryLangs & SearchedCode$ & " "
            DlgText         "PrimariesTextBox",     Subfields( ArrayIndex% ).tPrimaryLangs
            DlgFocus        "PrimariesTextBox"
          Case 1
            Subfields( ArrayIndex% ).tInterLang    = Subfields( ArrayIndex% ).tInterLang & SearchedCode$ & " "
            DlgText         "IntermediatesTextBox", Subfields( ArrayIndex% ).tInterLang
            DlgFocus        "IntermediatesTextBox"
          Case 2
            Subfields( ArrayIndex% ).tOriginalLang = Subfields( ArrayIndex% ).tOriginalLang & SearchedCode$ & " "
            DlgText         "OriginalsTextBox",     Subfields( ArrayIndex% ).tOriginalLang
            DlgFocus        "OriginalsTextBox"
        End Select
        DlgVisible      "AddButton",            INVISIBLE
        DlgVisible      "AddCodePrompt",        INVISIBLE
        DlgVisible      "SubfieldTrioListBox",  INVISIBLE
        Dialog1ControlFunction = KEEP_DLG_OPEN

      Case "ViewCodesListBox"

        If SearchDone Then
            LangSearchResultsSelection% = DlgValue( "ViewCodesListBox" )
            SearchStringForCodes$       = Trim$( DlgText( "ViewCodesListBox" ) )
            If Left$( SearchStringForCodes$, 8 ) <> "No match" Then
                If LangSearchResultsSelection% = 0 And Len( SearchStringForCodes$ ) = 3 Then
                    SearchedCode$ = SearchStringForCodes$
                  Else
                    SearchedCode$ = LanguageCodes( FindCodesForNames( SearchStringForCodes$, LANGUAGE_CODES_COUNT, 0 ) )
                End If
                ArrayIndex% = ToggleCodeIndex( CurrSubfieldCode$ )
                DlgVisible      "AddButton",            VISIBLE
                DlgVisible      "AddCodePrompt",        VISIBLE
                DlgVisible      "SubfieldTrioListBox",  VISIBLE
                DlgText         "SearchBox",            ""
            End If
            SearchDone = FALSE
        End If

    End Select


  Case FOCUS_CHANGE

    Select Case Id$

      Case "PrimariesTextBox"
        MatchNamesToCodes( DlgText( "PrimariesTextBox" ) )
        DlgListBoxArray "ViewCodesListBox",     ShowCodesNames()
        DlgText         "ViewCodesLegend",      "Language names in subfield $" & CurrSubfieldCode$ & ":"
        DlgText         "SearchBox",            ""

      Case "IntermediatesTextBox"
        MatchNamesToCodes( DlgText( "IntermediatesTextBox" ) )
        DlgListBoxArray "ViewCodesListBox",     ShowCodesNames()
        DlgText         "ViewCodesLegend",      "Language names in subfield $k:"
        DlgText         "SearchBox",            ""

      Case "OriginalsTextBox"
        MatchNamesToCodes( DlgText( "OriginalsTextBox" ) )
        DlgListBoxArray "ViewCodesListBox",     ShowCodesNames()
        DlgText         "ViewCodesLegend",      "Language names in subfield $" & CurrSubfOriginal$ & ":"
        DlgText         "SearchBox",            ""

    End Select


  Case IDLE_STATE

' The dialog box continuously monitors the input boxes, and adjusts output depending on
' the changes made to the contents of those boxes. The first check it makes is if the
' language code in the fixed field does not match the first language code in the 041
' field. If the two codes are different, the macro presents three options: to immediately
' change the fixed field to match the 041, to change the first code in the 041 field to
' match the fixed field, or to ignore the mismatch and continue.

    If AddNew = FALSE Then
        If FirstCode$ <> "" Then
            If ( FirstCode$ <> FF_Lang$ ) Then
                If IgnoreMismatch = FALSE Then

                    Begin Dialog Dialog2Definition  160, 104, WaltsMacros$
                      OkButton        38,  80,  52,  14
                      CancelButton    98,  80,  52,  14
                      Text            10,   6, 140,  24, MismatchLegend$
                      OptionGroup                                                   .OptionGroup1
                       OptionButton   18,  34,  88,  12, "Change &fixed field now", .OptionButton1
                       OptionButton   18,  46,  88,  12, "Change &041",             .OptionButton2
                       OptionButton   18,  58,  88,  12, "&Ignore difference",      .OptionButton3
                    End Dialog

                    Dim Dialog2 As Dialog2Definition
                    If Dialog( Dialog2 ) = 0 Then
                        DlgEnd 0
                      Else
                        Select Case Dialog2.OptionGroup1
                          Case 0
                            If CS.SetFixedField( "Lang", FirstCode$ ) = FALSE Then
                                MsgBox "Sorry, could not update the language code in the fixed field.", WARNING_MESSAGE, WaltsMacros$
                              Else
                                IgnoreMismatch = TRUE
                                DlgVisible      "FFChangeNote",         VISIBLE
                            End If
                          Case 1
                            Mid$( Subfields( InitialSubfSelection% ).tPrimaryLangs, 1, 3 ) = FF_Lang$
                            IgnoreMismatch = TRUE
                            GoTo ReShow:
                          Case 2
                            IgnoreMismatch = TRUE
                        End Select
                    End If
                End If
            End If
        End If
    End If

    CurrValTBPrimaries$ = LCase$( Trim$( DlgText( "PrimariesTextBox" ) ) )
    If CurrValTBPrimaries$ <> Trim$( PrevValTBPrimaries$ ) Then
        ArrayIndex% = ToggleCodeIndex( CurrSubfieldCode$ )
        Subfields( ArrayIndex% ).tPrimaryLangs = CurrValTBPrimaries$ & " "
        PrevValTBPrimaries$ = CurrValTBPrimaries$
        If InStr( SubfieldsUsed$, CurrSubfieldCode$ ) = FALSE Then
            SubfieldsUsed$ = SubfieldsUsed$ & CurrSubfieldCode$
        End If
        MatchNamesToCodes( CurrValTBPrimaries$ )
        DlgListBoxArray "ViewCodesListBox",     ShowCodesNames()
    End If

    CurrValTBIntermediate$ = LCase$( Trim$( DlgText( "IntermediatesTextBox" ) ) )
    CurrSubfInter$         = "k"
    ArrayIndex%            = ToggleCodeIndex( CurrSubfieldCode$ )
    If CurrValTBIntermediate$ <> Trim$( PrevValTBIntermediate$ ) Then
        Subfields( ToggleCodeIndex( CurrSubfieldCode$ ) ).tInterLang = CurrValTBIntermediate$ & " "
        PrevValTBIntermediate$ = CurrValTBIntermediate$
        If InStr( SubfieldsUsed$, CurrSubfInter$ ) = FALSE Then
            SubfieldsUsed$ = SubfieldsUsed$ & CurrSubfInter$
        End If
        MatchNamesToCodes( CurrValTBIntermediate$ )
        DlgListBoxArray "ViewCodesListBox",     ShowCodesNames()
    End If

    CurrValTBOriginal$ = LCase$( Trim$( DlgText( "OriginalsTextBox" ) ) )
    If CurrValTBOriginal$ <> Trim$( PrevValTBOriginal$ ) Then

' Don't change the value of an existing translation subfield unless the current
' translation subfield code is appropriate for the current primary subfield.

        ArrayIndex% = ToggleCodeIndex( CurrSubfieldCode$ )
        If CurrSubfOriginal$ = "h" Then
            If CurrSubfieldCode$ Like "[ad]" Then
                Subfields( ToggleCodeIndex( CurrSubfieldCode$ ) ).tOriginalLang = CurrValTBOriginal$ & " "
            End If
          ElseIf CurrSubfOriginal$ = "m" Then
            If CurrSubfieldCode$ Like "[bg]" Then
                Subfields( ToggleCodeIndex( CurrSubfieldCode$ ) ).tOriginalLang = CurrValTBOriginal$ & " "
            End If
          ElseIf CurrSubfOriginal$ = "n" Then
            If CurrSubfieldCode$ = "e" Then
                Subfields( ToggleCodeIndex( CurrSubfieldCode$ ) ).tOriginalLang = CurrValTBOriginal$ & " "
            End If
        End If
        PrevValTBOriginal$ = CurrValTBOriginal$
        If InStr( SubfieldsUsed$, CurrSubfOriginal$ ) = FALSE Then
            SubfieldsUsed$ = SubfieldsUsed$ & CurrSubfOriginal$
        End If
        MatchNamesToCodes( CurrValTBOriginal$ )
        DlgListBoxArray "ViewCodesListBox",     ShowCodesNames()
    End If

' If a subfield contains at least one code, mark it with an arrow to show it's been used.
' If the subfield is empty or has been emptied, remove the arrow.

    If CurrValTBPrimaries$ = "" And CurrValTBIntermediate$ = "" And CurrValTBOriginal$ = "" Then
        If Left$( SubfieldList( ArrayIndex% ), 1 ) <> " " Then
            SubfieldList( ArrayIndex% ) = SPACE_PREFIX & Mid$( SubfieldList( ArrayIndex% ), 5 )
            DlgListBoxArray "SubfieldsListBox",     SubfieldList
            DlgValue        "SubfieldsListBox",     ArrayIndex%
        End If
      Else
        If Left$( SubfieldList( ArrayIndex% ), 1 ) <> "=" Then
            SubfieldList( ArrayIndex% ) = ARROW_PREFIX & Mid$( SubfieldList( ArrayIndex% ), 7 )
            DlgListBoxArray "SubfieldsListBox",     SubfieldList
            DlgValue        "SubfieldsListBox",     ArrayIndex%
        End If
    End If

' The "Search" button is disabled until the search string is at least three characters in
' length.

    If Len( Trim$( DlgText( "SearchBox" ) ) ) < 3 Then
        DlgEnable       "SearchButton",         DISABLED
      Else
        DlgEnable       "SearchButton",         ENABLED
        DlgEnable       "AddButton",            ENABLED
        DlgEnable       "AddCodePrompt",        ENABLED
        DlgEnable       "SubfieldTrioListBox",  ENABLED
    End If

' The presence of a subfield for an original or intermediate language changes the value
' of the first indicator to "1".

    For i = 1 To 3
      If InStr( SubfieldsUsed$, Mid$( "hkn", i, 1 ) ) Then
          Ind1$ = "1"
          Exit For
      End If
    Next i

' Construct the display field, and show it if it differs from its previous version.

    CurrDisplayField$ = "041 " & Ind1$ & " " & Ind2$ & " " & FieldOutput( "$" )
    If CurrDisplayField$ <> PrevDisplayField$ Then
        DlgText         "DisplayField",         CurrDisplayField$
    End If
    PrevDisplayField$ = CurrDisplayField$

' Construct the new field (which is actually the replacement field if there is an
' existing 041 field), and change the text on the OK button to suit.

    NewField$ = Trim$( FieldOutput( DELIMITER ) )
    If Left$( NewField$, 2 ) = DELIMITER & "a" Then
        NewField$ = trim$( Mid$ (NewField$, 3 ) )
    End If
    NewField$ = "041" & Ind1$ & Ind2$ & NewField$

' If the field contains only a single language code, it shouldn't be added, so the text
' on the action button is just "Close," as it is when the display field is the same as
' the original field. Otherwise, set the text on the action button to make it clear that
' clicking it will add a new field or replace an existing one.

    If Len( NewField$ ) < 9 Then
        AddNew = FALSE
        If DlgText( "OK" ) <> KLOSE Then
            DlgText         "OK",                   KLOSE
        End If
      Else
        If OriginalField$ = "" Then AddNew = TRUE
        If AddNew Then
            If DlgText( "OK" ) <> ADD Then
                DlgText         "OK",                   ADD
            End If
          Else
            If OriginalField$ = "" Then
                If DlgText( "OK" ) <> ADD Then
                    DlgText         "OK",                   ADD
                End If
              Else
                If NewField$ <> OriginalField$ Then
                    If DlgText( "OK" ) <> REPLACE Then
                        DlgText         "OK",                   REPLACE
                    End If
                  Else
                    If DlgText( "OK" ) <> KLOSE Then
                        DlgText         "OK",                   KLOSE
                    End If
                End If
            End If
        End If
    End If

    Dialog1ControlFunction = KEEP_DLG_OPEN

End Select

End Function
'203895097

'MacroName:CopyCallNumber.2023.02
'MacroDescription:Gets a call number or classification number from a bibliographic or
' authority record and returns to a bibliographic record to paste it in.
'
' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
'
' Last updated: 27 July 2023.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 3.1 and Windows 11 Enterprise & 64-bit
' Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works: This macro was developed in a workflow of keeping a bibliographic record
' open while searching in other records, either authority or bibliographic, for an LC-
' type call number or classification number to copy into it. Run the macro in the record
' containing the call number to be copied. Cursor position is irrelevant (although if the
' cursor is placed in a specific 053, 050, or 090 field, the number in that field will be
' offered as the default number to paste if there are other numbers available in the
' record). The macro copies all such fields from the source record and then returns to
' the bibliographic record(s) to paste the copied number in as a 050 field, with
' indicator values "[blank]4". If only one target record is available, and only one call
' number was copied, the macro will copy the number into the bibliographic record
' directly, and then stop. If several classification numbers are candidates, they are
' presented in a dialog box for selection. If several bibliographic records are open, the
' macro displays each one, in turn, as an option for pasting the number into.
'
' When copying a classification number from an authority record, the disciplines
' associated with those numbers are displayed to assist in deciding which one to paste,
' if more than one classification is possible. For example, iron may be classed in QD,
' QE, TA, TP, or TS. When the macro displays the list of classification numbers, it
' includes the explanatory term so you know that the first number is "Chemistry," the
' second "Mineralogy," and so on.
'
' The chosen number is also copied to the Windows clipboard for, e.g., pasting into
' ClassWeb for verification or for further refinement.
'****************************************************************************************

Option Explicit

Declare Function FormatNumber( InString$, RecType$ ) As String

Declare Function Dialog1ControlFunction( Id$, Action%, SValue& )

Global Const AUTHORITY     As String = "A"
Global Const BIBLIOGRAPHIC As String = "B"

Global DELIMITER As String*1

Global CountOfBibs%
Global DefaultField%
Global CallNumberFieldsFound%

Global CallNumberFields() As String

'****************************************************************************************

Sub Main

Dim CS As Object
On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Const CRITICAL_MESSAGE As Integer = 16
Const CURRENT_WINDOW   As Integer = -1

Dim DOUBLE_QUOTE As String*1 : DOUBLE_QUOTE = Chr$( 034 )

Dim CallNumberForClipboard$
Dim CallNumberToPaste$
Dim CopiedFrom$
Dim CopiedTo$
Dim CountOfWindows%
Dim CursorField$
Dim DialogValue%
Dim FieldData$
Dim Index%
Dim Instance%                : Instance%    = 1
Dim NumberAndTitle$
Dim PasteQuestion$
Dim Row%
Dim SourceField$
Dim Start%
Dim Tag$
Dim SourceRecordType$
Dim TypeOfWindow%
Dim WaltsMacros$             : WaltsMacros$ = "[Walt's macros] Essentials:CopyCallNumber"
Dim WindowTitle$

Dim FoundField               : FoundField   = FALSE

Dim i As Integer, k As Integer, p As Integer

Dim BibRecWindowIDs()      As Integer
Dim CallNumbersFormatted() As String

DELIMITER = Chr$( 223 )

' First: Is the cursor in a 050 or 090 field (in a bibliographic record) or a 053 field
' (in an authority record)? If so, get that field and store it to make that number the
' default value when a list of numbers is presented.

Row% = CS.CursorRow
If CS.GetFieldLine( Row%, FieldData$ ) Then
    Tag$ = Left$( FieldData$, 3 )
    If Tag$ Like "0[05][03]" Then
        CursorField$ = FieldData$
        FieldData$   = ""
    End If
End If

' Then, make sure the macro is running in a record (as opposed to a list). This test has
' to come second, even though logically it should come first, because it moves the
' cursor. If the macro is running in a record, determine which kind of record it is.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case 3 To 4, 14, 18, 20
    SourceRecordType$ = AUTHORITY
  Case 0 To 2, 17, 19
    SourceRecordType$ = BIBLIOGRAPHIC
  Case Else
    MsgBox "Sorry, this macro works only in an authority or bibliographic record!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End Select

' If the source record is bibliographic, begin by getting the control number.

If SourceRecordType$ = BIBLIOGRAPHIC Then
    CS.CopyControlNumber
    CopiedFrom$ = Clipboard.GetText()
  Else
    CopiedFrom$ = ""
End If

' Get the call number(s) from the record and store them in parallel arrays. One array
' contains fields ready for pasting into a record. All call numbers are given the tag
' "050" for pasting, no matter their original tag. The other array contains call numbers
' for display. For display purposes, tags are dropped, delimiters are changed to dollar
' signs, and disciplines are shown, for those fields from authority records that include
' disciplines associated with call numbers. Showing the disciplines is an aid in choosing
' the number most appropriate for the work being cataloged. If the macro was run with the
' cursor in a specific field, note the position of that number in the array, so it can be
' presented as the default element of the array to paste later on.

CallNumberFieldsFound% = 0
Do
  FoundField = CS.GetField( "0[59][03]", Instance%, FieldData$ )
  If FoundField = TRUE Then
      If Mid$( FieldData$, 6 ) <> DELIMITER & "b " Then
          Do

' Check for multiple numbers in a single field: Break them up, if found.

            p = InStr( FieldData$, DELIMITER & "a" )
            If p > 0 Then
                SourceField$ = Trim$( Left$( FieldData$, p - 1 ) )
                FieldData$   = "050 4" & Trim$( Mid$( FieldData$, p + 2 ) )

' To filter out wacky call numbers like this: 050 14 L48.3776 $a 1958 $a F58 $a 1.1: If
' the text in the next subfield $a does not start with a letter, consider the whole field
' to be bogus.

                If Mid$( FieldData$, 6, 1 ) Like "#" Then
                    Exit Do
                End If
              Else
                If SourceRecordType$ = AUTHORITY Then
                    SourceField$ = "050 4" & FormatNumber( FieldData$, SourceRecordType$ )
                  Else
                    SourceField$ = "050 4" & Mid$( FieldData$, 6 )
                End If
            End If
            ReDim Preserve CallNumberFields( Index% )
            CallNumberFields( Index% )     = SourceField$
            ReDim Preserve CallNumbersFormatted( Index% )
            CallNumbersFormatted( Index% ) = FormatNumber( SourceField$, SourceRecordType$ )
            Index%                         = Index% + 1
            CallNumberFieldsFound%         = CallNumberFieldsFound% + 1
          Loop Until p = 0
      End If
      If FieldData$ = CursorField$ Then
          DefaultField% = Index% - 1
      End If
      Instance% = Instance% + 1
  End If
Loop Until FoundField = FALSE

' If the source record contains no call number, stop the macro!

If CallNumberFieldsFound% = 0 Then
    If SourceRecordType$ = AUTHORITY Then
        MsgBox "This record contains no 053 field to copy!", CRITICAL_MESSAGE, WaltsMacros$
      Else
        MsgBox "This record contains no 050 or 090 field to copy!", CRITICAL_MESSAGE, WaltsMacros$
    End If
    Exit Sub
  ElseIf CallNumberFieldsFound% = 1 Then
    CallNumberToPaste$ = CallNumberFields( 0 )
End If

' Get back to the bibliographic record by making a count of all the open ones. Omit the
' bibliographic record from which the call number was copied; determine this by comparing
' the control numbers of the bibliographic records.

i = 0
CountOfWindows% = CS.WindowCount
CountOfBibs%    = 0
Do Until i = CountOfWindows%
  CS.SetTopWindow( i )
  TypeOfWindow% = CS.ItemType
  Select Case TypeOfWindow%
    Case 0 To 2, 17, 19
      If SourceRecordType$ = BIBLIOGRAPHIC Then
          Clipboard.Clear
          CS.CopyControlNumber
          CopiedTo$ = Clipboard.GetText()
      End If
      If SourceRecordType$ = AUTHORITY Or CopiedTo$ <> CopiedFrom$ Then
          ReDim Preserve BibRecWindowIDs( CountOfBibs% )
          BibRecWindowIDs( CountOfBibs% ) = i
          CountOfBibs% = CountOfBibs% + 1
      End If
  End Select
  i = i + 1
Loop

' If no bibliographic record at all is open, exit the macro. Also exit the macro if a
' call number was copied from a bibliographic record, but there is no other bibliographic
' record open to copy into. If a single bibliographic record is found and a single call
' number is available to paste into it, do it directly. In that case, also copy the call
' number to the Clipboard.

If CountOfBibs% = 0 Then
    CS.SetTopWindow( CountOfWindows% )
    MsgBox "No bibliographic record was found to paste the call number into!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
  ElseIf CountOfBibs% = 1 Then
    If CallNumberFieldsFound% = 1 Then
        CS.SetTopWindow( BibRecWindowIDs( 0 ) )
        CallNumberToPaste$ = CallNumberFields( 0 )
          For i = 1 To Len( CallNumberToPaste$ )
            If Mid$( CallNumberToPaste$, i, 1 ) = "-" Then
                CallNumberToPaste$ = Left$( CallNumberToPaste$, i - 1 )
                Exit For
            End If
          Next i
        If CS.AddField( 1, CallNumberToPaste$ ) = FALSE Then
            MsgBox "Sorry, could not add a call number.", CRITICAL_MESSAGE, WaltsMacros$
        End If
        CallNumberForClipboard$ = CallNumbersFormatted( 0 )
        Clipboard.Clear
        Clipboard.SetText CallNumberForClipboard$
        Exit Sub
    End If
End If

' Display the record(s) for consideration. First, capture the window title, and the OCLC
' control number, if any, to display in the dialog box that asks if the record displayed
' is the correct one into which to paste the copied call number. This information is
' especially useful when the windows are tiled, as it's hard then to tell which record
' has the focus, or when working with two records for the same title.

Recycle:

For k = 0 To CountOfBibs% - 1              'Since "CountOfBibs%" is a 1-based count
  CS.SetTopWindow( BibRecWindowIDs( k ) )
  TypeOfWindow% = CS.ItemType
  If CS.GetWindowTitle ( CURRENT_WINDOW, WindowTitle$ ) = TRUE Then
      Clipboard.Clear
      CS.CopyControlNumber
      CopiedTo$ = Clipboard.GetText()
      If CopiedTo$ = "NEW" Then
          CopiedTo$ = DOUBLE_QUOTE & "NEW" & DOUBLE_QUOTE
        Else
          CopiedTo$ = "#" & CopiedTo$
      End If

' Remove the words "Pinned" or "Workform" from the window title.

      i = InStr( WindowTitle$, "(Pinned)" )
      If i > 0 Then
          WindowTitle$ = Trim$( Mid$( WindowTitle$, 9 ) )
      End If
      i = InStr( WindowTitle$, "Workform:" )
      If i > 0 Then
          WindowTitle$ = Trim$( Mid$( WindowTitle$, 1, i + 7 ) )
        Else
          Select Case TypeOfWindow%
            Case 0  'Online bibliographic record (WorldCat)
              WindowTitle$ = Trim$( Mid$( WindowTitle$, 17 ) )
            Case 1  'Online bibliographic save file record
              WindowTitle$ = Trim$( Mid$( WindowTitle$, 33 ) )
            Case 2  'Online bibliographic constant data record
              WindowTitle$ = Trim$( Mid$( WindowTitle$, 37 ) )
            Case 3  'Online authority record (LC authority file)
              WindowTitle$ = Trim$( Mid$( WindowTitle$, 27 ) )
            Case 4  'Online authority save file record
              WindowTitle$ = Trim$( Mid$( WindowTitle$, 29 ) )
            Case 14 'Online authority constant data record
              WindowTitle$ = Trim$( Mid$( WindowTitle$, 33 ) )
            Case 17 'Local bibliographic save file record
              WindowTitle$ = Trim$( Mid$( WindowTitle$, 51 ) )
            Case 18 'Local authority save file record
              WindowTitle$ = Trim$( Mid$( WindowTitle$, 50 ) )
            Case 19 'Local bibliographic constant data record
              WindowTitle$ = Trim$( Mid$( WindowTitle$, 60 ) )
            Case 20 'Local authority constant data record
              WindowTitle$ = Trim$( Mid$( WindowTitle$, 58 ) )
          End Select
      End If

' Shorten the title somewhat if it's too long.

      If Len( WindowTitle$ ) > 80 Then
          WindowTitle$ = Left$( WindowTitle$, 80 ) & "..."
      End If

' The ampersand must be doubled in order to display properly.

      Start% = 1
      Do
        p = InStr( Start%, WindowTitle$, "&" )
        If p <> 0 Then
            WindowTitle$ = Left$( WindowTitle$, p ) & "&" & Mid$( WindowTitle$, p + 1 )
            Start% = p + 2
        End If
      Loop Until p = 0

' Adjust the confirmation phrase and dialog box title to reflect counts of call numbers
' and records.

      If CallNumberFieldsFound% = 1 Then
          PasteQuestion$ = "Paste copied call number into this bib. record?"
        Else
          PasteQuestion$ = "Paste selected call number into this bib. record?"
      End If
      NumberAndTitle$ = CopiedTo$ & ", " & DOUBLE_QUOTE & WindowTitle$ & DOUBLE_QUOTE

      Begin Dialog Dialog1Definition  192,  92, WaltsMacros$, .Dialog1ControlFunction
        OKButton       10,  68,  52,  14
        CancelButton  130,  68,  52,  14
        PushButton     70,  68,  52,  14, "&Next bib",            .Next
        Text           10,  26, 172,   8, PasteQuestion$
        Text           10,  34, 172,  24, NumberAndTitle$
        ListBox        24,  10, 144,  12, CallNumbersFormatted(), .Single
        DropListBox    24,  10, 144,  48, CallNumbersFormatted(), .List
      End Dialog

      Dim Dialog1 as Dialog1Definition
      On Error Resume Next
      DialogValue% = Dialog( Dialog1 )

      Select Case DialogValue%

        Case -1

PasteNow:

          CallNumberToPaste$ = CallNumberFields( Dialog1.List )

' Strip the explanatory term from the classification number for pasting.

          For i = 1 To Len( CallNumberToPaste$ )
            If Mid$( CallNumberToPaste$, i, 1 ) = "-" Then
                CallNumberToPaste$ = Left$( CallNumberToPaste$, i - 1 )
                Exit For
            End If
          Next i

' Paste the call number into the record with the appropriate tag.

          If CS.AddField( 1, CallNumberToPaste$ ) = FALSE Then
              MsgBox "Sorry, could not add a call number.", CRITICAL_MESSAGE, WaltsMacros$
            Else

' Copy the selected call number to the Clipboard, for pasting into some other
' application, such as ClassWeb or the local catalog.

              CallNumberForClipboard$ = Mid$( CallNumberToPaste$, 6 )
              Clipboard.Clear
              Clipboard.SetText CallNumberForClipboard$
          End If
          Exit Sub

        Case 1

          If k = CountOfBibs% - 1 Then
              CS.SetTopWindow( 0 )
              Begin Dialog Dialog2Definition  184,  96, WaltsMacros$
                OkButton        62,  72,  52,  14
                CancelButton   122,  72,  52,  14
                Text            10,   6, 164,  16, "Here we are back at the first bib. record! How to proceed?"
                OptionGroup                                                                                      .OptionGroup1
                 OptionButton   16,  26,  32,  12, "&Quit",                                                      .OptionButton1
                 OptionButton   16,  38, 128,  12, "&Paste call number into this record",                        .OptionButton2
                 OptionButton   16,  50, 128,  12, "&Go through all the bib. records again",                     .OptionButton3
              End Dialog

              Dim Dialog2 as Dialog2Definition
              On Error Resume Next
              If Dialog( Dialog2 ) = 0 Then Exit Sub

              Select Case Dialog2.OptionGroup1

                Case 0

                  Exit Sub

                Case 1

                  GoTo PasteNow:

                Case 2

                  GoTo Recycle:

              End Select

          End If

        Case 0

          Exit Sub

      End Select

  End If

Next k

End Sub

'****************************************************************************************

Function FormatNumber( InString$, RecType$ )

' If the macro is run in a bibliographic record, this function changes the delimiter sign
' of a copied call number to a dollar sign for display purposes. If the macro is run in
' an authority record, the macro a) keeps only the beginning of a range of numbers, and
' b) attaches an explanatory term found with a classification (when there are several
' such numbers given) to that number, again for display purposes.

Dim ClassNumber$
Dim ExplanatoryTerm$
Dim Remainder$
Dim Separator$
Dim Start%
Dim TempString$

Dim p As Integer, q As Integer

TempString$ = Mid$( InString$, 6 )

If RecType$ = BIBLIOGRAPHIC Then
    Do
      p = InStr( TempString$, DELIMITER )
      If p <> 0 Then
          TempString$ = Left$( TempString$, p - 1 ) & "$" & Mid$( TempString$, p + 1 )
      End If
    Loop Until p = 0
    ClassNumber$ = TempString$
  Else
    Start% = 1
    p = InStr( Start%, TempString$, DELIMITER )
    If p <> 0 Then
        ClassNumber$ = Trim$( Left$( TempString$, p - 2 ) )
        Remainder$   = Trim$( Mid$ ( TempString$, p ) )
        q = InStr( Remainder$, DELIMITER & "c" )
        If q <> 0 Then
            ExplanatoryTerm$ = Trim$( Mid$( Remainder$, q + 3 ) )
            Separator$ = " - "
            p = InStr( ExplanatoryTerm$, DELIMITER )
            If p <> 0 Then
                ExplanatoryTerm$ = Trim$( Left$( ExplanatoryTerm$, p - 1 ) )
            End If
        End If
      Else
        ClassNumber$ = Trim$( TempString$ )
    End If
End If

FormatNumber = ClassNumber$ & Separator$ & ExplanatoryTerm$

End Function

'****************************************************************************************

Function Dialog1ControlFunction( Id$, Action%, SValue& )

' This function controls when the drop list box is visible; it is shown only if there are
' two or more call numbers available for pasting. If such is the case, this function then
' sets the default value in the list, which is the number in the field in which the
' cursor was placed to run the macro. (If the cursor was not placed in a specific field,
' the list simply reflects the order in which the numbers appear in the record.)

Const INITIALIZE As Integer = 1
Const INVISIBLE  As Integer = 0
Const VISIBLE    As Integer = 1

Select Case Action%

  Case INITIALIZE

    If CallNumberFieldsFound% = 1 Then
        DlgVisible "List",   INVISIBLE
        DlgVisible "Single", VISIBLE
      Else
        DlgVisible "List",   VISIBLE
        DlgValue   "List",   DefaultField%
        DlgVisible "Single", INVISIBLE
        DlgFocus   "List"
    End If
    If CountOfBibs% = 1 Then
        DlgVisible "Next",   INVISIBLE
      Else
        DlgVisible "Next",   VISIBLE
    End If

End Select

End Function
'53020136
'
'Macro name: CopyCallNumber
'Macro book: C:\Users\wnickeson.UR\AppData\Roaming\OCLC\Connex\Macros\Essentials.mbk
'Saved: 8/22/2023 9:55:23 AM using "MacroBookInspector" macro by Walter F. Nickeson.

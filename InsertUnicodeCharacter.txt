'MacroName:InsertUnicodeCharacter.2023.46
'MacroDescription:Inserts the Unicode character at a given code point into a record at
' the cursor position.
'
' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
'
' Last updated: 17 August 2023.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 3.1 and Windows 11 Enterprise & 64-bit
' Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works: Place the cursor in a data cell in a field in a record and run the macro
' to insert a Unicode character at the cursor position. Enter three to five hexadecimal
' digits (decimal digits 0-9 and letters A-F (case doesn't matter, and don't enter the
' "U+" part of a Unicode code point)) for a value from hex 126 to hex E01EF. The macro
' creates a Numeric Character Reference (NCR) for the entered number and puts it into the
' field at the current cursor position, whereupon the character ought to display. Use
' this macro to enter characters otherwise not available for input in Client.
'
' The lower endpoint, Unicode U+0126, is the lowest code point defined for a character
' unable to be encoded in MARC--"Latin capital letter H with stroke." All code points
' below that represent characters able to be entered in the Client through the the "Enter
' Diacritics and Special Characters" popup window in the Client, and they should be
' entered that way. Some code points above U+0126 represent characters that also have
' MARC encodings, and although this macro will put them into a Connexion record, they
' also should be entered by the menu command. The upper endpoint, Unicode U+E01EF, is the
' last code point below Supplementary Private Use Area-A, which is reserved for code
' points inappropriate for use in MARC records.

' This macro won't work, of course, for characters that can't be displayed, such as
' control and format characters in Unicode General Category "Other." Some defined
' characters may not display in an available font. Some characters, especially those
' higher in the Unicode range, are not accepted by the Client, so the NCR string that is
' inserted in the field remains visible as is, without actually displaying as a
' character. An example is the Unicode symbol for "taxi," which in a Connexion record may
' be only able to be shown as "&#x1F695;"--and which probably should not be used, anyway.
'
' The macro can also insert a pseudo-random Unicode character at the cursor position, for
' testing or fun purposes. Type the word "random" in the input box. (Case doesn't matter,
' and there is no need to press the [ENTER] key, as the macro executes as soon as it
' detects the word has been typed.) The macro generates a random four hexadecimal digit
' code point to put the character it represents in the field as described above. The
' characters it can insert are those in the Unicode repertoire with first digit zero,
' between U+0100 and U+0FDA, but excluding combining characters, which lie in the range
' U+0300 to U+036F. After inserting the random character, the macro pops up a message box
' showing the code point generated. The code point can also be seen with my macro
' "ShowCharacterCodes." The code point string is "pseudo-random" because, of course,
' computers can't generate truly random numbers. Also, the random number string produced
' by the macro is constrained to create a code point for a valid, visible character, so
' there should be no non-hits, as there would be if truly random numbers were used.
'****************************************************************************************

Option Explicit
Option Base 1

Declare Function RandomHexDigit( InString$ ) As String
Declare Function RandomHexString             As String

Declare Function Dialog1ControlFunction( Id$, Action%, SVal& )

Type CharCount
 CumOccur As Integer
 HexDig   As String
End Type

Global CodePoint$
Global RandomNumber!
Global WaltsMacros$

'****************************************************************************************

Sub Main

Dim CS As Object
On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Const CRITICAL_MESSAGE     As Integer = 16
Const DATA_CELL            As Integer = 6
Const DLG_STATEMENT_CANCEL As Integer = 102
Const FIXED_FIELD          As Integer = 0
Const INFORMATION_MESSAGE  As Integer = 64

Dim Column%
Dim Instructions$
Dim TypeOfWindow%

Dim i As Integer, p As Integer, q As Integer

WaltsMacros$ = "[Walt's macros] Extras3:InsertUnicodeCharacter"

' First, make sure a record is displayed, and the cursor is in a data cell, as opposed to
' a tag or indicator cell.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case -1, 5 To 11, 13, 15 To 16, 21 To 25
    MsgBox "Sorry, this macro works only when a record is displayed!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End Select

Column% = CS.CursorColumn
If Column% = FIXED_FIELD Then
    MsgBox "Sorry, this macro works only in the variable fields!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
  ElseIf Column% < DATA_CELL Then
    MsgBox "Please place the cursor in a field data cell!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End If

Instructions$ = "Enter a hexadecimal number greater than 125 to insert the character at"
Instructions$ = Instructions$ & " that code point into the field at the cursor position:"

Begin Dialog Dialog1Definition  212,  64, WaltsMacros$, .Dialog1ControlFunction
  OkButton       90,  40,  52,  14
  CancelButton  150,  40,  52,  14
  Text           10,   6, 144,  24, Instructions$
  TextBox       166,  14,  36,  12,               .TextBox1
End Dialog

Dim Dialog1 As Dialog1Definition
On Error Resume Next
Dialog Dialog1
If Err = DLG_STATEMENT_CANCEL Then Exit Sub

If CodePoint$ <> "" Then
    CS.InsertText( CodePoint$ )
End If

If RandomNumber! <> 0 Then
    MsgBox "Unicode character inserted: U+" & Mid$( CodePoint$, 4, Len( CodePoint$ ) - 4 ), INFORMATION_MESSAGE, WaltsMacros$
End If

End Sub

'****************************************************************************************

Function RandomHexDigit( InString$ ) As String

' This function uses a random number to select a hexadecimal digit from those available
' for each position in the random code point string.

Dim CharacterOccurrence%
Dim CharacterOccurrenceString$
Dim CharacterOccurrenceStringIndex%
Dim CharacterRange$
Dim CumulativeFrequency%
Dim HexadecimalDigits$
Dim InHexDigit$
Dim InHexFirstDigit$
Dim InHexLastDigit$
Dim InStringIndex%
Dim OutHexDigit$
Dim PosFirstDigit%
Dim PosLastDigit%
Dim Range!

Dim i As Integer, p As Integer

Dim CharacterOccurrenceArray( 16 ) As CharCount

HexadecimalDigits$              = "0123456789ABCDEF"

CharacterOccurrenceStringIndex% = 1
InStringIndex%                  = 1

' The incoming data string is parsed to build a table of the hexadecimal digits actually
' used at that position in the code point string and their relative frequency, so each
' digit has its appropriate chance of being selected. Each digit is put in the next row
' of the array, and each frequency or occurrence number is added to the cumulative total.

Do
  CharacterOccurrenceString$ = GetField$( InString$, CharacterOccurrenceStringIndex%, "," )
  If CharacterOccurrenceString$ = "" Then Exit Do
  p = InStr( CharacterOccurrenceString$, "/" )
  If p = 0 Then
      CharacterOccurrence% = 1
      CharacterRange$      = CharacterOccurrenceString$
    Else
      CharacterOccurrence% = Val( Mid$( CharacterOccurrenceString$, p + 1 ) )
      CharacterRange$      = Left$( CharacterOccurrenceString$, p - 1 )
  End If
  If Len( CharacterRange$ ) = 1 Then
      CharacterOccurrenceArray( InStringIndex% ).HexDig   = CharacterRange$
      CumulativeFrequency%                                = CumulativeFrequency%  + CharacterOccurrence%
      CharacterOccurrenceArray( InStringIndex% ).CumOccur = CumulativeFrequency%
      InStringIndex%                                      = InStringIndex% + 1
    Else

' If a range of digits is presented, identified by its endpoints, the first and last
' characters are extracted so the intervening ones can be identified to put in the array.

      InHexFirstDigit$ = Left$( CharacterRange$, 1 )
      InHexLastDigit$  = Right$( CharacterRange$, 1 )
      PosFirstDigit%   = InStr( HexadecimalDigits$, InHexFirstDigit$ )
      PosLastDigit%    = InStr( HexadecimalDigits$, InHexLastDigit$ )
      For i = PosFirstDigit% To PosLastDigit%
        CharacterOccurrenceArray( InStringIndex% ).HexDig   = Mid$( HexadecimalDigits$, i, 1 )
        CumulativeFrequency%                                = CumulativeFrequency%  + CharacterOccurrence%
        CharacterOccurrenceArray( InStringIndex% ).CumOccur = CumulativeFrequency%
        InStringIndex%                                      = InStringIndex% + 1
      Next i
  End If
  CharacterOccurrenceStringIndex% = CharacterOccurrenceStringIndex% + 1
Loop Until CharacterOccurrenceString$ = ""

' With the array built, the random number can be tested against it to select a
' hexadecimal digit. The cumulative frequency for each digit is used to calculate the
' fraction of the space between zero and one the digit occupies. For example, for code
' points from 010 to 01F, all sixteen digits are used equally, and in sum, they represent
' 256 code points. Therefore, a random number less than 1/16, or 0.0625, will select 0 as
' the digit; a number between 0.0625 and 0.125 will select 1, and so on. For code points
' from 0A0 to 0AF, however, only 127 characters are encoded, and the digits are not
' equally available, or have not been equally assigned. The chance of the digit 2 being
' selected by a random number is 15/127, or 0.5555555555555556, but for the digit D the
' chance is 1/127, or 0.0078740157480315.

For i = 1 To 16
  Range! = CharacterOccurrenceArray( i ).CumOccur / CumulativeFrequency%
  If RandomNumber! < Range! Then
      OutHexDigit$ = CharacterOccurrenceArray( i ).HexDig
      Exit For
  End If
Next i

RandomHexDigit = OutHexDigit$

End Function

'****************************************************************************************

Function RandomHexString As String

' This function builds the four hexadecimal digit string based on the random numbers
' produced by the random number generator. The string generated is limited to the range
' 100 to FDA, simply to keep the size of the macro manageable. Even excluding control and
' other non-printing characters, as well as combining characters (because of problematic
' display), there are 3312 characters encoded in the block 0100-0FFF from which to
' choose. The main job of this function is to make sure the random numbers generate
' displayable characters; unconstrained random numbers could select unusable characters
' almost a quarter of the time. So for each place in the hexadecimal digit string, only
' numbers for available code points are able to be selected.

Dim HexDigit$
Dim HexString$
Dim Seed

Dim i As Integer, j As Integer

Seed = Timer
Randomize Int( Seed )
RandomNumber! = Rnd

' The string sent to the actual digit selector consists of data pairs: an available
' hexadecimal digit, and the number of times it occurs in the block of characters encoded
' at that position. If several digits occur with the same frequency, a range is sent. A
' forward slash separates digits from occurrences, and commas separate pairs. Two digits
' always imply a range, that is, a sequence of digits that occur the same number of times
' in the block under consideration.
'
' For example, for the first position in the string (256s, in base 16), this function
' sends the information that the hexadecimal digit 1 appears 256 times in the block of
' 3312 characters (code points 000x to 00Fx), the digit 3 appears 135 times, A only 127
' times, and so on. Thus the likelihood of a random number selecting the digit 1 should
' be twice that of selecting the digit A. In the 1s place of the code point, the
' frequency of occurrence of each available digit is 1, so no occurrence number need be
' sent. After this loop has executed three times, the first digit 0--the 4096s place in
' base 16--is prefixed to the constructed code point.

For i = 1 To 3

  Select Case i

    Case 1

      HexDigit$ = RandomHexDigit( "1/256,2/256,3/135,4/249,5/176,6/196,7/187,8/150,9/170,A/127,B/128,C/144,D/165,E/137,F/134" )

    Case 2

      Select Case HexString$

        Case "1", "2"
          HexDigit$ = RandomHexDigit( "0F/16" )
        Case "3"
          HexDigit$ = RandomHexDigit( "7/14,8/10,9/16,A/15,BF/16" )
        Case "4"
          HexDigit$ = RandomHexDigit( "07/16,8/9,9F/16" )
        Case "5"
          HexDigit$ = RandomHexDigit( "02/16,3/15,4/16,5/14,67/16,8/14,B/1,C/3,D/16,E/12,F/5" )
        Case "6"
          HexDigit$ = RandomHexDigit( "0/10,1/4,23/16,4/11,6/16,7/15,8C/16,D/7,E/5,F/16" )
        Case "7"
          HexDigit$ = RandomHexDigit( "0/14,1/15,2/16,4/3,59/16,A/6,B/1,CD/16,E/11,F/9" )
        Case "8"
          HexDigit$ = RandomHexDigit( "0/16,1/7,2/2,3/15,4/16,5/10,6/11,7/16,8/15,AB/16,C/10" )
        Case "9"
          HexDigit$ = RandomHexDigit( "0/12,12/16,3/11,5/9,6/14,7/16,8/10,9/14,A/15,B/7,C/1,D/3,E/12,F/14" )
        Case "A"
          HexDigit$ = RandomHexDigit( "0/7,1/14,2/15,3/7,5/5,6/10,7/4,8/10,9A/15,B/9,D/1,E/12,F/3" )
        Case "B"
          HexDigit$ = RandomHexDigit( "0/9,1/14,2/15,3/9,5/3,6/12,7/8,8/9,9/10,A/7,B/10,D/1,E/10,F/11" )
        Case "C"
          HexDigit$ = RandomHexDigit( "0/10,12/15,3/11,5/4,6/12,7/9,8/12,9A/15,B/10,D/2,E/12,F/2" )
        Case "D"
          HexDigit$ = RandomHexDigit( "0/11,1/15,2/16,3/12,4/2,5/11,6/12,7/16,8/11,9/13,A/16,B/12,C/7,E/10,F/1" )
        Case "E"
          HexDigit$ = RandomHexDigit( "0/15,12/16,3/4,4/8,5/12,8/12,9/16,A/14,B/4,C/6,D/14" )
        Case "F"
          HexDigit$ = RandomHexDigit( "0/16,1/14,2/16,3/11,4/15,5/16,6/13,8/6,B/2,C/14,D/11" )

      End Select

    Case 3

      Select Case HexString$

        Case "10" To "2F", "39", "3B" To "47", "49", "4A" To "52", "54", "56" To "57", "5D", "62" To "63", "66", _
           "68" To "6C", "6F", "72", "75" To "79", "7C" To "7D", "80", "84", "87", "8A" To "8B", "91" To "92", "97", _
          "D2", "D7", "DA", "E1" To "E2", "E9", "F0", "F2", "F5"
          HexDigit$ = RandomHexDigit( "0F" )
        Case "71", "C1", "C9", "D1"
          HexDigit$ = RandomHexDigit( "0,2F" )
        Case "3A", "A9"
          HexDigit$ = RandomHexDigit( "01,3F" )
        Case "F4"
          HexDigit$ = RandomHexDigit( "07,9F" )
        Case "9A", "A2", "AA", "B2", "C2", "CA"
          HexDigit$ = RandomHexDigit( "08,AF" )
        Case "83", "88"
          HexDigit$ = RandomHexDigit( "0E" )
        Case "53", "67", "E0"
          HexDigit$ = RandomHexDigit( "1F" )
        Case "99", "A1", "B1"
          HexDigit$ = RandomHexDigit( "0,3F" )
        Case "96"
          HexDigit$ = RandomHexDigit( "01,4F" )
        Case "EA"
          HexDigit$ = RandomHexDigit( "03,5,6F" )
        Case "FC"
          HexDigit$ = RandomHexDigit( "05,7C,EF" )
        Case "55"
          HexDigit$ = RandomHexDigit( "06,9F" )
        Case "37", "F1"
          HexDigit$ = RandomHexDigit( "07,AF" )
        Case "ED"
          HexDigit$ = RandomHexDigit( "09,CF" )
        Case "58"
          HexDigit$ = RandomHexDigit( "0A,DF" )
        Case "70", "9F"
          HexDigit$ = RandomHexDigit( "0D" )
        Case "D9"
          HexDigit$ = RandomHexDigit( "06,AF" )
        Case "F6"
          HexDigit$ = RandomHexDigit( "0C" )
        Case "C8"
          HexDigit$ = RandomHexDigit( "0,4C,EF" )
        Case "DB"
          HexDigit$ = RandomHexDigit( "01,3B,D" )
        Case "9E", "AE", "B6", "C6", "CE", "D6"
          HexDigit$ = RandomHexDigit( "01,6F" )
        Case "D3"
          HexDigit$ = RandomHexDigit( "0A,DF" )
        Case "5E"
          HexDigit$ = RandomHexDigit( "0A,F" )
        Case "E5"
          HexDigit$ = RandomHexDigit( "0B" )
        Case "E8"
          HexDigit$ = RandomHexDigit( "12,4,6A,CF" )
        Case "90"
          HexDigit$ = RandomHexDigit( "4F" )
        Case "F3"
          HexDigit$ = RandomHexDigit( "04,6,8,AD" )
        Case "93", "C3"
          HexDigit$ = RandomHexDigit( "09,D" )
        Case "64", "7E"
          HexDigit$ = RandomHexDigit( "0A" )
        Case "86", "BF", "FD"
          HexDigit$ = RandomHexDigit( "0A" )
        Case "D5"
          HexDigit$ = RandomHexDigit( "46,8F" )
        Case "D0"
          HexDigit$ = RandomHexDigit( "4C,EF" )
        Case "D8"
          HexDigit$ = RandomHexDigit( "6F" )
        Case "B9"
          HexDigit$ = RandomHexDigit( "0,25,9A,C,EF" )
        Case "98"
          HexDigit$ = RandomHexDigit( "0,5C,F" )
        Case "CB"
          HexDigit$ = RandomHexDigit( "03,59,D" )
        Case "85"
          HexDigit$ = RandomHexDigit( "08,E" )
        Case "8C", "BB"
          HexDigit$ = RandomHexDigit( "09" )
        Case "38"
          HexDigit$ = RandomHexDigit( "4A,C,EF" )
        Case "C0"
          HexDigit$ = RandomHexDigit( "5C,EF" )
        Case "A8"
          HexDigit$ = RandomHexDigit( "5D,F" )
        Case "60", "A6", "BE", "DE"
          HexDigit$ = RandomHexDigit( "6F" )
        Case "AB", "B3"
          HexDigit$ = RandomHexDigit( "0,23,59,D" )
        Case "95"
          HexDigit$ = RandomHexDigit( "0,8F" )
        Case "48"
          HexDigit$ = RandomHexDigit( "02,AF" )
        Case "B8"
          HexDigit$ = RandomHexDigit( "3,5A,EF" )
        Case "7F"
          HexDigit$ = RandomHexDigit( "4A,EF" )
        Case "B0"
          HexDigit$ = RandomHexDigit( "5C,F" )
        Case "C7"
          HexDigit$ = RandomHexDigit( "7F" )
        Case "E4"
          HexDigit$ = RandomHexDigit( "06,F" )
        Case "B7"
          HexDigit$ = RandomHexDigit( "07" )
        Case "9B"
          HexDigit$ = RandomHexDigit( "0,2,69,D" )
        Case "A3"
          HexDigit$ = RandomHexDigit( "0,23,56,89" )
        Case "81"
          HexDigit$ = RandomHexDigit( "05,A" )
        Case "6D"
          HexDigit$ = RandomHexDigit( "05,E" )
        Case "DC"
          HexDigit$ = RandomHexDigit( "06" )
        Case "BA"
          HexDigit$ = RandomHexDigit( "34,8A,EF" )
        Case "A0"
          HexDigit$ = RandomHexDigit( "5A,F" )
        Case "EC"
          HexDigit$ = RandomHexDigit( "04,6" )
        Case "7A"
          HexDigit$ = RandomHexDigit( "05" )
        Case "F8"
          HexDigit$ = RandomHexDigit( "5,8C" )
        Case "5F"
          HexDigit$ = RandomHexDigit( "04" )
        Case "6E"
          HexDigit$ = RandomHexDigit( "56,9,EF" )
        Case "A5"
          HexDigit$ = RandomHexDigit( "9C,E" )
        Case "EB"
          HexDigit$ = RandomHexDigit( "0,23,D" )
        Case "E3"
          HexDigit$ = RandomHexDigit( "0,23,F" )
        Case "A7"
          HexDigit$ = RandomHexDigit( "24,6" )
        Case "C5"
          HexDigit$ = RandomHexDigit( "8A,D" )
        Case "61"
          HexDigit$ = RandomHexDigit( "B,DF" )
        Case "5C"
          HexDigit$ = RandomHexDigit( "0,3,6" )
        Case "AF"
          HexDigit$ = RandomHexDigit( "01,9" )
        Case "B5"
          HexDigit$ = RandomHexDigit( "CD,F" )
        Case "9D"
          HexDigit$ = RandomHexDigit( "CF" )
        Case "74"
          HexDigit$ = RandomHexDigit( "DF" )
        Case "CF"
          HexDigit$ = RandomHexDigit( "12" )
        Case "82"
          HexDigit$ = RandomHexDigit( "4,8" )
        Case "CD"
          HexDigit$ = RandomHexDigit( "DE" )
        Case "D4", "FB"
          HexDigit$ = RandomHexDigit( "EF" )
        Case "AD", "BD"
          HexDigit$ = RandomHexDigit( "0" )
        Case "7B"
          HexDigit$ = RandomHexDigit( "1" )
        Case "DF"
          HexDigit$ = RandomHexDigit( "4" )
        Case "5B", "9C"
          HexDigit$ = RandomHexDigit( "E" )

      End Select

  End Select

  Seed = Int( RandomNumber! * 1000000 )
  Randomize Seed
  RandomNumber! = Rnd

  HexString$ = HexString$ & HexDigit$

Next i

HexString$      = "0" & HexString$
RandomHexString = HexString$

End Function

'****************************************************************************************

Function Dialog1ControlFunction( Id$, Action%, SVal& )

Const CONTROL_CHANGE  As Integer = 2
Const IDLE_STATE      As Integer = 5
Const INITIALIZE      As Integer = 1
Const KEEP_DLG_OPEN   As Integer = -1
Const WARNING_MESSAGE As Integer = 48

Dim HexVal&
Dim InputProblem$
Dim InputString$
Dim LenInputString%
Dim TextBoxEntry$

Dim i As Integer

Select Case Action

  Case INITIALIZE

    DlgFocus "TextBox1"


  Case CONTROL_CHANGE

    Select Case Id$

      Case "OptionButton1", "OptionButton2"

        DlgFocus "TextBox1"

      Case "OK"

' Check validity of input when the "OK" button is clicked or the [ENTER] key is pressed.
' A hexadecimal number must be properly formed (digits and letters, case being irrelevant
' for the latter) and have a value greater than 126, or decimal 294. Watch out for
' negative values! When the input string is made into a hexadecimal number by prefixing
' it with "&H", the macro language converts that number to a negative value, if it's in
' the range 8000 to FFFF.

        InputString$ = Trim$( DlgText( "TextBox1" ) )
        If InputString$ <> "" Then
            LenInputString% = Len( InputString$ )
            For i = 1 To LenInputString%
              If Mid$( InputString$, i, 1 ) Like "[!0-9A-Fa-f]" Then
                  InputProblem$ = "Please enter a hexadecimal number using characters 0-9 and A-F!"
                  Exit For
              End If
            Next i
        End If
        If InputProblem$ = "" Then
            InputString$ = UCase$( InputString$ )
            HexVal&      = Val( "&H" & InputString$ )
            If HexVal& > 255 Or HexVal& < 0 Then
                If LenInputString% = 3 Then
                    CodePoint$ = "0" & InputString$
                End If
                CodePoint$    = "&#x" & InputString$ & ";"
              Else
                InputProblem$ = "Please enter a hexadecimal number greater than FF!"
            End If
          Else
            InputProblem$ = "Please input a hexadecimal number!"
        End If
        If InputProblem$ <> "" Then
            MsgBox InputProblem$, WARNING_MESSAGE, WaltsMacros$
            DlgText  "TextBox1", ""
            DlgFocus "TextBox1"
            Dialog1ControlFunction = KEEP_DLG_OPEN
        End If

    End Select


  Case IDLE_STATE

    TextBoxEntry$ = Trim$( LCase$( DlgText( "TextBox1" ) ) )
    If TextBoxEntry$ = "random" Then
        CodePoint$ = "&#x" & RandomHexString & ";"
        DlgEnd -1
      Else
        Dialog1ControlFunction = KEEP_DLG_OPEN
    End If

End Select

End Function
'59923643
'
'Macro name: InsertUnicodeCharacter
'Macro book: C:\Users\wnickeson.UR\AppData\Roaming\OCLC\Connex\Macros\Extras3.mbk
'Saved: 8/22/2023 10:06:10 AM using "MacroBookInspector" macro by Walter F. Nickeson.

'MacroName:InsertCombiningCharacter.2024.05
'MacroDescription:Adds a combining character to a base character in a field in a record.

' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
' https://orcid.org/0000-0003-0484-6938
'
' Last updated: 21 February 2024.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 3.1 and Windows 11 Enterprise & 64-bit
' Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works: Position the cursor after a letter (in any script, regardless of case--
' essentially, any character other than a Latin punctuation mark) in a field in a record
' and run the macro. It displays a list box containing the available combining
' characters, or diacritical marks, ordered alphabetically by their Unicode names.
' Select a character from the list to apply to the character at the insertion point.
' Click "OK" to insert that combining character at the cursor position by replacing the
' existing field. Perhaps needless to say, proper rendering of the combined character
' depends upon the font in use.
'
' For pairs of letters to be joined with a single combining character--a double
' diacritical mark--position the cursor between the two letters. The macro inserts the
' combining character at that position, the one diacritic joining the character on either
' side, following current recommended practice. Note that MARC-8 originally specified
' using two combining characters, each following its own base character, forming two
' halves of a whole, e.g. "Ligature, first half" and "Ligature, second half". The
' specification has since changed, and this macro won't insert either of the two half
' characters.
'
' The entries in the dialog box list include their MARC-8 names, where they differ, as
' well as their Unicode code points. A search box is available to help find characters,
' by either their name or their code point. The MARC-8 character names are in uppercase
' to distinguish them from their Unicode names, but case is ignored in searching.
' Unfortunately, images of the combining characters are not available at this time; you
' have to know or be able to guess the name of the diacritical mark you want.
'
' The macro adds the combining character as a Numeric Character Reference (e.g.,
' "&#x030A;"). However, the Client converts the encoding of the diacritical mark to OCLC-
' MARC, if defined, when the modified field is pasted back into the record. If there are
' precomposed characters in the field--"é" instead of the MARC standard "e" + "´"--the
' macro decomposes them, to make all characters in the field uniform. This applies also
' to the four precomposed characters in MARC with "hook," "O", "o", "U", and "u"; they
' are decomposed to "O/o/U/u" + [combining horn].
'
' To properly identify some of the characters in a field, it seems to be necessary to
' add a Unicode character before retrieving the field's contents with the
' "GetFieldUnicode" command. This macro adds the character "Greek ano teleia" to the
' beginning of the field, and after the command has executed, deletes it. Depending on
' how the macro runs (that is, on how badly the OML window handling problem is at that
' moment), the character, which looks like a middle dot, may continue to be visible
' behind the dialog box. However, it will disappear when the macro is done.
'
' The combining characters available for selection are the 112 characters in the Unicode
' "Combining Diacritical Marks" block. MARC-8 defines only some 27 diacritical marks,
' which can be entered into a record by the Connexion Client's menu commands "Edit >
' Enter Diacritics..." While any of those diacritical marks may be used in any situation,
' the characters in this block are especially suited for European language scripts.
' Other diacritical marks, such as those for symbols or those specifically for certain
' scripts, will have to be entered as Unicode code points, which is what my macro
' "InsertUnicodeCharacter" does.
'
' A feature of this macro that may be especially helpful for some users is that it can be
' run, and a combining character inserted, entirely by use of the keyboard, once the
' cursor has been properly positioned. The macro's dialog box opens with the list box
' having the focus, so pressing a letter key will select the first entry that begins with
' that letter; continue to press the key, and the selection will cycle through all the
' entries in the list that begin with that letter. The up and down arrow keys can be used
' to select the precise entry to use. However, if you know the name of the diacritical
' mark, you can [TAB] to the search box and begin typing there. As you type the character
' name (ignoring case), or its Unicode code point, the list box alters its contents to
' show only the characters whose names or code points contain the search string. When the
' list shrinks enough that the desired character appears, select it with the arrow keys,
' and press [ENTER] to insert the diacritic and finish the macro. No mousing necessary!
'
' The Client seems to have a quirk, feature, or bug in the way it handles character
' encoding, which affects how the modified field is put back into the record. This occurs
' when Windows-1252 characters are used instead of OCLC-MARC characters. The "GetField"
' command shows that twelve pairs of characters share code points. For example, "202" is
' the OCLC-MARC code point for the copyright sign "©", and also for the Windows-1252
' combined character "Ê". The Windows-1252 code point for the copyright sign is "169";
' the correct MARC encoding of the character "Ê" is "069 + 226", representing the capital
' letter "E" followed by the combining acute accent. When the macro returns the field to
' the record with the selected combining character added, it will paste the character
' encoded at code point "202" as "Ê", even if the character in the field is actually the
' copyright sign. This overlap of code points means some data may be mangled when the
' macro is finished. The following table shows how some Windows-1252 characters are
' unavoidably converted:
'           OCLC/
' char      MARC   becomes
' ¡         201    É [E with acute]
' ¢                Ø [O with stroke]
' ¤                Þ [thorn]
' ¥                Æ [AE ligature]
' ¦                ¶ [paragraph]
' §                ´ ["miagkii znak," or soft sign/prime]
' ¨                · [middle dot]
' ©         202    Ê
' [a.]             ®
' [<<]             ±
' [not sign]       [1/4]
' ´                Þ [Thorn]
' [mu]             æ [ae ligature]
' ¶                [OE ligature]
' [cedilla]        [dotless i]
' [o.]             ð [eth]
' [1/4]            [U with hook]
' [1/2]            [u with hook]
' [3/4]            [script l]
' ¿         200    È [e with grave]
'
' The Unicode standard does not restrict the number of combining characters that may
' follow a base character, and neither does it limit which combining characters may
' follow which base characters; this macro could, in theory, stack an endless number of
' characters after a base character. The sense of any specific combination of characters
' is left up to the cataloger. I do not know of any limits imposed by the Client.
'****************************************************************************************

Option Explicit

Declare Sub FillArrayASCIIUniPairs
Declare Sub FillArrayCombiChars

Declare Function Dialog1ControlFunction( Id$, Action%, SValue& )

Global SelectedChar$
Global WaltsMacros$

Global ASCIIUniPairs( 76 )  As String
Global Combining    ( 111 ) As String
Global TempArray    ()      As String

'****************************************************************************************

Sub Main

SelectedChar$ = ""
Dim CS As Object
On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Const CRITICAL_MESSAGE     As Integer = 16
Const DLG_STATEMENT_CANCEL As Integer = 102

Const AMPERSAND            As Integer = 38
Const COMBINING_HORN       As String  = "&#x031B;"
Const SEMICOLON            As Integer = 59

Dim DOUBLE_QUOTE   As String*1 : DOUBLE_QUOTE   = Chr$( 034 )
Dim NCR_SEQ        As String*3 : NCR_SEQ        = "&#x"
Dim SEMICOLON_CHAR As String*1 : SEMICOLON_CHAR = Chr$( SEMICOLON )

Dim ActualCharCount%
Dim BaseChar$
Dim BaseChar2$
Dim BaseChar2ErrorMsg$
Dim BaseCharErrorMsg$
Dim CharA%
Dim CharT$
Dim Col%
Dim CombiningCharName$
Dim CombiningCharNCR$
Dim ConvChar$
Dim FieldData$
Dim FieldDataLeft$
Dim FieldDataRight$
Dim HornChar$
Dim HornTest$
Dim Instructions1$
Dim Instructions2$
Dim LenFieldDataLeft%
Dim ReplacementField$
Dim Row%
Dim SingleCharIncrementCount%
Dim Start%
Dim TypeOfWindow%
Dim UniChar$

Dim CandidateForDouble
Dim CandidateForSingle
Dim NCR_Found

Dim i As Integer, j As Integer, p As integer

BaseCharErrorMsg$ = "Please position the cursor after a letter to add a combining character, or diacritical mark, to it."
BaseCharErrorMsg$ = BaseCharErrorMsg$ & " Place the cursor between two letters to add a double diacritical mark to both of"
BaseCharErrorMsg$ = BaseCharErrorMsg$ & " them."
Instructions1$    = "Select a combining character (diacritical mark) from the list, or use this search box. Type the first"
Instructions1$    = Instructions1$ & " letters of the character name or numbers of a code point to find matches in the list:"
Instructions2$    = "Then click " & DOUBLE_QUOTE & "OK" & DOUBLE_QUOTE & " or press the [ENTER] key to apply the selected"
Instructions2$    = Instructions2$ & " combining character to the character to the left of the cursor position, or to the"
Instructions2$    = Instructions2$ & " characters on each side for a double diacritic."

WaltsMacros$      = "[Walt's macros] Extras3:InsertCombiningCharacter"

' First, make sure a record is displayed, as opposed to a list.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case -1, 5 To 11, 13, 15 To 16, 21 To 25
    MsgBox "Sorry, this macro works only when a record is displayed!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End Select

' Then get the cursor position.

Row% = CS.CursorRow
Col% = CS.CursorColumn

' Determine if the cursor position is appropriate. The Unicode standard allows for a
' combining character to not have to follow a base letter, but this macro doesn't.

If Col% = 0 Then
    MsgBox "Sorry, this macro works only in the variable fields!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
  ElseIf Col% < 7 Then
    MsgBox "Please position the cursor after a base letter!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End If

' Get the field, which will be modified and then put back into the record.

CS.CursorColumn = 6
CS.InsertText( "&#x0387;" )
If CS.GetFieldUnicode( "...", Row%, FieldData$ ) = FALSE Then
    MsgBox "Sorry, this macro was unable to retrieve the data in the field.", CRITICAL_MESSAGE, WaltsMacros$
    CS.Backspace
    Exit Sub
  Else
    CS.Backspace
    CS.CursorColumn = Col%
    FieldData$      = Left$( FieldData$, 5 ) & Mid$( FieldData$, 14 )
End If

' Account for NCRs in the left part of the string--the part up to the cursor position--in
' order to split it correctly. NCRs in the field increase its actual length by six or
' seven characters (most NCRs will consist of seven characters) over its apparent length.
' During this check, decompose the letters with hooks ("o" and "u" in MARC) to the proper
' letter with horn.

ActualCharCount%          = 6
SingleCharIncrementCount% = 6
Do
  CharT$ = Mid$( FieldData$, ActualCharCount%, 1 )
  If CharT$ = "&" Then
      If Mid$( FieldData$, ActualCharCount%, 3 ) = NCR_SEQ And _
         ( Mid$( FieldData$, ActualCharCount% + 7, 1 ) = SEMICOLON_CHAR Or _
         Mid$( FieldData$, ActualCharCount% + 8, 1 ) = SEMICOLON_CHAR ) Then
          NCR_Found = TRUE
          HornTest$ = Mid$( FieldData$, ActualCharCount% + 3, 4 )
          Select Case HornTest$
            Case "01A0"
              HornChar$ = "O"
            Case "01AF"
              HornChar$ = "U"
            Case "01A1"
              HornChar$ = "o"
            Case "01B0"
              HornChar$ = "u"
          End Select
          If HornChar$ <> "" Then
              FieldData$       = Left$( FieldData$, ActualCharCount% - 1 ) & HornChar$ & COMBINING_HORN & Mid$( FieldData$, ActualCharCount% + 8 )
              ActualCharCount% = ActualCharCount% + 1
          End IF
      End If
    ElseIf CharT$ = SEMICOLON_CHAR Then
      If NCR_Found = TRUE Then
          NCR_Found = FALSE
      End If
  End If
  ActualCharCount% = ActualCharCount% + 1
  If NCR_Found = FALSE Then
      SingleCharIncrementCount% = SingleCharIncrementCount% + 1
  End If
Loop Until SingleCharIncrementCount% = Col%
ActualCharCount% = ActualCharCount% - 1

' Split the field at the actual cursor position. Either a diacritical mark will be
' applied to the last character of the left, or first part, or it will be applied to both
' that and the first character of the right, or second part. Both characters will be
' tested for appropriateness.

FieldDataLeft$  = Left$( FieldData$, ActualCharCount% )
FieldDataRight$ = Mid$( FieldData$, ActualCharCount% + 1 )
BaseChar$       = Right$( FieldDataLeft$, 1 )
BaseChar2$      = Left$( FieldDataRight$, 1 )

' Although the Unicode standard allows any combining character to apply to any base
' character, in any script, I have chosen to not allow Latin punctuation marks to be
' combined, and to rely on cataloger judgment for the appropriateness of the chosen
' character sequence. Another difference from the Unicode standard is that this macro
' doesn't allow for "isolated combining characters," that is, combining characters that
' have no base character. So this part of the macro tests the two characters on either
' side of the split in the original field. Because of the vast number of Unicode
' characters, the macro can't test for those that should not be combined, and it will
' accept those as valid candidates.

Select Case Asc( BaseChar$ )

  Case SEMICOLON
    LenFieldDataLeft% = Len( FieldDataLeft$ )
    If LenFieldDataLeft% > 8 Then
        If Mid$( FieldDataLeft$, LenFieldDataLeft% - 7, 3 ) = NCR_SEQ Or _
           Mid$( FieldDataLeft$, LenFieldDataLeft% - 8, 3 ) = NCR_SEQ Then
            CandidateForSingle = TRUE
          Else
            CandidateForSingle = FALSE
        End If
    End If
  Case 65 To 90, 97 To 122          'Unmodified Latin alphabetic letters
    CandidateForSingle = TRUE
  Case 159, 161 To 166, 172 To 173, 177 To 182, 184, 186, 188 To 189  'Latin script letters
    CandidateForSingle = TRUE
  Case 224 To 234, 237 To 249, 254  'Diacritical marks (OCLC-MARC encoding)
    CandidateForSingle = TRUE
  Case Else
    CandidateForSingle = FALSE

End Select

If BaseChar2$ <> "" Then
    Select Case Asc( BaseChar2$ )
      Case AMPERSAND
        If Left$( FieldDataRight$, 3 ) = NCR_SEQ And _
           ( Mid$( FieldDataRight$, 7, 1 ) = SEMICOLON_CHAR Or _
           Mid$( FieldDataRight$, 8, 1 ) = SEMICOLON_CHAR ) Then
            CandidateForDouble = TRUE
          Else
            CandidateForDouble = FALSE
        End If
      Case 65 To 90, 97 To 122          'Unmodified Latin alphabetic letters
        CandidateForDouble = TRUE
      Case 159, 161 To 166, 172 To 173, 177 To 182, 184, 186, 188 To 189  'Latin script letters
        CandidateForDouble = TRUE
      Case 224 To 234, 237 To 249, 254  'Diacritical marks (OCLC-MARC encoding)
        CandidateForDouble = TRUE
      Case Else
        CandidateForDouble = FALSE
    End Select
  Else
    CandidateForDouble = FALSE
End If

If CandidateForSingle = FALSE Then
    MsgBox BaseCharErrorMsg$, CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End If

FillArrayCombiChars

Begin Dialog Dialog1Definition  344, 128, WaltsMacros$, .Dialog1ControlFunction
  OkButton      222,  104,  52,  14
  CancelButton  282,  104,  52,  14
  ListBox        10,    8, 214,  72, "",            .CharactersListBox
  Text          230,    6, 104,  48, Instructions1$
  Text           10,   80, 324,  16, Instructions2$
  TextBox       250,   58,  64,  12,                .SearchTextBox
End Dialog

Dim Dialog1 As Dialog1Definition
On Error Resume Next
Dialog Dialog1
If Err = DLG_STATEMENT_CANCEL Then Exit Sub

' Extract the code point from the selected character and check if it is intended to apply
' to two characters.

CombiningCharNCR$ = Mid$( SelectedChar$, Len( SelectedChar$ ) - 4, 4 )

Select Case CombiningCharNCR$
  Case "035C"
    CombiningCharName$ = "combining double breve below"
  Case "035D"
    CombiningCharName$ = "combining double breve"
  Case "035E"
    CombiningCharName$ = "combining double macron"
  Case "035F"
    CombiningCharName$ = "combining double macron below"
  Case "0360"
    CombiningCharName$ = "combining double tilde"
  Case "0361"
    CombiningCharName$ = "combining double inverted breve"
  Case "0362"
    CombiningCharName$ = "combining double rightwards arrow"
End Select

FillArrayASCIIUniPairs

If CombiningCharName$ <> "" Then
    If CandidateForDouble = FALSE Then
        BaseChar2ErrorMsg$ = "Please position the cursor between two letters to apply the character " & DOUBLE_QUOTE
        BaseChar2ErrorMsg$ = BaseChar2ErrorMsg$ & CombiningCharName$ & DOUBLE_QUOTE & " to them both."
        MsgBox BaseChar2ErrorMsg$, CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If
End If

' Finally, replace the modified field.

ReplacementField$ = FieldDataLeft$ & NCR_SEQ & CombiningCharNCR$ & ";" & FieldDataRight$

i = 1
Do
  CharA% = Asc( Mid$( ReplacementField$, i, 1 ) )
  If CharA% > 128 Then
      For j = 0 To 74
        If CharA% = Val( Left$( ASCIIUniPairs( j ), 3 ) )Then
            UniChar$          = Mid$( ASCIIUniPairs( j ), 4 )
            ReplacementField$ = Left$( ReplacementField$, i - 1 ) & UniChar$ & Mid$( ReplacementField$, i + 1 )
            i        = i + Len( UniChar$ ) - 1
            UniChar$ = ""
            Exit For
        End If
      Next j
  End If
  i = i + 1
Loop Until i > Len( ReplacementField$ )

If CS.SetFieldLine( Row%, ReplacementField$ ) Then
    CS.CursorColumn = Col% + 1
  Else
    MsgBox "Sorry, the macro couldn't add the combining character.", CRITICAL_MESSAGE, WaltsMacros$
End If

End Sub

'****************************************************************************************

Sub FillArrayASCIIUniPairs

' Although the code points of upper and lower cases of letters in Extended ASCII are
' nicely separated by either 16 or 32, a simple mathematical operation won't work to
' convert one case to the other. These characters are stored in Connexion by their
' decimal code points, and OCLC-MARC encoding is quite different from ASCII encoding. For
' example, the decimal code point for lowercase "Å" (A with ring above) is 229, which in
' OCLC-MARC is the code point for the combining macron. To make the Client add the
' correct character "å" this macro inserts the Unicode encoding.

ASCIIUniPairs( 0  ) = "161&#x00A1;"
ASCIIUniPairs( 1  ) = "162&#x00D8;"
ASCIIUniPairs( 2  ) = "164&#x00DE;"
ASCIIUniPairs( 3  ) = "165&#x00C6;"
ASCIIUniPairs( 4  ) = "166&#x00B6;"
ASCIIUniPairs( 5  ) = "172&#x00BC;"
ASCIIUniPairs( 6  ) = "173&#x00BD;"
ASCIIUniPairs( 7  ) = "175&#x00AF;"
ASCIIUniPairs( 8  ) = "178&#x00F8;"
ASCIIUniPairs( 9  ) = "180&#x00FE;"
ASCIIUniPairs( 10 ) = "181&#x00E6;"
ASCIIUniPairs( 11 ) = "182&#x0152;"
ASCIIUniPairs( 12 ) = "186&#x00F0;"
ASCIIUniPairs( 13 ) = "188&#x01AF;"
ASCIIUniPairs( 14 ) = "189&#x01B0;"
ASCIIUniPairs( 15 ) = "192A&#x0300;"
ASCIIUniPairs( 16 ) = "193A&#x0301;"
ASCIIUniPairs( 17 ) = "194A&#x0302;"
ASCIIUniPairs( 18 ) = "195A&#x0303;"
ASCIIUniPairs( 19 ) = "196A&#x0308;"
ASCIIUniPairs( 20 ) = "197A&#x030A;"
ASCIIUniPairs( 21 ) = "198&#x00C6;"
ASCIIUniPairs( 22 ) = "199C&#x0327;"
ASCIIUniPairs( 23 ) = "200E&#x0300;"
ASCIIUniPairs( 24 ) = "201E&#x0301;"
ASCIIUniPairs( 25 ) = "202E&#x0302;"
ASCIIUniPairs( 26 ) = "203E&#x0308;"
ASCIIUniPairs( 27 ) = "204I&#x0300;"
ASCIIUniPairs( 28 ) = "205I&#x0301;"
ASCIIUniPairs( 29 ) = "206I&#x0302;"
ASCIIUniPairs( 30 ) = "207I&#x0308;"
ASCIIUniPairs( 31 ) = "208&#x00D0;"
ASCIIUniPairs( 32 ) = "209N&#x0303;"
ASCIIUniPairs( 33 ) = "210O&#x0300;"
ASCIIUniPairs( 34 ) = "211O&#x0301;"
ASCIIUniPairs( 35 ) = "212O&#x0302;"
ASCIIUniPairs( 36 ) = "213O&#x0303;"
ASCIIUniPairs( 37 ) = "214O&#x0308;"
ASCIIUniPairs( 38 ) = "216&#x00D8;"
ASCIIUniPairs( 39 ) = "217U&#x0300;"
ASCIIUniPairs( 40 ) = "218U&#x0301;"
ASCIIUniPairs( 41 ) = "219U&#x0302;"
ASCIIUniPairs( 42 ) = "220U&#x0308;"
ASCIIUniPairs( 43 ) = "221Y&#x0301;"
ASCIIUniPairs( 44 ) = "222&#x00DE;"
ASCIIUniPairs( 45 ) = "224a&#x0300;"
ASCIIUniPairs( 46 ) = "225a&#x0301;"
ASCIIUniPairs( 47 ) = "226a&#x0302;"
ASCIIUniPairs( 48 ) = "227a&#x0303;"
ASCIIUniPairs( 49 ) = "228a&#x0308;"
ASCIIUniPairs( 50 ) = "229a&#x030A;"
ASCIIUniPairs( 51 ) = "230&#x00E6;"
ASCIIUniPairs( 52 ) = "231c&#x0327;"
ASCIIUniPairs( 53 ) = "232e&#x0300;"
ASCIIUniPairs( 54 ) = "233e&#x0301;"
ASCIIUniPairs( 55 ) = "234e&#x0302;"
ASCIIUniPairs( 56 ) = "235e&#x0308;"
ASCIIUniPairs( 57 ) = "236i&#x0300;"
ASCIIUniPairs( 58 ) = "237i&#x0301;"
ASCIIUniPairs( 59 ) = "238i&#x0302;"
ASCIIUniPairs( 60 ) = "239i&#x0308;"
ASCIIUniPairs( 61 ) = "240&#x00F0;"
ASCIIUniPairs( 62 ) = "241n&#x0303;"
ASCIIUniPairs( 63 ) = "242o&#x0300;"
ASCIIUniPairs( 64 ) = "243o&#x0301;"
ASCIIUniPairs( 65 ) = "244o&#x0302;"
ASCIIUniPairs( 66 ) = "245o&#x0303;"
ASCIIUniPairs( 67 ) = "246o&#x0308;"
ASCIIUniPairs( 68 ) = "247&#x00F7;"
ASCIIUniPairs( 69 ) = "248&#x00F8;"
ASCIIUniPairs( 70 ) = "249u&#x0300;"
ASCIIUniPairs( 71 ) = "250u&#x0301;"
ASCIIUniPairs( 72 ) = "251u&#x0302;"
ASCIIUniPairs( 73 ) = "252u&#x0308;"
ASCIIUniPairs( 74 ) = "253y&#x0301;"
ASCIIUniPairs( 75 ) = "254&#x00FE;"
ASCIIUniPairs( 76 ) = "255y&#x0308;"

End Sub

'****************************************************************************************

Sub FillArrayCombiChars

Combining( 0   ) = "acute accent (U+0301)"
Combining( 1   ) = "acute accent below (U+0317)"
Combining( 2   ) = "acute tone mark (U+0341)"
Combining( 3   ) = "almost equal to above (U+034C)"
Combining( 4   ) = "asterisk below (U+0359)"
Combining( 5   ) = "breve (U+0306)"
Combining( 6   ) = "breve below/UPADHMANIYA (U+032E)"
Combining( 7   ) = "bridge above (U+0346)"
Combining( 8   ) = "bridge below (U+032A)"
Combining( 9   ) = "candrabindu (U+0310)"
Combining( 10  ) = "caron/HACEK (U+030C)"
Combining( 11  ) = "caron below (U+032C)"
Combining( 12  ) = "cedilla (U+0327)"
Combining( 13  ) = "circumflex accent (U+0302)"
Combining( 14  ) = "circumflex accent below (U+032D)"
Combining( 15  ) = "comma above/HIGH COMMA, CENTERED (U+0313)"
Combining( 16  ) = "comma above right/HIGH COMMA, OFF CENTER (U+0315)"
Combining( 17  ) = "comma below/LEFT HOOK (U+0326)"
Combining( 18  ) = "diaeresis/UMLAUT (U+0308)"
Combining( 19  ) = "diaeresis below/DOUBLE DOT BELOW (U+0324)"
Combining( 20  ) = "dot above/SUPERIOR DOT (U+0307)"
Combining( 21  ) = "dot above right (U+0358)"
Combining( 22  ) = "dot below (U+0323)"
Combining( 23  ) = "double acute accent (U+030B)"
Combining( 24  ) = "double breve (U+035D)"
Combining( 25  ) = "double breve below (U+035C)"
Combining( 26  ) = "double grave accent (U+030F)"
Combining( 27  ) = "double inverted breve/LIGATURE (U+0361)"
Combining( 28  ) = "double low line/DOUBLE UNDERSCORE (U+0333)"
Combining( 29  ) = "double macron (U+035E)"
Combining( 30  ) = "double macron below (U+035F)"
Combining( 31  ) = "double overline (U+033F)"
Combining( 32  ) = "double rightwards arrow below (U+0362)"
Combining( 33  ) = "double ring below (U+035A)"
Combining( 34  ) = "double tilde (U+0360)"
Combining( 35  ) = "double vertical line above (U+030E)"
Combining( 36  ) = "double vertical line below (U+0348)"
Combining( 37  ) = "down tack below (U+031E)"
Combining( 38  ) = "equals sign below (U+0347)"
Combining( 39  ) = "fermata (U+0352)"
Combining( 40  ) = "grapheme joiner (U+034F)"
Combining( 41  ) = "grave accent (U+0300)"
Combining( 42  ) = "grave accent below (U+0316)"
Combining( 43  ) = "grave tone mark (U+0340)"
Combining( 44  ) = "greek dialytika tonos (U+0344)"
Combining( 45  ) = "greek koronis (U+0343)"
Combining( 46  ) = "greek perispomeni (U+0342)"
Combining( 47  ) = "greek ypogegrammeni (U+0345)"
Combining( 48  ) = "homothetic above (U+034B)"
Combining( 49  ) = "hook above/PSEUDO QUESTION MARK (U+0309)"
Combining( 50  ) = "horn (U+031B)"
Combining( 51  ) = "inverted breve (U+0311)"
Combining( 52  ) = "inverted breve below (U+032F)"
Combining( 53  ) = "inverted bridge below (U+033A)"
Combining( 54  ) = "inverted double arch below (U+032B)"
Combining( 55  ) = "latin small letter a (U+0363)"
Combining( 56  ) = "latin small letter c (U+0368)"
Combining( 57  ) = "latin small letter d (U+0369)"
Combining( 58  ) = "latin small letter e (U+0364)"
Combining( 59  ) = "latin small letter h (U+036A)"
Combining( 60  ) = "latin small letter i (U+0365)"
Combining( 61  ) = "latin small letter m (U+036B)"
Combining( 62  ) = "latin small letter o (U+0366)"
Combining( 63  ) = "latin small letter r (U+036C)"
Combining( 64  ) = "latin small letter t (U+036D)"
Combining( 65  ) = "latin small letter u (U+0367)"
Combining( 66  ) = "latin small letter v (U+036E)"
Combining( 67  ) = "latin small letter x (U+036F)"
Combining( 68  ) = "left angle above (U+031A)"
Combining( 69  ) = "left angle below (U+0349)"
Combining( 70  ) = "left arrowhead below (U+0354)"
Combining( 71  ) = "left half ring above (U+0351)"
Combining( 72  ) = "left half ring below/RIGHT CEDILLA (U+031C)"
Combining( 73  ) = "left right arrow below (U+034D)"
Combining( 74  ) = "left tack below (U+0318)"
Combining( 75  ) = "long solidus overlay (U+0338)"
Combining( 76  ) = "long stroke overlay (U+0336)"
Combining( 77  ) = "low line/UNDERSCORE (U+0332)"
Combining( 78  ) = "macron (U+0304)"
Combining( 79  ) = "macron below (U+0331)"
Combining( 80  ) = "minus sign below (U+0320)"
Combining( 81  ) = "not tilde above (U+034A)"
Combining( 82  ) = "ogonek/RIGHT HOOK (U+0328)"
Combining( 83  ) = "overline (U+0305)"
Combining( 84  ) = "palatalized hook below (U+0321)"
Combining( 85  ) = "plus sign below (U+031F)"
Combining( 86  ) = "retroflex hook below (U+0322)"
Combining( 87  ) = "reversed comma above (U+0314)"
Combining( 88  ) = "right arrowhead above (U+0350)"
Combining( 89  ) = "right arrowhead and up arrowhead below (U+0356)"
Combining( 90  ) = "right arrowhead below (U+0355)"
Combining( 91  ) = "right half ring above (U+0357)"
Combining( 92  ) = "right half ring below (U+0339)"
Combining( 93  ) = "right tack below (U+0319)"
Combining( 94  ) = "ring above/CIRCLE ABOVE, ANGSTROM (U+030A)"
Combining( 95  ) = "ring below/CIRCLE BELOW (U+0325)"
Combining( 96  ) = "seagull below (U+033C)"
Combining( 97  ) = "short solidus overlay (U+0337)"
Combining( 98  ) = "short stroke overlay (U+0335)"
Combining( 99  ) = "square below (U+033B)"
Combining( 100 ) = "tilde (U+0303)"
Combining( 101 ) = "tilde below (U+0330)"
Combining( 102 ) = "tilde overlay (U+0334)"
Combining( 103 ) = "turned comma above (U+0312)"
Combining( 104 ) = "up tack below (U+031D)"
Combining( 105 ) = "upwards arrow below (U+034E)"
Combining( 106 ) = "vertical line above (U+030D)"
Combining( 107 ) = "vertical line below (U+0329)"
Combining( 108 ) = "vertical tilde (U+033E)"
Combining( 109 ) = "x above (U+033D)"
Combining( 110 ) = "x below (U+0353)"
Combining( 111 ) = "zigzag above (U+035B)"

End Sub

'****************************************************************************************

Function Dialog1ControlFunction( Id$, Action%, SValue& )

Const CASE_INSENSITIVE As Integer = 1
Const CONTROL_CHANGE   As Integer = 2
Const DISABLED         As Integer = 0
Const ENABLED          As Integer = 1
Const IDLE_STATE       As Integer = 5
Const INITIALIZE       As Integer = 1
Const KEEP_DLG_OPEN    As Integer = -1
Const WARNING_MESSAGE  As Integer = 48

Static PrevInput$

Dim CurrInput$
Dim IncumbentPos%
Dim NewElement$
Dim NewElementPos%
Dim Position$
Dim TempElement$

Dim MatchFound

Dim i As Integer, j As Integer, k As Integer, p As Integer, z As Integer

Select Case Action%

  Case INITIALIZE

    DlgListBoxArray "CharactersListBox", Combining()
    DlgFocus        "CharactersListBox"
    DlgValue        "CharactersListBox", 0


  Case CONTROL_CHANGE

    If Id$ = "OK" Then
        SelectedChar$ = Trim$( DlgText( "CharactersListBox" ) )
        If SelectedChar$ = "" Then
            MsgBox "Please select a combining character from the list!", WARNING_MESSAGE, WaltsMacros$
            Dialog1ControlFunction = KEEP_DLG_OPEN
        End If
    End If


  Case IDLE_STATE

' Monitor the search box for input. With each keystroke, the length of the search string
' increases, the number of matching strings decreases, and the temporary array gets re-
' built and re-displayed. This macro does no further sorting of entries that fill the
' temporary array.

    CurrInput$ = Trim$( DlgText( "SearchTextBox" ) )
    MatchFound = FALSE
    If CurrInput$ <> PrevInput$ Then
        For i = 0 To 111
          If InStr( 1, Combining( i ), CurrInput$, CASE_INSENSITIVE ) > 0 Then
              MatchFound     = TRUE
              ReDim Preserve TempArray( z )
              TempArray( z ) = Combining( i )
              z              = z + 1
          End If
        Next i
        If MatchFound Then
            DlgListBoxArray "CharactersListBox", TempArray()
            DlgValue        "CharactersListBox", 0
            DlgEnable       "OK",                ENABLED
          Else
            Erase TempArray
            DlgListBoxArray "CharactersListBox", TempArray()
            DlgEnable       "OK",                DISABLED
        End If
        MatchFound = FALSE
    End If
    PrevInput$             = CurrInput$
    Dialog1ControlFunction = KEEP_DLG_OPEN

End Select

End Function
'72730886

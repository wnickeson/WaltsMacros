' MacroName:CopyRecordToClipboard.2025.01
' MacroDescription:Copies the displayed record, or a selection of fields in that record,
' to the Windows Clipboard in the classic layout, using only characters in ISO/IEC
' 8859-1:1998.
'
' This macro was written by Walter F. Nickeson and last updated 3 May 2025.
' It was developed in Connexion client 3.1 running in Windows 11 Enterprise and 64-bit
' Windows 10 Pro.
' Walt's macros for the Connexion client: https://github.com/wnickeson/WaltsMacros
' wfnickeson@zohomail.com
'
' This macro was originally written by OCLC for its Passport for Windows software with
' the name "SaveScreen." It was converted for the Connexion client by Joel Hahn, Niles
' Public Library District, with the name "SaveRecordAsFile," to write the displayed
' record to a text file. I re-wrote Joel's version of 4 February 2004 to be able to copy
' a record to the Windows Clipboard for easy printing or emailing.
'
' Copyright 2025 Walter F. Nickeson.
'
' Permission is hereby granted, free of charge, to any person obtaining a copy of this
' software and associated documentation files (the "Software"), to deal in the Software
' without restriction, including without limitation the rights to use, copy, modify,
' merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
' permit persons to whom the Software is furnished to do so, subject to the following
' conditions:
'
' The above copyright notice and this permission notice shall be included in all copies
' or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
' INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
' PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
' HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
' THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'
'****************************************************************************************
' How it works: Run the macro with a bibliographic or authority record displayed. The
' macro puts the record on the Windows Clipboard, for pasting into a word processing
' program, for example, or into an e-mail. The copied text contains only characters
' encoded in ISO/IEC 8859-1:1998, which most applications and fonts should be able to
' cope with. However, because of the limitations of that character set, the copied
' record may be only an approximation of the original. The intent of this macro is to
' produce a useful, rather than an exact, copy.
'
' If nothing in the record is selected, the whole record is copied. If two or more
' contiguous fields have been selected, even if not completely, only those fields are
' copied. If only part of a single field is selected, that field only is copied to the
' Clipboard. A selection (whether of a single field or of several fields) that contains
' non-Latin script is not copyable. In this case, the macro offers the option of copying
' the whole record instead.
'
' The first line of the copied text identifies the source of the record--WorldCat,
' Authority File, Save File (including the save file number), or Constant Data. The
' record itself is presented as displayed on the screen, with the fixed field with its
' mnemonics either at the top or the bottom, or displayed as a variable field. If the
' fixed field shows at the top, the copied record is laid out in the classic OCLC record
' display, and if a monospaced font is used, the layout is properly spaced and aligned.
'
' The limited capabilities of the ISO/IEC 8859-1:1998 character set require conversion or
' substitution for an intelligible display. These conversions are generally made on the
' basis of visual similarity, rather than of logical appropriateness. The vertical bar
' "|" is used to represent characters for which no appropriate substitute is available.
' Conversions or substitutions made by this macro include:
'
'  + Delimiters are represented by dollar signs. The dollar sign in subfield $c in the
'    066 field, part of a code indicating the presence of Chinese, Japanese, or Korean
'    script, is doubled, as otherwise it would look like subfield "one". Elsewhere, the
'    context should make it apparent which dollar signs actually represent themselves.
'  + Fill characters are converted to asterisks.
'  + Characters in the record modified with diacritical marks are represented by their
'    unmodified forms (that is, the diacritics are simply omitted) if they have no
'    precomposed equivalent in the character set.
'  + Most joined letters (including those connected with ligatures) are represented by
'    their separated components.
'  + The sound recording copyright symbol is represented by the letter "p".
'  + The musical flat sign is converted to the word "[flat]".
'  + Superscript and subscript numbers and symbols are converted to normal forms.
'
' Script direction is always displayed in the copied record or field as left-to-right.
' (Characters in scripts written from right to left generally won't display anyway.)
'
' Links between fields, shown in the client by a bracket connecting the two fields, can't
' be displayed by the macro.
'
' A brief warning about any conversion issues is included in the copied text.
'
' Because of the limitations of OCLC's macro language, a record longer than about 32K
' characters is beyond the capabilities of this macro. The record is stored in a single
' string, whose length cannot be greater than 32,767 characters; but OML has a memory
' limit somewhat less than that.
'
' Characters with code points 32 to 127 are common to all versions of ASCII, as well as
' ISO/IEC 8859-1:1998 and OCLC-MARC; this macro will copy them exactly. Characters with
' code points 128 to 255 are expected to be OCLC-MARC characters, which are encoded
' differently than ISO/IEC 8859-1:1998. Some characters will copy exactly, but most will
' either not copy at all, or be approximated. For example, the character encoded as
' decimal 228 is the combining tilde in OCLC-MARC, but the letter "Ã¤" otherwise, as it
' might be if copied from outside Connexion. If the character is not the tilde, it won't
' copy properly. (My macro "Decompose" can turn most of these precomposed characters into
' their OCLC-MARC equivalents.) Diacritics in OCLC-MARC only appear if their combination
' with a base character matches a precomposed character in ISO/IEC 8859-1:1998; if not,
' only the base character is kept. Code points above 255 should be encoded in a MARC
' record as Numeric Character References (NCR). An NCR has the form "&#x?;", where the
' question mark stands for one or more hexadecimal digits. Almost none of these
' characters (which number more than a million) will have a direct ISO/IEC 8859-1:1998
' equivalent. A few can be approximated, but most will simply not be able to display, and
' so are represented by this macro by a vertical bar "|".
'
' The macro acquires the record's data with the "GetFieldUnicode" command, which
' retrieves Unicode characters encoded as NCRs. Valid NCRS are converted to ISO/IEC
' 8859-1:1998 by means of a table that matches those Unicode characters to ISO/IEC
' 8859-1:1998 characters. This table contains 898 Unicode characters that may be
' represented, more or less closely, by ISO/IEC 8859-1:1998 characters, drawn from these
' Unicode blocks: Basic Latin, Latin-1 Supplement, Latin Extended-A, Latin Extended-B,
' Latin Extended-C, Latin Extended-D, Latin Extended-E, Latin Extended Additional, and
' General Punctuation.
'
' The macro makes note of the three cases in which the correspondence between the
' record's characters and the ISO/IEC 8859-1:1998 set is not exact, although this takes
' the form of a general warning, and does not identify any specific occurrence of a case.
' These situations are when a diacritic is unable to be represented in combination with a
' base character, when a character has only an approximate equivalent, and when a
' character has no appropriate representation at all.
'
' If a selection includes non-Latin characters, the OML command "CS.GetSelectedText"
' returns the value "Data contains non-latin script", no matter how many fields have been
' selected. Because there is no data to copy in the selection, the macro can only offer
' to copy the whole record instead.
'****************************************************************************************

Option Explicit

Declare Sub FillUnicodeArray

Declare Function AdjustElementLength  ( InString$, ExpectedLength% ) As String
Declare Function ConvertToISO88591    ( InputString$ )               As String
Declare Function FindUnicodeEquivalent( InputString$)                As String

Global Const UNICODE_CHARACTER_COUNT As Integer = 898

Global CombiningCharOmitted
Global EquivalentCharSubstituted
Global IncorrectEncoding
Global UndisplayableChars

Global UnicodeEquiv( UNICODE_CHARACTER_COUNT ) As String

'****************************************************************************************

Sub Main

Dim CS As Object
On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Const CRITICAL_MESSAGE            As Integer = 16
Const CURRENT_WINDOW              As Integer = -1
Const DISPLAY_FF_AS_VRBL_FIELDS   As Integer = 0
Const DISPLAY_FF_AT_BOTTOM        As Integer = 2
Const DISPLAY_FF_AT_TOP           As Integer = 1
Const MAX_STRING_LENGTH           As Integer = 32000
Const MSGBOX_RETURN_OK            As Integer = 1
Const MSGBOX_SETBUTTONS_OK_CANCEL As Integer = 1
Const SECOND_BUTTON               As Integer = 256
Const WARNING_QUERY               As Integer = 32

Dim BeginningRow%            : BeginningRow%          = 1
Dim CRLF As String*2         : CRLF                   = Chr$( 013 ) & Chr$( 010 )
Dim CurrentCol%
Dim CurrentRow%
Dim Difference%
Dim EndingRow&               : EndingRow&             = 99999
Dim EndOfFieldCount%
Dim EndOfFieldPosition%
Dim EndOfFixedField%
Dim FFPos%
Dim FieldData$
Dim FieldLength%
Dim FixedFieldString$
Dim Header$
Dim LineNumber%
Dim NonCopyableSelection$
Dim QUOTE As String*1        : QUOTE                  = Chr$( 034 )
Dim RecordAsString$
Dim SaveNumber%
Dim SelectedFields$
Dim Start%
Dim StringLength%
Dim TempString$
Dim Timestamp$
Dim VariableFieldString$
Dim WaltsMacros$             : WaltsMacros$           = "[Walt's macros] Extras3:CopyRecordToClipboard"
Dim WarningDiacritics$       : WarningDiacritics$     = "---- SOME DIACRITICAL MARKS CANNOT BE DISPLAYED  ----"
Dim WarningEncoding$         : WarningEncoding$       = "---- INCORRECTLY ENCODED CHARACTERS ARE REPRESENTED BY " & QUOTE & "Â¤" & QUOTE & " ----"
Dim WarningEquivalents$      : WarningEquivalents$    = "---- SOME CHARACTERS ARE REPRESENTED BY APPROXIMATE EQUIVALENTS ----"
Dim Warnings$
Dim WarningUndisplayables$   : WarningUndisplayables$ = "---- NON-DISPLAYABLE CHARACTERS ARE REPRESENTED BY " & QUOTE & "|" & QUOTE & " ----"
Dim WindowTitle$
Dim WindowType%

Dim FieldFound                 : FieldFound           = TRUE
Dim GetFF
Dim SelectedUp                 : SelectedUp           = FALSE
Dim Selection

Dim p As Integer

CombiningCharOmitted      = FALSE
EquivalentCharSubstituted = FALSE
IncorrectEncoding         = FALSE
UndisplayableChars        = FALSE

' Bibliographic record fixed field mnemonics.

Dim AccM$,      Alph$,       Audn$,       BLvl$,       Biog$,       Comp$, _
    Conf$,      Cont$,       CrTp$,       Ctrl$,       Ctry$,       Dates1$, _
    Dates2$,    Desc$,       DtSt$,       ELvl$,       EntW$,       Entered$, _
    FMus$,      Fest$,       File$,       Form$,       Freq$,       GPub$, _
    ISSN$,      Ills$,       Indx$,       LTxt$,       Lang$,       LitF$, _
    MRec$,      OCLC$,       Orig$,       Part$,       Proj$,       RTime$, _
    RecStat$,   RecType$,    Regl$,       Relf$,       Replaced$,   SL$, _
    SpFm$,      SrTp$,       Srce$,       TMat$,       Tech$,       TrAr$

' Authority record fixed field mnemonics.

Dim ARN$,       AuthRef$,    AuthStatus$, GeoSubd$,    GovtAgn$,    IsName$, _
    NameUse$,   RefStatus$,  Roman$,      Rules$,      Series$,     SerNum$, _
    SerUse$,    Source$,     Subj$,       SubjUse$,    SubTp$,      UpdStatus$

' First, make sure the type of window is correct: The macro copies only bibliographic and
' authority records (or selected lines within those records).

WindowType% = CS.ItemType

Select Case WindowType%

' List windows have nothing to copy.

  Case 5 To 11, 13, 15 To 16, 21 To 25

    MsgBox "Please display a bibliographic or authority record to copy!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub

End Select

' A superseded LC Authority record, whose Item Type is "Unidentified," has a "Timestamp"
' element in the fixed field, which makes it copyable. Other unidentified item types
' cause the macro to quit.

If WindowType% = -1 Then
    If CS.GetFixedField( "Timestamp", Timestamp$ ) = FALSE Then
        MsgBox "Please display a bibliographic or authority record to copy!", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If
End If

CurrentRow% = CS.CursorRow
CurrentCol% = CS.CursorColumn

FillUnicodeArray

' For record windows, deal first with those in which fields have been selected. Note that
' a selection in the fixed field doesn't count. A selection including non-Latin script is
' unfortunately unretrievable with the "GetSelectedText" command. The only way to get
' that selection is to copy the whole record.

Selection = CS.GetSelectedText( SelectedFields$ )

If SelectedFields$ = "Data contains non-latin script" Then
    NonCopyableSelection$ = "Sorry, the selected fields contain non-Latin script, which this macro can't copy. "
    NonCopyableSelection$ = NonCopyableSelection$ & "Do you want to copy the whole record instead?"
    If MsgBox( NonCopyableSelection$, MSGBOX_SETBUTTONS_OK_CANCEL + WARNING_QUERY + SECOND_BUTTON, WaltsMacros$ ) = MSGBOX_RETURN_OK Then
        Selection = FALSE
      Else
        Exit Sub
    End If
End If

If CurrentCol% = 0 Then Selection = FALSE
If Selection Then
    CurrentRow% = CS.CursorRow
    If CurrentRow% = 1 And CS.CursorColumn < 6 Then
        MsgBox "No fields have been selected!", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If

' If the selection has been made by dragging upward, the last characters will be the end-
' of-field marker (ASCII characters 013 + 010).

    If Right$( SelectedFields$, 2 ) = CRLF Then SelectedUp = TRUE

' The number of end-of-field markers within the selection is the count of how many
' fields have been included. The macro will also work with a selection made within a
' field; in that case, it will copy the whole field.

    Start% = 1
    Do
      EndOfFieldPosition% = InStr( Start%, SelectedFields$, CRLF )
      If EndOfFieldPosition% > 0 Then
          Start%           = EndOfFieldPosition% + 1
          EndOfFieldCount% = EndOfFieldCount% + 1
      End If
    Loop Until EndOfFieldPosition% = 0

' In the case of fields selected by dragging up, we must do some calculations to figure
' out in which row the selection was begun. By counting the number of end-of-field
' markers in the selection, we can work backwards--toward the bottom of the record--to
' find the row where the selection was started.

    If SelectedUp = TRUE Then
        CurrentRow% = CurrentRow% + EndOfFieldCount%
    End If
    Difference%   = CurrentRow% - EndOfFieldCount%
    BeginningRow% = Difference%
    EndingRow&    = CurrentRow%

' If the whole record is to be copied, get information about the kind of record: Whether
' authority or bibliographic, constant data for either, and if it resides in a save file,
' local or online. This information will appear at the head of the copied text.

  Else

    If CS.GetWindowTitle( CURRENT_WINDOW, WindowTitle$ ) Then
        p = InStr( WindowTitle$, ":" )
        If p <> 0 Then
            If InStr( WindowTitle$, "Constant Data" ) = 0 Then
                WindowTitle$ = Left$( WindowTitle$, p )
                If CS.QueryRecordStatus( "SAVE", SaveNumber% ) Then
                    If SaveNumber% <> 0 Then
                        WindowTitle$ = WindowTitle$ & " " & Trim$( Str$( SaveNumber% ) )
                    End If
                End If
            End If
        End If
    End If
End If

' If only a part of the record is to be copied, there is no need to get the fixed field
' display. Otherwise, when retrieving fixed field values, distinguish between
' bibliographic and authority records.

If Selection = FALSE Then

    GetFF  = CS.GetFixedField( "OCLC", OCLC$ )
    If OCLC$ = "" Then
        GetFF = CS.GetFixedField( "ARN", ARN$ )
    End If
    FFPos% = CS.FixedFieldPosition
    If FFPos% <> DISPLAY_FF_AS_VRBL_FIELDS Then

' Get the values of the fixed field elements that are common to both types of record and
' have the same mnemonic.

        GetFF = CS.GetFixedField( "Type", RecType$ )
        If RecType$ Like "[!acdefgijkmoprstz]" Then
            MsgBox "Sorry, this macro can't copy a record with unknown Type.", CRITICAL_MESSAGE, WaltsMacros$
            Exit Sub
        End If
        GetFF = CS.GetFixedField( "Entered",  Entered$ )
        GetFF = CS.GetFixedField( "Rec stat", RecStat$ )
        GetFF = CS.GetFixedField( "Replaced", Replaced$ )

' Get the rest of the fixed field data, by type of record. Note that the "GetFixedField"
' command succeeds even if the element isn't in the record. When the command retrieves an
' empty string, or a string of less than the full allowed length of the element, the
' string must be padded with spaces to fill its position in the complete record string.

        If RecType$ <> "z" Then

            GetFF = CS.GetFixedField( ",", Dates2$ )        : Dates2$ = AdjustElementLength( Dates2$, 4 )
            GetFF = CS.GetFixedField( "AccM", AccM$ )       : AccM$   = AdjustElementLength( AccM$, 6 )
            GetFF = CS.GetFixedField( "Alph", Alph$ )       : Alph$   = AdjustElementLength( Alph$, 1 )
            GetFF = CS.GetFixedField( "Audn", Audn$ )       : Audn$   = AdjustElementLength( Audn$, 1 )
            GetFF = CS.GetFixedField( "Biog", Biog$ )       : Biog$   = AdjustElementLength( Biog$, 1 )
            GetFF = CS.GetFixedField( "BLvl", BLvl$ )       : BLvl$   = AdjustElementLength( BLvl$, 1 )
            GetFF = CS.GetFixedField( "Comp", Comp$ )       : Comp$   = AdjustElementLength( Comp$, 2 )
            GetFF = CS.GetFixedField( "Conf", Conf$ )       : Conf$   = AdjustElementLength( Conf$, 1 )
            GetFF = CS.GetFixedField( "Cont", Cont$ )
              If BLvl$ = "s" Then
                  Cont$ = AdjustElementLength( Cont$, 3 )
                Else
                  Cont$ = AdjustElementLength( Cont$, 4 )
              End If
            GetFF = CS.GetFixedField( "CrTp", CrTp$ )       : CrTp$    = AdjustElementLength( CrTp$, 1 )
            GetFF = CS.GetFixedField( "Ctrl", Ctrl$ )       : Ctrl$    = AdjustElementLength( Ctrl$, 1 )
            GetFF = CS.GetFixedField( "Ctry", Ctry$ )       : Ctry$    = AdjustElementLength( Ctry$, 3 )
            GetFF = CS.GetFixedField( "Dates", Dates1$ )    : Dates1$  = AdjustElementLength( Dates1$, 4 )
            GetFF = CS.GetFixedField( "Desc", Desc$ )       : Desc$    = AdjustElementLength( Desc$, 1 )
            GetFF = CS.GetFixedField( "DtSt", DtSt$ )       : DtSt$    = AdjustElementLength( DtSt$, 1 )
            GetFF = CS.GetFixedField( "ELvl", ELvl$ )       : ELvl$    = AdjustElementLength( ELvl$, 1 )
            GetFF = CS.GetFixedField( "EntW", EntW$ )       : EntW$    = AdjustElementLength( EntW$, 1 )
            GetFF = CS.GetFixedField( "Fest", Fest$ )       : Fest$    = AdjustElementLength( Fest$, 1 )
            GetFF = CS.GetFixedField( "File", File$ )       : File$    = AdjustElementLength( File$, 1 )
            GetFF = CS.GetFixedField( "FMus", FMus$ )       : FMus$    = AdjustElementLength( FMus$, 1 )
            GetFF = CS.GetFixedField( "Form", Form$ )       : Form$    = AdjustElementLength( Form$, 1 )
            GetFF = CS.GetFixedField( "Freq", Freq$ )       : Freq$    = AdjustElementLength( Freq$, 1 )
            GetFF = CS.GetFixedField( "GPub", GPub$ )       : GPub$    = AdjustElementLength( GPub$, 1 )
            GetFF = CS.GetFixedField( "Ills", Ills$ )       : Ills$    = AdjustElementLength( Ills$, 4 )
            GetFF = CS.GetFixedField( "Indx", Indx$ )       : Indx$    = AdjustElementLength( Indx$, 1 )
            GetFF = CS.GetFixedField( "Lang", Lang$ )       : Lang$    = AdjustElementLength( Lang$, 3 )
            GetFF = CS.GetFixedField( "LitF", LitF$ )       : LitF$    = AdjustElementLength( LitF$, 1 )
            GetFF = CS.GetFixedField( "LTxt", LTxt$ )       : LTxt$    = AdjustElementLength( LTxt$, 2 )
            GetFF = CS.GetFixedField( "MRec", MRec$ )       : MRec$    = AdjustElementLength( MRec$, 1 )
            GetFF = CS.GetFixedField( "Orig", Orig$ )       : Orig$    = AdjustElementLength( Orig$, 1 )
            GetFF = CS.GetFixedField( "Part", Part$ )       : Part$    = AdjustElementLength( Part$, 1 )
            GetFF = CS.GetFixedField( "Proj", Proj$ )       : Proj$    = AdjustElementLength( Proj$, 2 )
            GetFF = CS.GetFixedField( "Regl", Regl$ )       : Regl$    = AdjustElementLength( Regl$, 1 )
            GetFF = CS.GetFixedField( "Relf", Relf$ )       : Relf$    = AdjustElementLength( Relf$, 4 )
            GetFF = CS.GetFixedField( "S/L", SL$ )          : SL$      = AdjustElementLength( SL$, 1 )
            GetFF = CS.GetFixedField( "SpFm", SpFm$ )       : SpFm$    = AdjustElementLength( SpFm$, 2 )
            GetFF = CS.GetFixedField( "Srce", Srce$ )       : Srce$    = AdjustElementLength( Srce$, 1 )
            GetFF = CS.GetFixedField( "SrTp", SrTp$ )       : SrTp$    = AdjustElementLength( SrTp$, 1 )
            GetFF = CS.GetFixedField( "Tech", Tech$ )       : Tech$    = AdjustElementLength( Tech$, 1 )
            GetFF = CS.GetFixedField( "Time", RTime$ )      : RTime$   = AdjustElementLength( RTime$, 3 )
            GetFF = CS.GetFixedField( "TMat", TMat$ )       : TMat$    = AdjustElementLength( TMat$, 1 )
            GetFF = CS.GetFixedField( "TrAr", TrAr$ )       : TrAr$    = AdjustElementLength( TrAr$, 1 )

            FixedFieldString$ = "Rec Stat: " & RecStat$ & "  Entered: " & Entered$ & "   Replaced: " & Replaced$ & CRLF

' Assemble the fixed field from the appropriate elements, depending upon "Type".

            Select Case RecType$

              Case "a", "t"             'BKS, SER

                If BLvl$ <> "s" Then         'BKS
                    FixedFieldString$ = FixedFieldString$ & "Type: " & RecType$ & "      ELvl: " & ELvl$ & "      Srce: " & Srce$ & "      Audn: " & Audn$ & "      Ctrl: " & Ctrl$ & "      Lang: " & Lang$ & CRLF
                    FixedFieldString$ = FixedFieldString$ & "BLvl: " & BLvl$ & "      Form: " & Form$ & "      Conf: " & Conf$ & "      Biog: " & Biog$ & "      MRec: " & MRec$ & "      Ctry: " & Ctry$ & CRLF
                    FixedFieldString$ = FixedFieldString$ & "             Cont: " & Cont$ & "   GPub: " & GPub$ & "      LitF: " & LitF$ & "      Indx: " & Indx$ & CRLF
                    FixedFieldString$ = FixedFieldString$ & "Desc: " & Desc$ & "      Ills: " & Ills$ & "   Fest: " & Fest$ & "      DtSt: " & DtSt$ & "      Dates: " & Dates1 & ", " & Dates2 & CRLF
                  Else                       'SER
                    FixedFieldString$ = FixedFieldString$ & "Type: " & RecType$ & "      ELvl: " & ELvl$ & "      Srce: " & Srce$ & "      GPub: " & GPub$ & "      Ctrl: " & Ctrl$ & "      Lang: " & Lang$ & CRLF
                    FixedFieldString$ = FixedFieldString$ & "BLvl: " & BLvl$ & "      Form: " & Form$ & "      Conf: " & Conf$ & "      Freq: " & Freq$ & "      MRec: " & MRec$ & "      Ctry: " & Ctry$ & CRLF
                    FixedFieldString$ = FixedFieldString$ & "S/L:  " & SL$ & "      Orig: " & Orig$ & "      EntW: " & EntW$ & "      Regl: " & Regl$ & "      Alph: " & Alph$ & CRLF
                    FixedFieldString$ = FixedFieldString$ & "Desc: " & Desc$ & "      SrTp: " & SrTp$ & "      Cont: " & Cont$ & "    DtSt: " & DtSt$ & "      Dates: " & Dates1 & ", " & Dates2 & CRLF
                End If

              Case "g", "k", "r", "o"        'VIS

                FixedFieldString$ = FixedFieldString$ & "Type: " & RecType$ & "      ELvl: " & ELvl$ & "      Srce: " & Srce$ & "      Audn: " & Audn$ & "      Ctrl: " & Ctrl$ & "      Lang: " & Lang$ & CRLF
                FixedFieldString$ = FixedFieldString$ & "BLvl: " & BLvl$ & "      Form: " & Form$ & "      GPub: " & GPub$ & "      Time: " & RTime$ & "    MRec: " & MRec$ & "      Ctry: " & Ctry$ & CRLF
                FixedFieldString$ = FixedFieldString$ & "Desc: " & Desc$ & "      TMat: " & TMat$ & "      Tech: " & Tech$ & "      DtSt: " & DtSt$ & "      Dates: " & Dates1 & ", " & Dates2 & CRLF

              Case "p"                       'MIX

                FixedFieldString$ = FixedFieldString$ & "Type: " & RecType$ & "      ELvl: " & ELvl$ & "      Srce: " & Srce$ & "                   Ctrl: " & Ctrl$ & "      Lang: " & Lang$ & CRLF
                FixedFieldString$ = FixedFieldString$ & "BLvl: " & BLvl$ & "      Form: " & Form$ & "                                MRec: " & MRec$ & "      Ctry: " & Ctry$ & CRLF
                FixedFieldString$ = FixedFieldString$ & "Desc: " & Desc$ & "                                DtSt: " & DtSt$ & "      Dates: " & Dates1 & ", " & Dates2 & CRLF

              Case "e", "f"                  'MAP

                FixedFieldString$ = FixedFieldString$ & "Type: " & RecType$ & "      ELvl: " & ELvl$ & "      Srce: " & Srce$ & "      Relf: " & Relf$ & "   Ctrl: " & Ctrl$ & "      Lang: " & Lang$ & CRLF
                FixedFieldString$ = FixedFieldString$ & "BLvl: " & BLvl$ & "      Form: " & Form$ & "      GPub: " & GPub$ & "      SpFm: " & SpFm$ & "     MRec: " & MRec$ & "      Ctry: " & Ctry$ & CRLF
                FixedFieldString$ = FixedFieldString$ & "CrTp: " & CrTp$ & "      Indx: " & Indx$ & "      Proj: " & Proj$ & "     DtSt: " & DtSt$ & "      Dates: " & Dates1 & ", " & Dates2 & CRLF
                FixedFieldString$ = FixedFieldString$ & "Desc: " & Desc$ & CRLF

              Case "c", "d", "i", "j"        'SCO, REC

                FixedFieldString$ = FixedFieldString$ & "Type: " & RecType$ & "      ELvl: " & ELvl$ & "      Srce: " & Srce$ & "      Audn: " & Audn$ & "      Ctrl: " & Ctrl$ & "      Lang: " & Lang$ & CRLF
                FixedFieldString$ = FixedFieldString$ & "BLvl: " & BLvl$ & "      Form: " & Form$ & "      Comp: " & Comp$ & "     AccM: " & AccM$ & " MRec: " & MRec$ & "      Ctry: " & Ctry$ & CRLF
                FixedFieldString$ = FixedFieldString$ & "             Part: " & Part$ & "      TrAr: " & TrAr$ & CRLF
                FixedFieldString$ = FixedFieldString$ & "Desc: " & Desc$ & "      FMus: " & FMus$ & "      LTxt: " & LTxt$ & "     DtSt: " & DtSt$ & "      Dates: " & Dates1 & ", " & Dates2 & CRLF

              Case "m"                       'COM

                FixedFieldString$ = FixedFieldString$ & "Type: " & RecType$ & "      ELvl: " & ELvl$ & "      Srce: " & Srce$ & "      Audn: " & Audn$ & "      Ctrl: " & Ctrl$ & "      Lang: " & Lang$ & CRLF
                FixedFieldString$ = FixedFieldString$ & "BLvl: " & BLvl$ & "      Form: " & Form$ & "      GPub: " & GPub$ & "                   MRec: " & MRec$ & "      Ctry: " & Ctry$ & CRLF
                FixedFieldString$ = FixedFieldString$ & "Desc: " & Desc$ & "      File: " & File$ & "                   DtSt: " & DtSt$ & "      Dates: " & Dates1 & ", " & Dates2 & CRLF

            End Select

          Else

            GetFF = CS.GetFixedField( "ARN", ARN$ )
            GetFF = CS.GetFixedField( "Auth/ref", AuthRef$ )       : AuthRef$    = AdjustElementLength( AuthRef$, 1 )
            GetFF = CS.GetFixedField( "Auth status", AuthStatus$ ) : AuthStatus$ = AdjustElementLength( AuthStatus$, 1 )
            GetFF = CS.GetFixedField( "Enc lvl", ELvl$ )           : ELvl$       = AdjustElementLength( ELvl$, 1 )
            GetFF = CS.GetFixedField( "Geo subd", GeoSubd$ )       : GeoSubd$    = AdjustElementLength( GeoSubd$, 1 )
            GetFF = CS.GetFixedField( "Govt agn", GovtAgn$ )       : GovtAgn$    = AdjustElementLength( GovtAgn$, 1 )
            GetFF = CS.GetFixedField( "Mod rec", MRec$ )           : MRec$       = AdjustElementLength( MRec$, 1 )
            GetFF = CS.GetFixedField( "Name", IsName$ )            : IsName$     = AdjustElementLength( IsName$, 1 )
            GetFF = CS.GetFixedField( "Name use", NameUse$ )       : NameUse$    = AdjustElementLength( NameUse$, 1 )
            GetFF = CS.GetFixedField( "Ref status", RefStatus$ )   : RefStatus$  = AdjustElementLength( RefStatus$, 1 )
            GetFF = CS.GetFixedField( "Roman", Roman$ )            : Roman$      = AdjustElementLength( Roman$, 1 )
            GetFF = CS.GetFixedField( "Rules", Rules$ )            : Rules$      = AdjustElementLength( Rules$, 1 )
            GetFF = CS.GetFixedField( "Ser num", SerNum$ )         : SerNum$     = AdjustElementLength( SerNum$, 1 )
            GetFF = CS.GetFixedField( "Ser use", SerUse$ )         : SerUse$     = AdjustElementLength( SerUse$, 1 )
            GetFF = CS.GetFixedField( "Series", Series$ )          : Series$     = AdjustElementLength( Series$, 1 )
            GetFF = CS.GetFixedField( "Source", Source$ )          : Source$     = AdjustElementLength( Source$, 1 )
            GetFF = CS.GetFixedField( "Subdiv tp", SubTp$ )        : SubTp$      = AdjustElementLength( SubTp$, 1 )
            GetFF = CS.GetFixedField( "Subj", Subj$ )              : Subj$       = AdjustElementLength( Subj$, 1 )
            GetFF = CS.GetFixedField( "Subj use", SubjUse$ )       : SubjUse$    = AdjustElementLength( SubjUse$, 1 )
            GetFF = CS.GetFixedField( "Upd status", UpdStatus$ )   : UpdStatus$  = AdjustElementLength( UpdStatus$, 1 )

' With only one format, assembling the elements of the fixed field for an authority
' record is a simpler task than for a bibliographic record.

            If Timestamp$ <> "" Then FixedFieldString$ = "Timestamp:" & " " & Timestamp$ & CRLF
            FixedFieldString$ = FixedFieldString$ & "Rec stat: " & RecStat$ & "        Entered: " & Entered$ & "        Replaced: " & Replaced$ & CRLF
            FixedFieldString$ = FixedFieldString$ & "Type:     " & RecType$ & "        Upd status:  " & UpdStatus$ & "        Enc lvl:   " & ELvl$ & "        Source:   " & Source$ & CRLF
            FixedFieldString$ = FixedFieldString$ & "Roman:    " & Roman$ & "        Ref status:  " & RefStatus$ & "        Mod rec:   " & MRec$ & "        Name use: " & NameUse$ & CRLF
            FixedFieldString$ = FixedFieldString$ & "Govt agn: " & GovtAgn$ & "        Auth status: " & AuthStatus$ & "        Subj:      " & Subj$ & "        Subj use: " & SubjUse$ & CRLF
            FixedFieldString$ = FixedFieldString$ & "Series:   " & Series$ & "        Auth/ref:    " & AuthRef$ & "        Geo subd:  " & GeoSubd$ & "        Ser use:  " & SerUse$ & CRLF
            FixedFieldString$ = FixedFieldString$ & "Ser num:  " & SerNum$ & "        Name:        " & IsName$ & "        Subdiv tp: " & SubTp$ & "        Rules:    " & Rules$ & CRLF
        End If
    End If
End If

' Get the content of variable field data with the "GetFieldUnicode" command. If no text
' has been selected, the first row to start copying is number 1, and the last row is
' number 99999, which seems like a safe maximum number. Otherwise, the function to
' convert the data is given the line numbers of the beginning and end of the selection.

LineNumber% = BeginningRow%

Do Until FieldFound = FALSE
  FieldFound = CS.GetFieldUnicode( "...", LineNumber%, FieldData$ )
  If FieldFound Then
      FieldLength%  = Len( FieldData$ )
      StringLength% = StringLength% + FieldLength% + 2
      If StringLength% < MAX_STRING_LENGTH Then
          If Left$( FieldData$, 3 ) = "066" Then
              p = InStr( FieldData$, "$" )
              If p > 0 Then
                  FieldData$ = Left$( FieldData$, p ) & "$" & Mid$( FieldData$, p + 1 )
              End If
          End If
          TempString$ = ConvertToISO88591( Mid$( FieldData$, 6 ) ) & CRLF
          TempString$ = Left$( FieldData$, 3 ) & " " & Mid$( FieldData$, 4, 2 ) & "  " & TempString$
        Else
          MsgBox "Sorry, this record is too large for this macro to copy.", CRITICAL_MESSAGE, WaltsMacros$
          Exit Sub
      End If
      VariableFieldString$ = VariableFieldString$ & TempString$
    Else
      Exit Do
  End If
  LineNumber% = LineNumber% + 1
  If LineNumber% > EndingRow& Then Exit Do
Loop

' Begin the copied string with the information about the source of the record.

If Selection = FALSE Then
    If WindowTitle$ <> "" Then
        TempString$ = Mid$( WindowTitle$, 8, 2 )
        If TempString$ = "Wo" Then
            Header$ = WindowTitle$ & " OCLC " & OCLC$
          ElseIf TempString$ = "LC" Then
            Header$ = WindowTitle$ & " ARN " & ARN$
          Else
            If OCLC$ <> "" Then
                Header$ = WindowTitle$ & CRLF & "OCLC " & OCLC$
              Else
                Header$ = WindowTitle$ & CRLF & "ARN " & ARN$
            End If
        End If
        Header$ = Header$ & CRLF
    End If
End If

' Then add the appropriate warnings.

If IncorrectEncoding Then
    Warnings$ = Warnings$ & WarningEncoding$ & CRLF
End If

If UndisplayableChars Then
    Warnings$ = Warnings$ & WarningUndisplayables$ & CRLF
End If

If EquivalentCharSubstituted Then
    Warnings$ = Warnings$ & WarningEquivalents$ & CRLF
End If

If CombiningCharOmitted Then
    Warnings$ = Warnings$ & WarningDiacritics$ & CRLF
End If

If Warnings$ <> "" Then Warnings$ = CRLF & Warnings$ & CRLF

' Put everything together.

Select Case FFPos%
  Case DISPLAY_FF_AS_VRBL_FIELDS
    RecordAsString$ = Header$ & Warnings & VariableFieldString$
  Case DISPLAY_FF_AT_TOP
    RecordAsString$ = Header$ & Warnings & FixedFieldString$ & VariableFieldString$
  Case DISPLAY_FF_AT_BOTTOM
    RecordAsString$ = Header$ & Warnings & VariableFieldString$ & FixedFieldString$
End Select

' The last step is to put the converted string on the Clipboard.

Clipboard.Clear
Clipboard.SetText RecordAsString$

' If the entire record was copied, return the cursor to its starting position.

If Selection = FALSE Then
    CS.CursorRow    = CurrentRow%
    CS.CursorColumn = CurrentCol%
End If

End Sub

'****************************************************************************************

Sub FillUnicodeArray

' These are all the Unicode characters that exactly match the ISO/IEC 8859-1:1998 set or
' visually approximate those characters, and so may serve as appropriate substitutes for
' them. The first part of the string is the four-character Unicode code point; this is
' followed by one to three sets of decimal codes for the ASCII equivalent (encoding a
' string of one to three characters).

UnicodeEquiv( 0   ) = "0020 032" '
UnicodeEquiv( 1   ) = "0021 033" '!
UnicodeEquiv( 2   ) = "0022 034" '"
UnicodeEquiv( 3   ) = "0023 035" '#
UnicodeEquiv( 4   ) = "0024 036" '[dollar sign]
UnicodeEquiv( 5   ) = "0025 037" '[per cent sign]
UnicodeEquiv( 6   ) = "0026 038" '&
UnicodeEquiv( 7   ) = "0027 039" ''
UnicodeEquiv( 8   ) = "0028 040" '(
UnicodeEquiv( 9   ) = "0029 041" ')
UnicodeEquiv( 10  ) = "002A 042" '*
UnicodeEquiv( 11  ) = "002B 043" '+
UnicodeEquiv( 12  ) = "002C 044" ',
UnicodeEquiv( 13  ) = "002D 045" '-
UnicodeEquiv( 14  ) = "002E 046" '.
UnicodeEquiv( 15  ) = "002F 047" '/
UnicodeEquiv( 16  ) = "0030 048" '0
UnicodeEquiv( 17  ) = "0031 049" '1
UnicodeEquiv( 18  ) = "0032 050" '2
UnicodeEquiv( 19  ) = "0033 051" '3
UnicodeEquiv( 20  ) = "0034 052" '4
UnicodeEquiv( 21  ) = "0035 053" '5
UnicodeEquiv( 22  ) = "0036 054" '6
UnicodeEquiv( 23  ) = "0037 055" '7
UnicodeEquiv( 24  ) = "0038 056" '8
UnicodeEquiv( 25  ) = "0039 057" '9
UnicodeEquiv( 26  ) = "003A 058" ':
UnicodeEquiv( 27  ) = "003B 059" ';
UnicodeEquiv( 28  ) = "003C 060" '<
UnicodeEquiv( 29  ) = "003D 061" '=
UnicodeEquiv( 30  ) = "003E 062" '>
UnicodeEquiv( 31  ) = "003F 063" '?
UnicodeEquiv( 32  ) = "0040 064" '@
UnicodeEquiv( 33  ) = "0041 065" 'A
UnicodeEquiv( 34  ) = "0042 066" 'B
UnicodeEquiv( 35  ) = "0043 067" 'C
UnicodeEquiv( 36  ) = "0044 068" 'D
UnicodeEquiv( 37  ) = "0045 069" 'E
UnicodeEquiv( 38  ) = "0046 070" 'F
UnicodeEquiv( 39  ) = "0047 071" 'G
UnicodeEquiv( 40  ) = "0048 072" 'H
UnicodeEquiv( 41  ) = "0049 073" 'I
UnicodeEquiv( 42  ) = "004A 074" 'J
UnicodeEquiv( 43  ) = "004B 075" 'K
UnicodeEquiv( 44  ) = "004C 076" 'L
UnicodeEquiv( 45  ) = "004D 077" 'M
UnicodeEquiv( 46  ) = "004E 078" 'N
UnicodeEquiv( 47  ) = "004F 079" 'O
UnicodeEquiv( 48  ) = "0050 080" 'P
UnicodeEquiv( 49  ) = "0051 081" 'Q
UnicodeEquiv( 50  ) = "0052 082" 'R
UnicodeEquiv( 51  ) = "0053 083" 'S
UnicodeEquiv( 52  ) = "0054 084" 'T
UnicodeEquiv( 53  ) = "0055 085" 'U
UnicodeEquiv( 54  ) = "0056 086" 'V
UnicodeEquiv( 55  ) = "0057 087" 'W
UnicodeEquiv( 56  ) = "0058 088" 'X
UnicodeEquiv( 57  ) = "0059 089" 'Y
UnicodeEquiv( 58  ) = "005A 090" 'Z
UnicodeEquiv( 59  ) = "005B 091" '[
UnicodeEquiv( 60  ) = "005C 092" '\
UnicodeEquiv( 61  ) = "005D 093" ']
UnicodeEquiv( 62  ) = "005E 094" '^
UnicodeEquiv( 63  ) = "005F 095" '_
UnicodeEquiv( 64  ) = "0060 096" '`
UnicodeEquiv( 65  ) = "0061 097" 'a
UnicodeEquiv( 66  ) = "0062 098" 'b
UnicodeEquiv( 67  ) = "0063 099" 'c
UnicodeEquiv( 68  ) = "0064 100" 'd
UnicodeEquiv( 69  ) = "0065 101" 'e
UnicodeEquiv( 70  ) = "0066 102" 'f
UnicodeEquiv( 71  ) = "0067 103" 'g
UnicodeEquiv( 72  ) = "0068 104" 'h
UnicodeEquiv( 73  ) = "0069 105" 'i
UnicodeEquiv( 74  ) = "006A 106" 'j
UnicodeEquiv( 75  ) = "006B 107" 'k
UnicodeEquiv( 76  ) = "006C 108" 'l
UnicodeEquiv( 77  ) = "006D 109" 'm
UnicodeEquiv( 78  ) = "006E 110" 'n
UnicodeEquiv( 79  ) = "006F 111" 'o
UnicodeEquiv( 80  ) = "0070 112" 'p
UnicodeEquiv( 81  ) = "0071 113" 'q
UnicodeEquiv( 82  ) = "0072 114" 'r
UnicodeEquiv( 83  ) = "0073 115" 's
UnicodeEquiv( 84  ) = "0074 116" 't
UnicodeEquiv( 85  ) = "0075 117" 'u
UnicodeEquiv( 86  ) = "0076 118" 'v
UnicodeEquiv( 87  ) = "0077 119" 'w
UnicodeEquiv( 88  ) = "0078 120" 'x
UnicodeEquiv( 89  ) = "0079 121" 'y
UnicodeEquiv( 90  ) = "007A 122" 'z
UnicodeEquiv( 91  ) = "007B 123" '{
UnicodeEquiv( 92  ) = "007C 124" '|
UnicodeEquiv( 93  ) = "007D 125" '}
UnicodeEquiv( 94  ) = "007E 126" '~
UnicodeEquiv( 95  ) = "00A1 161" 'Â¡
UnicodeEquiv( 96  ) = "00A2 162" 'Â¢
UnicodeEquiv( 97  ) = "00A3 163" 'Â£
UnicodeEquiv( 98  ) = "00A4 164" 'Â¤
UnicodeEquiv( 99  ) = "00A5 165" 'Â¥
UnicodeEquiv( 100 ) = "00A6 166" 'Â¤
UnicodeEquiv( 101 ) = "00A7 167" 'Â§
UnicodeEquiv( 102 ) = "00A8 168" 'Â¨
UnicodeEquiv( 103 ) = "00A9 169" 'Â©
UnicodeEquiv( 104 ) = "00AA 170" 'Âª
UnicodeEquiv( 105 ) = "00AB 171" 'Â«
UnicodeEquiv( 106 ) = "00AC 172" 'Â¬
UnicodeEquiv( 107 ) = "00AD 173" 'Â­
UnicodeEquiv( 108 ) = "00AE 174" 'Â®
UnicodeEquiv( 109 ) = "00AF 175" 'Â¯
UnicodeEquiv( 110 ) = "00B0 176" 'Â°
UnicodeEquiv( 111 ) = "00B1 177" 'Â±
UnicodeEquiv( 112 ) = "00B2 178" 'Â²
UnicodeEquiv( 113 ) = "00B3 179" 'Â³
UnicodeEquiv( 114 ) = "00B4 180" 'Â´
UnicodeEquiv( 115 ) = "00B5 181" 'Âµ
UnicodeEquiv( 116 ) = "00B6 182" 'Â¶
UnicodeEquiv( 117 ) = "00B7 183" 'Â·
UnicodeEquiv( 118 ) = "00B8 184" 'Â¸
UnicodeEquiv( 119 ) = "00B9 185" 'Â¹
UnicodeEquiv( 120 ) = "00BA 186" 'Âº
UnicodeEquiv( 121 ) = "00BB 187" 'Â»
UnicodeEquiv( 122 ) = "00BC 188" 'Â¼
UnicodeEquiv( 123 ) = "00BD 189" 'Â½
UnicodeEquiv( 124 ) = "00BE 190" 'Â¾
UnicodeEquiv( 125 ) = "00BF 191" 'Â¿
UnicodeEquiv( 126 ) = "00C0 192" 'Ã
UnicodeEquiv( 127 ) = "00C1 193" 'Ã
UnicodeEquiv( 128 ) = "00C2 194" 'Ã
UnicodeEquiv( 129 ) = "00C3 195" 'Ã
UnicodeEquiv( 130 ) = "00C4 196" 'Ã
UnicodeEquiv( 131 ) = "00C5 197" 'Ã
UnicodeEquiv( 132 ) = "00C6 198" 'Ã
UnicodeEquiv( 133 ) = "00C7 199" 'Ã
UnicodeEquiv( 134 ) = "00C8 200" 'Ã
UnicodeEquiv( 135 ) = "00C9 201" 'Ã
UnicodeEquiv( 136 ) = "00CA 202" 'Ã
UnicodeEquiv( 137 ) = "00CB 203" 'Ã
UnicodeEquiv( 138 ) = "00CC 204" 'Ã
UnicodeEquiv( 139 ) = "00CD 205" 'Ã
UnicodeEquiv( 140 ) = "00CE 206" 'Ã
UnicodeEquiv( 141 ) = "00CF 207" 'Ã
UnicodeEquiv( 142 ) = "00D0 208" 'Ã
UnicodeEquiv( 143 ) = "00D1 209" 'Ã
UnicodeEquiv( 144 ) = "00D2 210" 'Ã
UnicodeEquiv( 145 ) = "00D3 211" 'Ã
UnicodeEquiv( 146 ) = "00D4 212" 'Ã
UnicodeEquiv( 147 ) = "00D5 213" 'Ã
UnicodeEquiv( 148 ) = "00D6 214" 'Ã
UnicodeEquiv( 149 ) = "00D7 215" 'Ã
UnicodeEquiv( 150 ) = "00D8 216" 'Ã
UnicodeEquiv( 151 ) = "00D9 217" 'Ã
UnicodeEquiv( 152 ) = "00DA 218" 'Ã
UnicodeEquiv( 153 ) = "00DB 219" 'Ã
UnicodeEquiv( 154 ) = "00DC 220" 'Ã
UnicodeEquiv( 155 ) = "00DD 221" 'Ã
UnicodeEquiv( 156 ) = "00DE 222" 'Ã
UnicodeEquiv( 157 ) = "00DF 223" 'Ã
UnicodeEquiv( 158 ) = "00E0 224" 'Ã 
UnicodeEquiv( 159 ) = "00E1 225" 'Ã¡
UnicodeEquiv( 160 ) = "00E2 226" 'Ã¢
UnicodeEquiv( 161 ) = "00E3 227" 'Ã£
UnicodeEquiv( 162 ) = "00E4 228" 'Ã¤
UnicodeEquiv( 163 ) = "00E5 229" 'Ã¥
UnicodeEquiv( 164 ) = "00E6 230" 'Ã¦
UnicodeEquiv( 165 ) = "00E7 231" 'Ã§
UnicodeEquiv( 166 ) = "00E8 232" 'Ã¨
UnicodeEquiv( 167 ) = "00E9 233" 'Ã©
UnicodeEquiv( 168 ) = "00EA 234" 'Ãª
UnicodeEquiv( 169 ) = "00EB 235" 'Ã«
UnicodeEquiv( 170 ) = "00EC 236" 'Ã¬
UnicodeEquiv( 171 ) = "00ED 237" 'Ã­
UnicodeEquiv( 172 ) = "00EE 238" 'Ã®
UnicodeEquiv( 173 ) = "00EF 239" 'Ã¯
UnicodeEquiv( 174 ) = "00F0 240" 'Ã°
UnicodeEquiv( 175 ) = "00F1 241" 'Ã±
UnicodeEquiv( 176 ) = "00F2 242" 'Ã²
UnicodeEquiv( 177 ) = "00F3 243" 'Ã³
UnicodeEquiv( 178 ) = "00F4 244" 'Ã´
UnicodeEquiv( 179 ) = "00F5 245" 'Ãµ
UnicodeEquiv( 180 ) = "00F6 246" 'Ã¶
UnicodeEquiv( 181 ) = "00F7 247" 'Ã·
UnicodeEquiv( 182 ) = "00F8 248" 'Ã¸
UnicodeEquiv( 183 ) = "00F9 249" 'Ã¹
UnicodeEquiv( 184 ) = "00FA 250" 'Ãº
UnicodeEquiv( 185 ) = "00FB 251" 'Ã»
UnicodeEquiv( 186 ) = "00FC 252" 'Ã¼
UnicodeEquiv( 187 ) = "00FD 253" 'Ã½
UnicodeEquiv( 188 ) = "00FE 254" 'Ã¾
UnicodeEquiv( 189 ) = "00FF 255" 'Ã¿
UnicodeEquiv( 190 ) = "0100 065" 'A
UnicodeEquiv( 191 ) = "0101 097" 'a
UnicodeEquiv( 192 ) = "0102 065" 'A
UnicodeEquiv( 193 ) = "0103 097" 'a
UnicodeEquiv( 194 ) = "0104 065" 'A
UnicodeEquiv( 195 ) = "0105 097" 'a
UnicodeEquiv( 196 ) = "0106 067" 'C
UnicodeEquiv( 197 ) = "0107 099" 'c
UnicodeEquiv( 198 ) = "0108 067" 'C
UnicodeEquiv( 199 ) = "0109 099" 'c
UnicodeEquiv( 200 ) = "010A 067" 'C
UnicodeEquiv( 201 ) = "010B 099" 'c
UnicodeEquiv( 202 ) = "010C 067" 'C
UnicodeEquiv( 203 ) = "010D 099" 'c
UnicodeEquiv( 204 ) = "010E 068" 'D
UnicodeEquiv( 205 ) = "010F 100" 'd
UnicodeEquiv( 206 ) = "0110 208" 'Ã
UnicodeEquiv( 207 ) = "0111 100" 'd
UnicodeEquiv( 208 ) = "0112 069" 'E
UnicodeEquiv( 209 ) = "0113 101" 'e
UnicodeEquiv( 210 ) = "0114 069" 'E
UnicodeEquiv( 211 ) = "0115 101" 'e
UnicodeEquiv( 212 ) = "0116 069" 'E
UnicodeEquiv( 213 ) = "0117 101" 'e
UnicodeEquiv( 214 ) = "0118 069" 'E
UnicodeEquiv( 215 ) = "0119 101" 'e
UnicodeEquiv( 216 ) = "011A 069" 'E
UnicodeEquiv( 217 ) = "011B 101" 'e
UnicodeEquiv( 218 ) = "011C 071" 'G
UnicodeEquiv( 219 ) = "011D 103" 'g
UnicodeEquiv( 220 ) = "011E 071" 'G
UnicodeEquiv( 221 ) = "011F 103" 'g
UnicodeEquiv( 222 ) = "0120 071" 'G
UnicodeEquiv( 223 ) = "0121 103" 'g
UnicodeEquiv( 224 ) = "0122 071" 'G
UnicodeEquiv( 225 ) = "0123 103" 'g
UnicodeEquiv( 226 ) = "0124 072" 'H
UnicodeEquiv( 227 ) = "0125 104" 'h
UnicodeEquiv( 228 ) = "0126 072" 'H
UnicodeEquiv( 229 ) = "0127 104" 'h
UnicodeEquiv( 230 ) = "0128 073" 'I
UnicodeEquiv( 231 ) = "0129 105" 'i
UnicodeEquiv( 232 ) = "012A 073" 'I
UnicodeEquiv( 233 ) = "012B 105" 'i
UnicodeEquiv( 234 ) = "012C 073" 'I
UnicodeEquiv( 235 ) = "012D 105" 'i
UnicodeEquiv( 236 ) = "012E 073" 'I
UnicodeEquiv( 237 ) = "012F 105" 'i
UnicodeEquiv( 238 ) = "0130 073" 'I
UnicodeEquiv( 239 ) = "0131 105" 'i
UnicodeEquiv( 240 ) = "0132 073 074" 'IJ
UnicodeEquiv( 241 ) = "0133 105 106" 'ij
UnicodeEquiv( 242 ) = "0134 074" 'J
UnicodeEquiv( 243 ) = "0135 106" 'j
UnicodeEquiv( 244 ) = "0136 075" 'K
UnicodeEquiv( 245 ) = "0137 107" 'k
UnicodeEquiv( 246 ) = "0138 107" 'k
UnicodeEquiv( 247 ) = "0139 076" 'L
UnicodeEquiv( 248 ) = "013A 108" 'l
UnicodeEquiv( 249 ) = "013B 076" 'L
UnicodeEquiv( 250 ) = "013C 108" 'l
UnicodeEquiv( 251 ) = "013D 076" 'L
UnicodeEquiv( 252 ) = "013E 108" 'l
UnicodeEquiv( 253 ) = "013F 076" 'L
UnicodeEquiv( 254 ) = "0140 108" 'l
UnicodeEquiv( 255 ) = "0141 076" 'L
UnicodeEquiv( 256 ) = "0142 108" 'l
UnicodeEquiv( 257 ) = "0143 078" 'N
UnicodeEquiv( 258 ) = "0144 110" 'n
UnicodeEquiv( 259 ) = "0145 078" 'N
UnicodeEquiv( 260 ) = "0146 110" 'n
UnicodeEquiv( 261 ) = "0147 078" 'N
UnicodeEquiv( 262 ) = "0148 110" 'n
UnicodeEquiv( 263 ) = "0149 039 110" 'n
UnicodeEquiv( 264 ) = "014C 079" 'O
UnicodeEquiv( 265 ) = "014D 111" 'o
UnicodeEquiv( 266 ) = "014E 079" 'O
UnicodeEquiv( 267 ) = "014F 111" 'o
UnicodeEquiv( 268 ) = "0150 079" 'O
UnicodeEquiv( 269 ) = "0151 111" 'o
UnicodeEquiv( 270 ) = "0152 079 069" 'OE
UnicodeEquiv( 271 ) = "0153 111 101" 'oe
UnicodeEquiv( 272 ) = "0154 082" 'R
UnicodeEquiv( 273 ) = "0155 114" 'r
UnicodeEquiv( 274 ) = "0156 082" 'R
UnicodeEquiv( 275 ) = "0157 114" 'r
UnicodeEquiv( 276 ) = "0158 082" 'R
UnicodeEquiv( 277 ) = "0159 114" 'r
UnicodeEquiv( 278 ) = "015A 083" 'S
UnicodeEquiv( 279 ) = "015B 115" 's
UnicodeEquiv( 280 ) = "015C 083" 'S
UnicodeEquiv( 281 ) = "015D 115" 's
UnicodeEquiv( 282 ) = "015E 083" 'S
UnicodeEquiv( 283 ) = "015F 115" 's
UnicodeEquiv( 284 ) = "0160 083" 'S
UnicodeEquiv( 285 ) = "0161 115" 's
UnicodeEquiv( 286 ) = "0162 084" 'T
UnicodeEquiv( 287 ) = "0163 116" 't
UnicodeEquiv( 288 ) = "0164 084" 'T
UnicodeEquiv( 289 ) = "0165 116" 't
UnicodeEquiv( 290 ) = "0166 084" 'T
UnicodeEquiv( 291 ) = "0167 116" 't
UnicodeEquiv( 292 ) = "0168 085" 'U
UnicodeEquiv( 293 ) = "0169 117" 'u
UnicodeEquiv( 294 ) = "016A 085" 'U
UnicodeEquiv( 295 ) = "016B 117" 'u
UnicodeEquiv( 296 ) = "016C 085" 'U
UnicodeEquiv( 297 ) = "016D 117" 'u
UnicodeEquiv( 298 ) = "016E 085" 'U
UnicodeEquiv( 299 ) = "016F 117" 'u
UnicodeEquiv( 300 ) = "0170 085" 'U
UnicodeEquiv( 301 ) = "0171 117" 'u
UnicodeEquiv( 302 ) = "0172 085" 'U
UnicodeEquiv( 303 ) = "0173 117" 'u
UnicodeEquiv( 304 ) = "0174 087" 'W
UnicodeEquiv( 305 ) = "0175 119" 'w
UnicodeEquiv( 306 ) = "0176 089" 'Y
UnicodeEquiv( 307 ) = "0177 121" 'y
UnicodeEquiv( 308 ) = "0178 089" 'Y
UnicodeEquiv( 309 ) = "0179 090" 'Z
UnicodeEquiv( 310 ) = "017A 122" 'z
UnicodeEquiv( 311 ) = "017B 090" 'Z
UnicodeEquiv( 312 ) = "017C 122" 'z
UnicodeEquiv( 313 ) = "017D 090" 'Z
UnicodeEquiv( 314 ) = "017E 122" 'z
UnicodeEquiv( 315 ) = "017F 115" 's
UnicodeEquiv( 316 ) = "0180 098" 'b
UnicodeEquiv( 317 ) = "0181 066" 'B
UnicodeEquiv( 318 ) = "0182 066" 'B
UnicodeEquiv( 319 ) = "0183 098" 'b
UnicodeEquiv( 320 ) = "0187 067" 'C
UnicodeEquiv( 321 ) = "0188 099" 'c
UnicodeEquiv( 322 ) = "0189 208" 'Ã
UnicodeEquiv( 323 ) = "018A 068" 'D
UnicodeEquiv( 324 ) = "018B 068" 'D
UnicodeEquiv( 325 ) = "018C 100" 'd
UnicodeEquiv( 326 ) = "0191 070" 'F
UnicodeEquiv( 327 ) = "0192 102" 'f
UnicodeEquiv( 328 ) = "0193 071" 'G
UnicodeEquiv( 329 ) = "0197 073" 'I
UnicodeEquiv( 330 ) = "0198 075" 'K
UnicodeEquiv( 331 ) = "0199 107" 'k
UnicodeEquiv( 332 ) = "019A 108" 'l
UnicodeEquiv( 333 ) = "019D 078" 'N
UnicodeEquiv( 334 ) = "019E 110" 'n
UnicodeEquiv( 335 ) = "019F 213" 'Ã
UnicodeEquiv( 336 ) = "01A0 079" 'O
UnicodeEquiv( 337 ) = "01A1 111" 'o
UnicodeEquiv( 338 ) = "01A4 080" 'P
UnicodeEquiv( 339 ) = "01A5 112" 'p
UnicodeEquiv( 340 ) = "01AB 116" 't
UnicodeEquiv( 341 ) = "01AC 084" 'T
UnicodeEquiv( 342 ) = "01AD 116" 't
UnicodeEquiv( 343 ) = "01AE 084" 'T
UnicodeEquiv( 344 ) = "01AF 085" 'U
UnicodeEquiv( 345 ) = "01B0 117" 'u
UnicodeEquiv( 346 ) = "01B2 086" 'V
UnicodeEquiv( 347 ) = "01B3 089" 'Y
UnicodeEquiv( 348 ) = "01B4 121" 'y
UnicodeEquiv( 349 ) = "01B5 090" 'Z
UnicodeEquiv( 350 ) = "01B6 122" 'z
UnicodeEquiv( 351 ) = "01C0 124" '|
UnicodeEquiv( 352 ) = "01C2 036" '[dollar sign]
UnicodeEquiv( 353 ) = "01C3 033" '!
UnicodeEquiv( 354 ) = "01C4 068 090" 'DZ
UnicodeEquiv( 355 ) = "01C5 068 122" 'Dz
UnicodeEquiv( 356 ) = "01C6 100 122" 'dz
UnicodeEquiv( 357 ) = "01C7 076 074" 'LJ
UnicodeEquiv( 358 ) = "01C8 076 106" 'Lj
UnicodeEquiv( 359 ) = "01C9 108 106" 'lj
UnicodeEquiv( 360 ) = "01CA 078 074" 'NJ
UnicodeEquiv( 361 ) = "01CB 078 106" 'Nj
UnicodeEquiv( 362 ) = "01CC 110 106" 'nj
UnicodeEquiv( 363 ) = "01CD 065" 'A
UnicodeEquiv( 364 ) = "01CE 097" 'a
UnicodeEquiv( 365 ) = "01CF 073" 'I
UnicodeEquiv( 366 ) = "01D0 105" 'i
UnicodeEquiv( 367 ) = "01D1 079" 'O
UnicodeEquiv( 368 ) = "01D2 111" 'o
UnicodeEquiv( 369 ) = "01D3 085" 'U
UnicodeEquiv( 370 ) = "01D4 117" 'u
UnicodeEquiv( 371 ) = "01D5 220" 'Ã
UnicodeEquiv( 372 ) = "01D6 252" 'Ã¼
UnicodeEquiv( 373 ) = "01D7 220" 'Ã
UnicodeEquiv( 374 ) = "01D8 252" 'Ã¼
UnicodeEquiv( 375 ) = "01D9 220" 'Ã
UnicodeEquiv( 376 ) = "01DA 252" 'Ã¼
UnicodeEquiv( 377 ) = "01DB 220" 'Ã
UnicodeEquiv( 378 ) = "01DC 252" 'Ã¼
UnicodeEquiv( 379 ) = "01DE 196" 'Ã
UnicodeEquiv( 380 ) = "01DF 228" 'Ã¤
UnicodeEquiv( 381 ) = "01E0 065" 'A
UnicodeEquiv( 382 ) = "01E1 097" 'a
UnicodeEquiv( 383 ) = "01E2 065 069" 'AE
UnicodeEquiv( 384 ) = "01E3 097 101" 'ae
UnicodeEquiv( 385 ) = "01E4 071" 'G
UnicodeEquiv( 386 ) = "01E5 103" 'g
UnicodeEquiv( 387 ) = "01E6 071" 'G
UnicodeEquiv( 388 ) = "01E7 103" 'g
UnicodeEquiv( 389 ) = "01E8 075" 'K
UnicodeEquiv( 390 ) = "01E9 107" 'k
UnicodeEquiv( 391 ) = "01EA 079" 'O
UnicodeEquiv( 392 ) = "01EB 111" 'o
UnicodeEquiv( 393 ) = "01EC 079" 'O
UnicodeEquiv( 394 ) = "01ED 111" 'o
UnicodeEquiv( 395 ) = "01F0 106" 'j
UnicodeEquiv( 396 ) = "01F1 068 090" 'DZ
UnicodeEquiv( 397 ) = "01F2 068 122" 'Dz
UnicodeEquiv( 398 ) = "01F3 100 122" 'dz
UnicodeEquiv( 399 ) = "01F4 071" 'G
UnicodeEquiv( 400 ) = "01F5 103" 'g
UnicodeEquiv( 401 ) = "01F8 078" 'N
UnicodeEquiv( 402 ) = "01F9 110" 'n
UnicodeEquiv( 403 ) = "01FA 197" 'Ã
UnicodeEquiv( 404 ) = "01FB 229" 'Ã¥
UnicodeEquiv( 405 ) = "01FC 065 201" 'AE
UnicodeEquiv( 406 ) = "01FD 097 101" 'ae
UnicodeEquiv( 407 ) = "01FE 216" 'Ã
UnicodeEquiv( 408 ) = "01FF 248" 'Ã¸
UnicodeEquiv( 409 ) = "0200 065" 'A
UnicodeEquiv( 410 ) = "0201 097" 'a
UnicodeEquiv( 411 ) = "0202 065" 'A
UnicodeEquiv( 412 ) = "0203 097" 'a
UnicodeEquiv( 413 ) = "0204 069" 'E
UnicodeEquiv( 414 ) = "0205 101" 'e
UnicodeEquiv( 415 ) = "0206 069" 'E
UnicodeEquiv( 416 ) = "0207 101" 'e
UnicodeEquiv( 417 ) = "0208 073" 'I
UnicodeEquiv( 418 ) = "0209 105" 'i
UnicodeEquiv( 419 ) = "020A 073" 'I
UnicodeEquiv( 420 ) = "020B 105" 'i
UnicodeEquiv( 421 ) = "020C 079" 'O
UnicodeEquiv( 422 ) = "020D 111" 'o
UnicodeEquiv( 423 ) = "020E 079" 'O
UnicodeEquiv( 424 ) = "020F 111" 'o
UnicodeEquiv( 425 ) = "0210 082" 'R
UnicodeEquiv( 426 ) = "0211 114" 'r
UnicodeEquiv( 427 ) = "0212 082" 'R
UnicodeEquiv( 428 ) = "0213 114" 'r
UnicodeEquiv( 429 ) = "0214 085" 'U
UnicodeEquiv( 430 ) = "0215 117" 'u
UnicodeEquiv( 431 ) = "0216 085" 'U
UnicodeEquiv( 432 ) = "0217 117" 'u
UnicodeEquiv( 433 ) = "0218 083" 'S
UnicodeEquiv( 434 ) = "0219 115" 's
UnicodeEquiv( 435 ) = "021A 084" 'T
UnicodeEquiv( 436 ) = "021B 116" 't
UnicodeEquiv( 437 ) = "021E 072" 'H
UnicodeEquiv( 438 ) = "021F 104" 'h
UnicodeEquiv( 439 ) = "0220 078" 'N
UnicodeEquiv( 440 ) = "0221 100" 'd
UnicodeEquiv( 441 ) = "0224 090" 'Z
UnicodeEquiv( 442 ) = "0225 122" 'z
UnicodeEquiv( 443 ) = "0226 065" 'A
UnicodeEquiv( 444 ) = "0227 097" 'a
UnicodeEquiv( 445 ) = "0228 069" 'E
UnicodeEquiv( 446 ) = "0229 101" 'e
UnicodeEquiv( 447 ) = "022A 214" 'Ã
UnicodeEquiv( 448 ) = "022B 246" 'Ã¶
UnicodeEquiv( 449 ) = "022C 213" 'Ã
UnicodeEquiv( 450 ) = "022D 245" 'Ãµ
UnicodeEquiv( 451 ) = "022E 079" 'O
UnicodeEquiv( 452 ) = "022F 111" 'o
UnicodeEquiv( 453 ) = "0230 079" 'O
UnicodeEquiv( 454 ) = "0231 111" 'o
UnicodeEquiv( 455 ) = "0232 089" 'Y
UnicodeEquiv( 456 ) = "0233 121" 'y
UnicodeEquiv( 457 ) = "0234 108" 'l
UnicodeEquiv( 458 ) = "0235 110" 'n
UnicodeEquiv( 459 ) = "0236 121" 'y
UnicodeEquiv( 460 ) = "0237 106" 'j
UnicodeEquiv( 461 ) = "023A 065" 'A
UnicodeEquiv( 462 ) = "023B 067" 'C
UnicodeEquiv( 463 ) = "023C 099" 'c
UnicodeEquiv( 464 ) = "023D 076" 'L
UnicodeEquiv( 465 ) = "023E 084" 'T
UnicodeEquiv( 466 ) = "023F 115" 's
UnicodeEquiv( 467 ) = "0240 122" 'z
UnicodeEquiv( 468 ) = "0243 066" 'B
UnicodeEquiv( 469 ) = "0244 085" 'U
UnicodeEquiv( 470 ) = "0246 069" 'E
UnicodeEquiv( 471 ) = "0247 101" 'e
UnicodeEquiv( 472 ) = "0248 074" 'J
UnicodeEquiv( 473 ) = "0249 106" 'j
UnicodeEquiv( 474 ) = "024A 081" 'Q
UnicodeEquiv( 475 ) = "024B 113" 'q
UnicodeEquiv( 476 ) = "024C 082" 'R
UnicodeEquiv( 477 ) = "024D 114" 'r
UnicodeEquiv( 478 ) = "024E 089" 'Y
UnicodeEquiv( 479 ) = "024F 121" 'y
UnicodeEquiv( 480 ) = "02B9 039" ''
UnicodeEquiv( 481 ) = "02BA 034" '"
UnicodeEquiv( 482 ) = "02BB 039" ''
UnicodeEquiv( 483 ) = "02BC 039" ''
UnicodeEquiv( 484 ) = "02BD 039" ''
UnicodeEquiv( 485 ) = "02C6 094" 'Ë
UnicodeEquiv( 486 ) = "02C8 039" ''
UnicodeEquiv( 487 ) = "02C9 175" 'Â¯
UnicodeEquiv( 488 ) = "02CA 180" 'Â´
UnicodeEquiv( 489 ) = "02CB 096" '`
UnicodeEquiv( 490 ) = "02D6 043" '+
UnicodeEquiv( 491 ) = "02D7 045" '-
UnicodeEquiv( 492 ) = "02DA 176" 'Â°
UnicodeEquiv( 493 ) = "02DC 126" '~
UnicodeEquiv( 494 ) = "02DD 034" '"
UnicodeEquiv( 495 ) = "02EE 034" '"
UnicodeEquiv( 496 ) = "02F4 096" '`
UnicodeEquiv( 497 ) = "02F6 034" '"
UnicodeEquiv( 498 ) = "1E00 065" 'A
UnicodeEquiv( 499 ) = "1E01 097" 'a
UnicodeEquiv( 500 ) = "1E02 066" 'B
UnicodeEquiv( 501 ) = "1E03 098" 'b
UnicodeEquiv( 502 ) = "1E04 066" 'B
UnicodeEquiv( 503 ) = "1E05 098" 'b
UnicodeEquiv( 504 ) = "1E06 066" 'B
UnicodeEquiv( 505 ) = "1E07 098" 'b
UnicodeEquiv( 506 ) = "1E08 199" 'Ã
UnicodeEquiv( 507 ) = "1E09 231" 'Ã§
UnicodeEquiv( 508 ) = "1E0A 068" 'D
UnicodeEquiv( 509 ) = "1E0B 100" 'd
UnicodeEquiv( 510 ) = "1E0C 068" 'D
UnicodeEquiv( 511 ) = "1E0D 100" 'd
UnicodeEquiv( 512 ) = "1E0E 068" 'D
UnicodeEquiv( 513 ) = "1E0F 100" 'd
UnicodeEquiv( 514 ) = "1E10 199" 'Ã
UnicodeEquiv( 515 ) = "1E11 100" 'd
UnicodeEquiv( 516 ) = "1E12 068" 'D
UnicodeEquiv( 517 ) = "1E13 100" 'd
UnicodeEquiv( 518 ) = "1E14 200" 'Ã
UnicodeEquiv( 519 ) = "1E15 232" 'Ã¨
UnicodeEquiv( 520 ) = "1E16 201" 'Ã
UnicodeEquiv( 521 ) = "1E17 233" 'Ã©
UnicodeEquiv( 522 ) = "1E18 069" 'E
UnicodeEquiv( 523 ) = "1E19 101" 'e
UnicodeEquiv( 524 ) = "1E1A 069" 'E
UnicodeEquiv( 525 ) = "1E1B 101" 'e
UnicodeEquiv( 526 ) = "1E1C 069" 'E
UnicodeEquiv( 527 ) = "1E1D 232" 'Ã¨
UnicodeEquiv( 528 ) = "1E1E 070" 'F
UnicodeEquiv( 529 ) = "1E1F 102" 'f
UnicodeEquiv( 530 ) = "1E20 071" 'G
UnicodeEquiv( 531 ) = "1E21 103" 'g
UnicodeEquiv( 532 ) = "1E22 072" 'H
UnicodeEquiv( 533 ) = "1E23 104" 'h
UnicodeEquiv( 534 ) = "1E24 072" 'H
UnicodeEquiv( 535 ) = "1E25 104" 'h
UnicodeEquiv( 536 ) = "1E26 072" 'H
UnicodeEquiv( 537 ) = "1E27 104" 'h
UnicodeEquiv( 538 ) = "1E28 072" 'H
UnicodeEquiv( 539 ) = "1E29 104" 'h
UnicodeEquiv( 540 ) = "1E2A 072" 'H
UnicodeEquiv( 541 ) = "1E2B 104" 'h
UnicodeEquiv( 542 ) = "1E2C 073" 'I
UnicodeEquiv( 543 ) = "1E2D 105" 'i
UnicodeEquiv( 544 ) = "1E2E 207" 'Ã
UnicodeEquiv( 545 ) = "1E2F 239" 'Ã¯
UnicodeEquiv( 546 ) = "1E30 075" 'K
UnicodeEquiv( 547 ) = "1E31 107" 'k
UnicodeEquiv( 548 ) = "1E32 075" 'K
UnicodeEquiv( 549 ) = "1E33 107" 'k
UnicodeEquiv( 550 ) = "1E34 075" 'K
UnicodeEquiv( 551 ) = "1E35 107" 'k
UnicodeEquiv( 552 ) = "1E36 076" 'L
UnicodeEquiv( 553 ) = "1E37 108" 'l
UnicodeEquiv( 554 ) = "1E38 076" 'L
UnicodeEquiv( 555 ) = "1E39 108" 'l
UnicodeEquiv( 556 ) = "1E3A 076" 'L
UnicodeEquiv( 557 ) = "1E3B 108" 'l
UnicodeEquiv( 558 ) = "1E3C 076" 'L
UnicodeEquiv( 559 ) = "1E3D 108" 'l
UnicodeEquiv( 560 ) = "1E3E 077" 'M
UnicodeEquiv( 561 ) = "1E3F 109" 'm
UnicodeEquiv( 562 ) = "1E40 077" 'M
UnicodeEquiv( 563 ) = "1E41 109" 'm
UnicodeEquiv( 564 ) = "1E42 077" 'M
UnicodeEquiv( 565 ) = "1E43 109" 'm
UnicodeEquiv( 566 ) = "1E44 078" 'N
UnicodeEquiv( 567 ) = "1E45 110" 'n
UnicodeEquiv( 568 ) = "1E46 078" 'N
UnicodeEquiv( 569 ) = "1E47 110" 'n
UnicodeEquiv( 570 ) = "1E48 078" 'N
UnicodeEquiv( 571 ) = "1E49 110" 'n
UnicodeEquiv( 572 ) = "1E4A 078" 'N
UnicodeEquiv( 573 ) = "1E4B 110" 'n
UnicodeEquiv( 574 ) = "1E4C 213" 'Ã
UnicodeEquiv( 575 ) = "1E4D 245" 'Ãµ
UnicodeEquiv( 576 ) = "1E4E 213" 'Ã
UnicodeEquiv( 577 ) = "1E4F 245" 'Ãµ
UnicodeEquiv( 578 ) = "1E50 210" 'Ã
UnicodeEquiv( 579 ) = "1E51 242" 'Ã²
UnicodeEquiv( 580 ) = "1E52 211" 'Ã
UnicodeEquiv( 581 ) = "1E53 243" 'Ã³
UnicodeEquiv( 582 ) = "1E54 080" 'P
UnicodeEquiv( 583 ) = "1E55 112" 'p
UnicodeEquiv( 584 ) = "1E56 080" 'P
UnicodeEquiv( 585 ) = "1E57 112" 'p
UnicodeEquiv( 586 ) = "1E58 082" 'R
UnicodeEquiv( 587 ) = "1E59 114" 'r
UnicodeEquiv( 588 ) = "1E5A 082" 'R
UnicodeEquiv( 589 ) = "1E5B 114" 'r
UnicodeEquiv( 590 ) = "1E5C 082" 'R
UnicodeEquiv( 591 ) = "1E5D 114" 'r
UnicodeEquiv( 592 ) = "1E5E 082" 'R
UnicodeEquiv( 593 ) = "1E5F 114" 'r
UnicodeEquiv( 594 ) = "1E60 083" 'S
UnicodeEquiv( 595 ) = "1E61 115" 's
UnicodeEquiv( 596 ) = "1E62 083" 'S
UnicodeEquiv( 597 ) = "1E63 115" 's
UnicodeEquiv( 598 ) = "1E64 083" 'S
UnicodeEquiv( 599 ) = "1E65 115" 's
UnicodeEquiv( 600 ) = "1E66 083" 'S
UnicodeEquiv( 601 ) = "1E67 115" 's
UnicodeEquiv( 602 ) = "1E68 083" 'S
UnicodeEquiv( 603 ) = "1E69 115" 's
UnicodeEquiv( 604 ) = "1E6A 084" 'T
UnicodeEquiv( 605 ) = "1E6B 116" 't
UnicodeEquiv( 606 ) = "1E6C 084" 'T
UnicodeEquiv( 607 ) = "1E6D 116" 't
UnicodeEquiv( 608 ) = "1E6E 084" 'T
UnicodeEquiv( 609 ) = "1E6F 116" 't
UnicodeEquiv( 610 ) = "1E70 084" 'T
UnicodeEquiv( 611 ) = "1E71 116" 't
UnicodeEquiv( 612 ) = "1E72 085" 'U
UnicodeEquiv( 613 ) = "1E73 117" 'u
UnicodeEquiv( 614 ) = "1E74 085" 'U
UnicodeEquiv( 615 ) = "1E75 117" 'u
UnicodeEquiv( 616 ) = "1E76 085" 'U
UnicodeEquiv( 617 ) = "1E77 117" 'u
UnicodeEquiv( 618 ) = "1E78 218" 'Ã
UnicodeEquiv( 619 ) = "1E79 250" 'Ãº
UnicodeEquiv( 620 ) = "1E7A 220" 'Ã
UnicodeEquiv( 621 ) = "1E7B 252" 'Ã¼
UnicodeEquiv( 622 ) = "1E7C 086" 'V
UnicodeEquiv( 623 ) = "1E7D 118" 'v
UnicodeEquiv( 624 ) = "1E7E 086" 'V
UnicodeEquiv( 625 ) = "1E7F 118" 'v
UnicodeEquiv( 626 ) = "1E80 087" 'W
UnicodeEquiv( 627 ) = "1E81 119" 'w
UnicodeEquiv( 628 ) = "1E82 087" 'W
UnicodeEquiv( 629 ) = "1E83 119" 'w
UnicodeEquiv( 630 ) = "1E84 087" 'W
UnicodeEquiv( 631 ) = "1E85 119" 'w
UnicodeEquiv( 632 ) = "1E86 087" 'W
UnicodeEquiv( 633 ) = "1E87 119" 'w
UnicodeEquiv( 634 ) = "1E88 087" 'W
UnicodeEquiv( 635 ) = "1E89 119" 'w
UnicodeEquiv( 636 ) = "1E8A 088" 'X
UnicodeEquiv( 637 ) = "1E8B 120" 'x
UnicodeEquiv( 638 ) = "1E8C 088" 'X
UnicodeEquiv( 639 ) = "1E8D 120" 'x
UnicodeEquiv( 640 ) = "1E8E 089" 'Y
UnicodeEquiv( 641 ) = "1E8F 121" 'y
UnicodeEquiv( 642 ) = "1E90 090" 'Z
UnicodeEquiv( 643 ) = "1E91 122" 'z
UnicodeEquiv( 644 ) = "1E92 090" 'Z
UnicodeEquiv( 645 ) = "1E93 122" 'z
UnicodeEquiv( 646 ) = "1E94 090" 'Z
UnicodeEquiv( 647 ) = "1E95 122" 'z
UnicodeEquiv( 648 ) = "1E96 104" 'h
UnicodeEquiv( 649 ) = "1E97 116" 't
UnicodeEquiv( 650 ) = "1E98 119" 'w
UnicodeEquiv( 651 ) = "1E99 121" 'y
UnicodeEquiv( 652 ) = "1E9A 097" 'a
UnicodeEquiv( 653 ) = "1E9B 115" 's
UnicodeEquiv( 654 ) = "1E9C 115" 's
UnicodeEquiv( 655 ) = "1E9D 115" 's
UnicodeEquiv( 656 ) = "1E9E 223" 'Ã
UnicodeEquiv( 657 ) = "1EA0 065" 'A
UnicodeEquiv( 658 ) = "1EA1 097" 'a
UnicodeEquiv( 659 ) = "1EA2 065" 'A
UnicodeEquiv( 660 ) = "1EA3 097" 'a
UnicodeEquiv( 661 ) = "1EA4 194" 'Ã
UnicodeEquiv( 662 ) = "1EA5 226" 'Ã¢
UnicodeEquiv( 663 ) = "1EA6 194" 'Ã
UnicodeEquiv( 664 ) = "1EA7 226" 'Ã¢
UnicodeEquiv( 665 ) = "1EA8 194" 'Ã
UnicodeEquiv( 666 ) = "1EA9 226" 'Ã¢
UnicodeEquiv( 667 ) = "1EAA 194" 'Ã
UnicodeEquiv( 668 ) = "1EAB 226" 'Ã¢
UnicodeEquiv( 669 ) = "1EAC 194" 'Ã
UnicodeEquiv( 670 ) = "1EAD 226" 'Ã¢
UnicodeEquiv( 671 ) = "1EAE 193" 'Ã
UnicodeEquiv( 672 ) = "1EAF 224" 'Ã 
UnicodeEquiv( 673 ) = "1EB0 192" 'Ã
UnicodeEquiv( 674 ) = "1EB1 224" 'Ã 
UnicodeEquiv( 675 ) = "1EB2 065" 'A
UnicodeEquiv( 676 ) = "1EB3 224" 'Ã 
UnicodeEquiv( 677 ) = "1EB4 195" 'Ã
UnicodeEquiv( 678 ) = "1EB5 224" 'Ã 
UnicodeEquiv( 679 ) = "1EB6 065" 'A
UnicodeEquiv( 680 ) = "1EB7 224" 'Ã 
UnicodeEquiv( 681 ) = "1EB8 069" 'E
UnicodeEquiv( 682 ) = "1EB9 101" 'e
UnicodeEquiv( 683 ) = "1EBA 069" 'E
UnicodeEquiv( 684 ) = "1EBB 101" 'e
UnicodeEquiv( 685 ) = "1EBC 069" 'E
UnicodeEquiv( 686 ) = "1EBD 101" 'e
UnicodeEquiv( 687 ) = "1EBE 202" 'Ã
UnicodeEquiv( 688 ) = "1EBF 234" 'Ãª
UnicodeEquiv( 689 ) = "1EC0 202" 'Ã
UnicodeEquiv( 690 ) = "1EC1 234" 'Ãª
UnicodeEquiv( 691 ) = "1EC2 202" 'Ã
UnicodeEquiv( 692 ) = "1EC3 234" 'Ãª
UnicodeEquiv( 693 ) = "1EC4 202" 'Ã
UnicodeEquiv( 694 ) = "1EC5 234" 'Ãª
UnicodeEquiv( 695 ) = "1EC6 202" 'Ã
UnicodeEquiv( 696 ) = "1EC7 234" 'Ãª
UnicodeEquiv( 697 ) = "1EC8 073" 'I
UnicodeEquiv( 698 ) = "1EC9 105" 'i
UnicodeEquiv( 699 ) = "1ECA 073" 'I
UnicodeEquiv( 700 ) = "1ECB 105" 'i
UnicodeEquiv( 701 ) = "1ECC 079" 'O
UnicodeEquiv( 702 ) = "1ECD 111" 'o
UnicodeEquiv( 703 ) = "1ECE 079" 'O
UnicodeEquiv( 704 ) = "1ECF 111" 'o
UnicodeEquiv( 705 ) = "1ED0 212" 'Ã
UnicodeEquiv( 706 ) = "1ED1 244" 'Ã´
UnicodeEquiv( 707 ) = "1ED2 212" 'Ã
UnicodeEquiv( 708 ) = "1ED3 244" 'Ã´
UnicodeEquiv( 709 ) = "1ED4 212" 'Ã
UnicodeEquiv( 710 ) = "1ED5 244" 'Ã´
UnicodeEquiv( 711 ) = "1ED6 212" 'Ã
UnicodeEquiv( 712 ) = "1ED7 244" 'Ã´
UnicodeEquiv( 713 ) = "1ED8 212" 'Ã
UnicodeEquiv( 714 ) = "1ED9 244" 'Ã´
UnicodeEquiv( 715 ) = "1EDA 211" 'Ã
UnicodeEquiv( 716 ) = "1EDB 243" 'Ã³
UnicodeEquiv( 717 ) = "1EDC 210" 'Ã
UnicodeEquiv( 718 ) = "1EDD 242" 'Ã²
UnicodeEquiv( 719 ) = "1EDE 079" 'O
UnicodeEquiv( 720 ) = "1EDF 111" 'o
UnicodeEquiv( 721 ) = "1EE0 213" 'Ã
UnicodeEquiv( 722 ) = "1EE1 245" 'Ãµ
UnicodeEquiv( 723 ) = "1EE2 079" 'O
UnicodeEquiv( 724 ) = "1EE3 111" 'o
UnicodeEquiv( 725 ) = "1EE4 085" 'U
UnicodeEquiv( 726 ) = "1EE5 117" 'u
UnicodeEquiv( 727 ) = "1EE6 085" 'U
UnicodeEquiv( 728 ) = "1EE7 117" 'u
UnicodeEquiv( 729 ) = "1EE8 218" 'Ã
UnicodeEquiv( 730 ) = "1EE9 250" 'Ãº
UnicodeEquiv( 731 ) = "1EEA 217" 'Ã
UnicodeEquiv( 732 ) = "1EEB 249" 'Ã¹
UnicodeEquiv( 733 ) = "1EEC 085" 'U
UnicodeEquiv( 734 ) = "1EED 117" 'u
UnicodeEquiv( 735 ) = "1EEE 085" 'U
UnicodeEquiv( 736 ) = "1EEF 117" 'u
UnicodeEquiv( 737 ) = "1EF0 085" 'U
UnicodeEquiv( 738 ) = "1EF1 117" 'u
UnicodeEquiv( 739 ) = "1EF2 089" 'Y
UnicodeEquiv( 740 ) = "1EF3 121" 'y
UnicodeEquiv( 741 ) = "1EF4 089" 'Y
UnicodeEquiv( 742 ) = "1EF5 121" 'y
UnicodeEquiv( 743 ) = "1EF6 089" 'Y
UnicodeEquiv( 744 ) = "1EF7 121" 'y
UnicodeEquiv( 745 ) = "1EF8 089" 'Y
UnicodeEquiv( 746 ) = "1EF9 121" 'y
UnicodeEquiv( 747 ) = "1EFA 076 076" 'LL
UnicodeEquiv( 748 ) = "1EFB 108 108" 'll
UnicodeEquiv( 749 ) = "1EFE 089" 'Y
UnicodeEquiv( 750 ) = "1EFF 121" 'y
UnicodeEquiv( 751 ) = "2010 045" '-
UnicodeEquiv( 752 ) = "2011 045" '-
UnicodeEquiv( 753 ) = "2013 045" '-
UnicodeEquiv( 754 ) = "2014 045 & 045" '--
UnicodeEquiv( 755 ) = "2015 045" '-
UnicodeEquiv( 756 ) = "2018 039" ''
UnicodeEquiv( 757 ) = "2019 039" ''
UnicodeEquiv( 758 ) = "201A 044" ',
UnicodeEquiv( 759 ) = "201B 039" ''
UnicodeEquiv( 760 ) = "201C 034" '"
UnicodeEquiv( 761 ) = "201D 034" '"
UnicodeEquiv( 762 ) = "201E 034" '"
UnicodeEquiv( 763 ) = "201F 034" '"
UnicodeEquiv( 764 ) = "2022 183" 'â¢
UnicodeEquiv( 765 ) = "2026 046 046 046" '...
UnicodeEquiv( 766 ) = "2032 039" ''
UnicodeEquiv( 767 ) = "2033 034" '"
UnicodeEquiv( 768 ) = "2035 039" ''
UnicodeEquiv( 769 ) = "2036 034" '"
UnicodeEquiv( 770 ) = "2039 039" ''
UnicodeEquiv( 771 ) = "203A 039" ''
UnicodeEquiv( 772 ) = "203C 033 033" '!!
UnicodeEquiv( 773 ) = "203D 063 033" '?!
UnicodeEquiv( 774 ) = "2044 047" '/
UnicodeEquiv( 775 ) = "2047 063 063" '??
UnicodeEquiv( 776 ) = "2048 063 033" '?!
UnicodeEquiv( 777 ) = "2049 033 063" '!?
UnicodeEquiv( 778 ) = "204B 182" 'Â¶
UnicodeEquiv( 779 ) = "204E 042" '*
UnicodeEquiv( 780 ) = "204F 049" ';
UnicodeEquiv( 781 ) = "2053 126" '~
UnicodeEquiv( 782 ) = "2055 042" '*
UnicodeEquiv( 783 ) = "205A 058" ':
UnicodeEquiv( 784 ) = "2C60 076" 'L
UnicodeEquiv( 785 ) = "2C61 108" 'l
UnicodeEquiv( 786 ) = "2C62 076" 'L
UnicodeEquiv( 787 ) = "2C63 080" 'P
UnicodeEquiv( 788 ) = "2C64 082" 'R
UnicodeEquiv( 789 ) = "2C65 097" 'a
UnicodeEquiv( 790 ) = "2C66 116" 't
UnicodeEquiv( 791 ) = "2C67 072" 'H
UnicodeEquiv( 792 ) = "2C68 072" 'H
UnicodeEquiv( 793 ) = "2C69 107" 'k
UnicodeEquiv( 794 ) = "2C6A 107" 'k
UnicodeEquiv( 795 ) = "2C6B 090" 'Z
UnicodeEquiv( 796 ) = "2C6C 122" 'z
UnicodeEquiv( 797 ) = "2C6E 077" 'M
UnicodeEquiv( 798 ) = "2C71 118" 'v
UnicodeEquiv( 799 ) = "2C72 087" 'W
UnicodeEquiv( 800 ) = "2C73 119" 'w
UnicodeEquiv( 801 ) = "2C74 118" 'v
UnicodeEquiv( 802 ) = "2C7E 083" 'S
UnicodeEquiv( 803 ) = "2C7F 090" 'Z
UnicodeEquiv( 804 ) = "A728 084 090" 'TZ
UnicodeEquiv( 805 ) = "A729 116 122" 'tz
UnicodeEquiv( 806 ) = "A730 070" 'F
UnicodeEquiv( 807 ) = "A731 083" 'S
UnicodeEquiv( 808 ) = "A732 065 065" 'AA
UnicodeEquiv( 809 ) = "A733 097 097" 'aa
UnicodeEquiv( 810 ) = "A734 065 079" 'AO
UnicodeEquiv( 811 ) = "A735 097 111" 'ao
UnicodeEquiv( 812 ) = "A736 065 085" 'AU
UnicodeEquiv( 813 ) = "A737 097 117" 'au
UnicodeEquiv( 814 ) = "A738 065 086" 'AV
UnicodeEquiv( 815 ) = "A739 097 118" 'av
UnicodeEquiv( 816 ) = "A73A 065 086" 'AV
UnicodeEquiv( 817 ) = "A73B 097 118" 'av
UnicodeEquiv( 818 ) = "A73C 065 089" 'AY
UnicodeEquiv( 819 ) = "A73D 097 121" 'ay
UnicodeEquiv( 820 ) = "A740 075" 'K
UnicodeEquiv( 821 ) = "A743 107" 'k
UnicodeEquiv( 822 ) = "A744 075" 'K
UnicodeEquiv( 823 ) = "A748 076" 'L
UnicodeEquiv( 824 ) = "A749 108" 'l
UnicodeEquiv( 825 ) = "A74A 079" 'O
UnicodeEquiv( 826 ) = "A74B 111" 'o
UnicodeEquiv( 827 ) = "A74C 079" 'O
UnicodeEquiv( 828 ) = "A74D 111" 'o
UnicodeEquiv( 829 ) = "A74E 079 079" 'OO
UnicodeEquiv( 830 ) = "A74F 111 111" 'oo
UnicodeEquiv( 831 ) = "A750 080" 'P
UnicodeEquiv( 832 ) = "A751 112" 'p
UnicodeEquiv( 833 ) = "A752 080" 'P
UnicodeEquiv( 834 ) = "A753 112" 'p
UnicodeEquiv( 835 ) = "A754 080" 'P
UnicodeEquiv( 836 ) = "A755 112" 'p
UnicodeEquiv( 837 ) = "A756 081" 'Q
UnicodeEquiv( 838 ) = "A757 113" 'q
UnicodeEquiv( 839 ) = "A758 081" 'Q
UnicodeEquiv( 840 ) = "A759 113" 'q
UnicodeEquiv( 841 ) = "A75E 086" 'V
UnicodeEquiv( 842 ) = "A75F 118" 'v
UnicodeEquiv( 843 ) = "A760 086 089" 'VY
UnicodeEquiv( 844 ) = "A761 118 121" 'vy
UnicodeEquiv( 845 ) = "A764 222" 'Ã
UnicodeEquiv( 846 ) = "A765 254" 'Ã¾
UnicodeEquiv( 847 ) = "A766 222" 'Ã
UnicodeEquiv( 848 ) = "A767 254" 'Ã¾
UnicodeEquiv( 849 ) = "A790 078" 'N
UnicodeEquiv( 850 ) = "A791 110" 'n
UnicodeEquiv( 851 ) = "A792 067" 'C
UnicodeEquiv( 852 ) = "A793 099" 'c
UnicodeEquiv( 853 ) = "A794 099" 'c
UnicodeEquiv( 854 ) = "A795 104" 'h
UnicodeEquiv( 855 ) = "A796 066" 'B
UnicodeEquiv( 856 ) = "A797 098" 'b
UnicodeEquiv( 857 ) = "A798 070" 'F
UnicodeEquiv( 858 ) = "A799 102" 'f
UnicodeEquiv( 859 ) = "A7A0 071" 'G
UnicodeEquiv( 860 ) = "A7A1 103" 'g
UnicodeEquiv( 861 ) = "A7A2 075" 'K
UnicodeEquiv( 862 ) = "A7A3 107" 'k
UnicodeEquiv( 863 ) = "A7A4 078" 'N
UnicodeEquiv( 864 ) = "A7A5 110" 'n
UnicodeEquiv( 865 ) = "A7A6 082" 'R
UnicodeEquiv( 866 ) = "A7A7 114" 'r
UnicodeEquiv( 867 ) = "A7A8 083" 'S
UnicodeEquiv( 868 ) = "A7A9 115" 's
UnicodeEquiv( 869 ) = "A7AA 072" 'H
UnicodeEquiv( 870 ) = "A7AC 071" 'G
UnicodeEquiv( 871 ) = "A7AD 076" 'L
UnicodeEquiv( 872 ) = "A7AE 073" 'I
UnicodeEquiv( 873 ) = "A7AF 081" 'Q
UnicodeEquiv( 874 ) = "A7B8 085" 'U
UnicodeEquiv( 875 ) = "A7B9 117" 'u
UnicodeEquiv( 876 ) = "AB33 101" 'e
UnicodeEquiv( 877 ) = "AB34 101" 'e
UnicodeEquiv( 878 ) = "AB35 102" 'f
UnicodeEquiv( 879 ) = "AB36 103" 'g
UnicodeEquiv( 880 ) = "AB37 108" 'l
UnicodeEquiv( 881 ) = "AB38 108" 'l
UnicodeEquiv( 882 ) = "AB39 108" 'l
UnicodeEquiv( 883 ) = "AB3A 109" 'm
UnicodeEquiv( 884 ) = "AB3B 109" 'm
UnicodeEquiv( 885 ) = "AB46 082" 'R
UnicodeEquiv( 886 ) = "AB47 114" 'r
UnicodeEquiv( 887 ) = "AB48 114 114" 'rr
UnicodeEquiv( 888 ) = "AB49 114" 'r
UnicodeEquiv( 889 ) = "AB4A 114 114" 'rr
UnicodeEquiv( 890 ) = "AB4E 117" 'u
UnicodeEquiv( 891 ) = "AB4F 117" 'u
UnicodeEquiv( 892 ) = "AB50 117 105" 'ui
UnicodeEquiv( 893 ) = "AB52 117" 'u
UnicodeEquiv( 894 ) = "AB56 120" 'x
UnicodeEquiv( 895 ) = "AB57 120" 'x
UnicodeEquiv( 896 ) = "AB58 120" 'x
UnicodeEquiv( 897 ) = "AB59 120" 'x
UnicodeEquiv( 898 ) = "AB5A 121" 'y

End Sub

'****************************************************************************************

Function AdjustElementLength( InString$, ExpectedLength% ) As String

' To lay out the record properly, each fixed field element must be represented by a
' string of appropriate length, including blanks. When the OML command retrieves an empty
' string, or a string shorter than the maximum, this function adds spaces to make the
' string the proper length. This function also converts a fill character to an asterisk.

Dim ActualLength%
Dim TempString$

Dim i As Integer

TempString$   = InString$
ActualLength% = Len( TempString$ )
If ActualLength% > 0 Then
    For i = 1 To ActualLength%
      If Mid$( TempString$, i, 1 ) = Chr$( 252 ) Then
          Mid$( TempString$, i, 1 ) = "*"
      End If
    Next i
End If
ActualLength% = Len( Trim$( TempString$ ) )
If ActualLength% < ExpectedLength% Then
    TempString$ = TempString$ & Space$( ExpectedLength% - ActualLength% )
End If

AdjustElementLength = TempString$

End Function

'****************************************************************************************

Function ConvertToISO88591( InputString$ ) As String

' This function converts the MARC21 string to characters in ISO/IEC 8859-1:1998, making
' appropriate conversions where possible (and noting that that was done), and
' substituting the vertical bar "|" where an appropriate conversion is not possible. It
' works on a line of the record at a time. Unicode strings are sent to the function for
' conversion.

Const ASCII_DIFF_SUBSCRIPT   As Integer = 96  'The differences between OCLC-MARC encodings of subscript and
Const ASCII_DIFF_SUPERSCRIPT As Integer = 80  ' superscript numbers and ISO/IEC 8859-1:1998 encodings of those numbers.

Const ACUTE       As Integer = 226
Const CEDILLA     As Integer = 240
Const CIRCUMFLEX  As Integer = 227
Const DIAERESIS   As Integer = 232
Const GRAVE       As Integer = 225
Const RING_ABOVE  As Integer = 234
Const TILDE       As Integer = 228

Dim CURRENCY_SIGN As String*1 : CURRENCY_SIGN  = "Â¤"
Dim VERTICAL_BAR  As String*1 : VERTICAL_BAR   = "|"

Dim Advance%
Dim Character$                : Character$     = " "
Dim CharNext%
Dim CharRead%
Dim CodePoint$
Dim NextCharPos%
Dim TempString$
Dim UnicodeString$            : UnicodeString$ = "&[#]x????;"

Dim i As Integer

Advance%     = 1
InputString$ = InputString$ & Character$

' Read the current character in the line, but also the next one, because diacritics
' follow their base characters; if the next character is a diacritic there may be a
' precomposed equivalent for the base + combining character in the character set. (Only
' the first combining character following a base character can be considered, as there
' are no precomposed characters incorporating two or more diacritics.) Test the next
' character for an NCR. Only pay attention to it if it is a combining character.

For i = 1 To Len( InputString$ ) - 1

  CharRead% = Asc( Mid$( InputString$, i, 1 ) )

  If i < Len( InputString$ ) - 7 Then
      CharNext% = Asc( Mid$( InputString$, i + Advance%, 1 ) )
      If Mid$( InputString$, i, 8 ) Like UnicodeString$ Then
          Advance% = 7
        Else
          Advance% = 1
      End If
      NextCharPos% = i + Advance%
      If Mid$( InputString$, NextCharPos%, 8 ) Like UnicodeString$ Then
          CodePoint$ = Mid$( InputString$, NextCharPos% + 3, 4 )
          Select Case CodePoint$
            Case "0300"
              CharNext% = GRAVE
            Case "0301"
              CharNext% = ACUTE
            Case "0302"
              CharNext% = CIRCUMFLEX
            Case "0303"
              CharNext% = TILDE
            Case "0308"
              CharNext% = DIAERESIS
            Case "030A"
              CharNext% = RING_ABOVE
            Case "0327"
              CharNext% = CEDILLA
            Case Else
              CombiningCharOmitted = TRUE
          End Select
          If Left$( CodePoint$, 2 ) = "03" Then
              Advance% = 8
            Else
              Advance% = 1
          End If
      End If
    Else
      CharNext% = Asc( Mid$( InputString$, i + 1, 1 ) )
  End If

  Select Case CharRead%

    Case 38   '&: This could be the start of a Numeric Code Reference (NCR), that is, a Unicode character.
      If Mid$( InputString$, i, 8 ) Like UnicodeString$ Then
          CodePoint$ = Mid( InputString$, i + 3, 4 )
          Character$ = FindUnicodeEquivalent( CodePoint$ )
          i = i + Advance%
        Else
          Character$ = Chr$( CharRead% )
      End If

    Case 0 To 31   'These characters should never appear, but ...
      Character$ = CURRENCY_SIGN

    Case 32 To 37, 39 To 64   'Numbers and symbols
      Character$ = Chr$( CharRead% )

    Case 66, 68, 70 To 72, 74 To 77, 80 To 82, 84, 86 To 88, 91 To 96   'Uppercase letters and punctuation.
      Character$ = Chr$( CharRead% )

    Case 98, 100, 102 To 104, 106 To 109, 112 To 114, 116, 118 To 120, 123 To 128   'Lowercase letters and punctuation.
      Character$ = Chr$( CharRead% )

' OCLC-MARC modified letters are turned into precomposed characters, when possible.

    Case 65, 97   'A, a
      Select Case CharNext%
        Case GRAVE
          Character$ = Chr$( CharRead% + 127 ) : i = i + Advance%
        Case ACUTE
          Character$ = Chr$( CharRead% + 128 ) : i = i + Advance%
        Case CIRCUMFLEX
          Character$ = Chr$( CharRead% + 129 ) : i = i + Advance%
        Case TILDE
          Character$ = Chr$( CharRead% + 130 ) : i = i + Advance%
        Case DIAERESIS
          Character$ = Chr$( CharRead% + 131 ) : i = i + Advance%
        Case RING_ABOVE
          Character$ = Chr$( CharRead% + 132 ) : i = i + Advance%
        Case 224, 229 To 231, 233, 235 To 251
          Character$ = Chr$( CharRead% ) : i = i + Advance%
          CombiningCharOmitted = TRUE
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 67, 99   'C, c
      Select Case CharNext%
        Case CEDILLA
          Character$ = Chr$( CharRead% + 132 ) : i = i + Advance%
        Case 224 To 239, 241 To 251
          Character$ = Chr$( CharRead% ) : i = i + Advance%
          CombiningCharOmitted = TRUE
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 69, 101  'E, e
      Select Case CharNext%
        Case GRAVE
          Character$ = Chr$( CharRead% + 131 ) : i = i + Advance%
        Case ACUTE
          Character$ = Chr$( CharRead% + 132 ) : i = i + Advance%
        Case CIRCUMFLEX
          Character$ = Chr$( CharRead% + 133 ) : i = i + Advance%
        Case DIAERESIS
          Character$ = Chr$( CharRead% + 134 ) : i = i + Advance%
        Case 224, 228 To 231, 233 To 251
          Character$ = Chr$( CharRead% ) : i = i + Advance%
          CombiningCharOmitted = TRUE
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 73, 105  'I, i
      Select Case CharNext%
        Case GRAVE
          Character$ = Chr$( CharRead% + 131 ) : i = i + Advance%
        Case ACUTE
          Character$ = Chr$( CharRead% + 132 ) : i = i + Advance%
        Case CIRCUMFLEX
          Character$ = Chr$( CharRead% + 133 ) : i = i + Advance%
        Case DIAERESIS
          Character$ = Chr$( CharRead% + 134 ) : i = i + Advance%
        Case 224, 228 To 231, 233 To 251
          Character$ = Chr$( CharRead% ) : i = i + Advance%
          CombiningCharOmitted = TRUE
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 78, 110  'N, n
      Select Case CharNext%
        Case TILDE
          Character$ = Chr$( CharRead% + 131 ) : i = i + Advance%
        Case 224 To 227, 229 To 251
          Character$ = Chr$( CharRead% ) : i = i + Advance%
          CombiningCharOmitted = TRUE
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 79, 111  'O, o
      Select Case CharNext%
        Case GRAVE
          Character$ = Chr$( CharRead% + 131 ) : i = i + Advance%
        Case ACUTE
          Character$ = Chr$( CharRead% + 132 ) : i = i + Advance%
        Case CIRCUMFLEX
          Character$ = Chr$( CharRead% + 133 ) : i = i + Advance%
        Case TILDE
          Character$ = Chr$( CharRead% + 134 ) : i = i + Advance%
        Case DIAERESIS
          Character$ = Chr$( CharRead% + 135 ) : i = i + Advance%
        Case 224, 229 To 231, 233 To 251
          Character$ = Chr$( CharRead% ) : i = i + Advance%
          CombiningCharOmitted = TRUE
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 83, 115  'S, s
      Select Case CharNext%
        Case 224 To 251
          Character$ = Chr$( CharRead% ) : i = i + Advance%
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 85, 117  'U, u
      Select Case CharNext%
        Case GRAVE
          Character$ = Chr$( CharRead% + 132 ) : i = i + Advance%
        Case ACUTE
          Character$ = Chr$( CharRead% + 133 ) : i = i + Advance%
        Case CIRCUMFLEX
          Character$ = Chr$( CharRead% + 134 ) : i = i + Advance%
        Case DIAERESIS
          Character$ = Chr$( CharRead% + 135 ) : i = i + Advance%
        Case 224, 228 To 231, 233 To 251
          Character$ = Chr$( CharRead% ) : i = i + Advance%
          CombiningCharOmitted = TRUE
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 89, 121  'Y, y
      Select Case CharNext%
        Case ACUTE
          Character$ = Chr$( CharRead% + 132 ) : i = i + Advance%
        Case DIAERESIS
          If CharRead% = 121 Then
              Character$ = Chr$( 255 )
            Else
              Character$ = Chr$( CharRead% )
          End If
          i = i + Advance%
        Case 224 To 225, 227 To 231, 233 To 251
          Character$ = Chr$( CharRead% ) : i = i + Advance%
          CombiningCharOmitted = TRUE
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 90, 122  'Z, z
      Select Case CharNext%
        Case 224 To 251
          Character$ = Chr$( CharRead% ) : i = i + Advance%
          CombiningCharOmitted = TRUE
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 128 To 157  'subscript and superscript numbers
      EquivalentCharSubstituted = TRUE
      Select Case CharRead%
        Case 128 to 137  'superscript numbers
          Character$ = Chr$( CharRead% - ASCII_DIFF_SUPERSCRIPT )
        Case 144 to 153  'subscript numbers
          Character$ = Chr$( CharRead% - ASCII_DIFF_SUBSCRIPT )
        Case 138 To 139  'superscript parentheses
          Character$ = Chr$( CharRead% - 98 )
        Case 154 To 155  'subscript parentheses
          Character$ = Chr$( CharRead% - 114 )
        Case 140, 156    'superscript, subscript plus
          Character$ = Chr$( 43 )
        Case 141, 157    'superscript, subscript minus
          Character$ = Chr$( 45 )
      End Select

    Case 158   'degree sign
      Character$ = Chr$( 176 )
    Case 159   'eszett
      Character$ = Chr$( 223 )
    Case 160   'euro
      Character$ = Chr$( 128 )
    Case 161   'crossed L
      Character$ = "L"
      EquivalentCharSubstituted = TRUE
    Case 162   'crossed O
      Character$ = Chr$( 216 )
    Case 163   'Eth
      Character$ = Chr$( 208 )
    Case 164   'Thorn
      Character$ = Chr$( 222 )
    Case 165   'AE Ligature
      Character$ = Chr$( 198 )
    Case 166   'OE Ligature
      Character$ = "Oe"
      EquivalentCharSubstituted = TRUE
    Case 167   'prime
      Character$ = Chr$( 039 )
      EquivalentCharSubstituted = TRUE
    Case 168   'middle dot
      Character$ = Chr$( 183 )
    Case 169   'musical flat
      Character$ = "[flat]"
      EquivalentCharSubstituted = TRUE
    Case 170   'registered trade mark sign
      Character$ = Chr$( 174 )
    Case 171   'plus-or-minus
      Character$ = Chr$( 177 )
    Case 172   'O with hook
      Character$ = "O"
      EquivalentCharSubstituted = TRUE
    Case 173   'U with hook
      Character$ = "O"
      EquivalentCharSubstituted = TRUE
    Case 174   'alif
      Character$ = Chr$( 039 )
      EquivalentCharSubstituted = TRUE
    Case 176   'ayn
      Character$ = Chr$( 039 )
      EquivalentCharSubstituted = TRUE
    Case 177   'crossed l
      Character$ = "l"
      EquivalentCharSubstituted = TRUE
    Case 178   'crossed o
      Character$ = Chr$( 248 )
    Case 179   'd with crossbar
      Character$ = Chr$( 240 )
    Case 180   'thorn
      Character$ = Chr$( 254 )
    Case 181   'ae ligature
      Character$ = Chr$( 230 )
    Case 182   'oe ligature
      Character$ = "oe"
      EquivalentCharSubstituted = TRUE
    Case 183   'double prime
      Character$ = Chr$( 034 )
      EquivalentCharSubstituted = TRUE
    Case 184   'Turkish i
      Character$ = "i"
      EquivalentCharSubstituted = TRUE
    Case 185   'pound
      Character$ = Chr$( 163 )
    Case 186   'eth
      Character$ = Chr$( 240 )
    Case 188   'o with hook
      Character$ = "o"
      EquivalentCharSubstituted = TRUE
    Case 189   'u with hook
      Character$ = "u"
      EquivalentCharSubstituted = TRUE
    Case 190   'script l
      Character$ = "l"
      EquivalentCharSubstituted = TRUE
    Case 200   'inverted question mark
      Character$ = Chr$( 191 )
    Case 201   'inverted exclamation mark
      Character$ = Chr$( 161 )
    Case 202   'copyright
      Character$ = Chr$( 169 )
    Case 203   'sound recording copyright
      Character$ = "p"
      EquivalentCharSubstituted = TRUE
    Case 204   'musical sharp
      Character$ = "#"
      EquivalentCharSubstituted = TRUE
    Case 223   'delimiter
      If Character$ = " " And Mid$( InputString$, i + 1, 2 ) Like "[a-z0-9] " Then
          Character$ = "$"
        Else
          Character$ = Chr$( 223 )
      End If
    Case 252   'fill character
      Character$ = "*"
      EquivalentCharSubstituted = TRUE
    Case 224 To 234, 237 To 251, 245 To 255  'diacritical marks
      CombiningCharOmitted = TRUE
      If CharNext% < 223 Then
          Character$ = Chr$( CharNext% ) : i = i + Advance%
      End If
    Case Else   'everything not already accounted for
      If CharNext% > 223 Then
          Character$ = VERTICAL_BAR : i = i + Advance%
        Else
          Character$ = Chr$( CharRead% )
      End If

  End Select

  TempString$ = TempString$ & Character$
  If Character$ = VERTICAL_BAR Then
      UndisplayableChars = TRUE
    ElseIf Character$ = CURRENCY_SIGN Then
      IncorrectEncoding  = TRUE
  End If

Next i

ConvertToISO88591 = TempString$

End Function

'****************************************************************************************

Function FindUnicodeEquivalent( InputString$ ) As String

' This function searches for an ISO/IEC 8859-1:1998 character (or character string) that
' matches or corresponds to a Unicode code point.

Dim CandidateString$
Dim Char1$
Dim Char2$
Dim Char3$
Dim CodePoint$
Dim LenCandidateString%
Dim LowerBound%
Dim Middle%
Dim UpperBound%

Dim CharFound                : CharFound = FALSE

' A code point that indicates a combining character is rejected right away, as ISO-8859-1
' contains only precomposed characters. There are no separate combining characters in the
' set.

If InputString$ >= "0300" And InputString$ <= "036F" Or _
   InputString$ >= "FE20" And InputString$ <= "FE2F" Then
    FindUnicodeEquivalent = ""
    CombiningCharOmitted  = TRUE
    Exit Function
End If

' Do a binary search in the table.

LowerBound% = 0
UpperBound% = UNICODE_CHARACTER_COUNT

Do While LowerBound% <= UpperBound%
  Middle%          = ( LowerBound% + UpperBound% ) \ 2
  CandidateString$ = UnicodeEquiv( Middle% )
  CodePoint$       = Left$( CandidateString$, 4 )
  If CodePoint$ = InputString$ Then
      CharFound = TRUE
      Exit Do
    ElseIf InputString$ < CodePoint$ Then
      UpperBound% = Middle% - 1
    Else
      LowerBound% = Middle% + 1
  End If
Loop

' A matching code point consists of one to three characters which are concatenated, if
' necessary, to output the converted Unicode character. If no match was found, the
' vertical bar symbol shows that.

If CharFound Then
    LenCandidateString% = Len( CandidateString$ )
    Char1$              = Chr$( Val( Mid$( CandidateString$, 6, 3 ) ) )
    If LenCandidateString% > 8 Then
        Char2$ = Chr$( Val( Mid$( CandidateString$, 10, 3 ) ) )
    End If
    If LenCandidateString% > 12 Then
        Char3$ = Chr$( Val( Mid$( CandidateString$, 14, 3 ) ) )
    End If
    If CodePoint$ > "00BF" Then EquivalentCharSubstituted = TRUE
  Else
    Char1$ = "|"
End If

FindUnicodeEquivalent = Char1$ & Char2$ & Char3$

End Function
'202786731

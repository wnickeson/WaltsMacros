' MacroName:FormatCallNumber.2025.01
' MacroDescription:Formats an LC-type call number; checks for matching dates in the call
' number, 260/264 subfield $c, and the fixed field; and copies the call number to the
' Windows Clipboard.
'
' This macro was written by Walter F. Nickeson and last updated 2 May 2025.
' It was developed in Connexion client 3.1 running in Windows 11 Enterprise and 64-bit
' Windows 10 Pro.
' Walt's macros for the Connexion client: https://github.com/wnickeson/WaltsMacros
' wfnickeson@zohomail.com
'
' Copyright 2025 Walter F. Nickeson.
'
' Permission is hereby granted, free of charge, to any person obtaining a copy of this
' software and associated documentation files (the "Software"), to deal in the Software
' without restriction, including without limitation the rights to use, copy, modify,
' merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
' permit persons to whom the Software is furnished to do so, subject to the following
' conditions:
'
' The above copyright notice and this permission notice shall be included in all copies
' or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
' INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
' PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
' HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
' THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'
'****************************************************************************************
' How it works: Put the cursor in an LC call number field (050 or 090) in a bibliographic
' record and run the macro. It attempts to format the call number with respect to
' capitalization, spacing, and placement of the decimal for Cutters, allowing you to
' construct a draft call number without having to be too concerned about those niceties.
' Use the macro also to check that the date in the call number matches the dates in field
' 260/264 subfield $c and the fixed field, or the date in a 11X heading for a conference.
' If there is no date in the existing call number, the macro will automatically add the
' date it derived from those two or three areas of the record. The exception is a record
' for a continuing resource, for which the addition of a date is optional, requiring user
' confirmation. The formatted call number, minus subfield coding, is also placed on the
' Windows Clipboard (even if the call number was correctly formatted to begin with and
' the macro did nothing), so it can be pasted into any sort of form for searching.
'
' Here are a few examples showing how the macro formats call numbers and adds dates.
'
'   From this:                       To this:
'     050 00  pn1995.67c2a441985        050  4  PN1995.67.C2 $b A44 1985
'     090     e41b7                     090     E41 $b .B7 1949
'     050  4  HV5840.G7.D7              050  4  HV5840.G7 $b D7 1996
'     090     E457.92                   090     E457.92 1967
'
' If no formatting is necessary the macro does nothing to the record.
'
' The macro checks for matching dates in the imprint, fixed field, and call number, but
' it doesn't concern itself with the appropriateness of any of those numbers. While it
' may change the first date in the fixed field to match the first date in field 260/264,
' it doesn't check the validity of "DtSt", or even look at the content of the second
' element of "Dates". It won't change pre-RDA hyphens in field 260/264 that represent
' unknown digits, but it will convert each one to a zero in the call number date, and to
' the letter "u" if altering the fixed field.
'
' When formatting a call number, the macro concerns itself only with subfields $a and $b.
' In those subfields, it converts all characters to uppercase (except lowercase letters
' at the end, called work letters, that usually follow a date); checks that the
' classification number contains no more than three letters or (excluding any decimal
' portion) four digits; adds a decimal point before the first Cutter, and removes one
' before the second; separates subfields $a and $b at the proper Cutter; adds appropriate
' spacing throughout; and checks for a date of four digits at the end. If there is no
' date in the record's call number, or if the date given there does not match the first
' date in a 260 or 264 field or a date in a 111 or 110 field, the macro will add the date
' to, or replace the date in, the call number. At the same time, it checks that the first
' date in the fixed field element "Dates" matches the date in field 260/264, changing it
' if necessary. If there are multiple 260 fields, the macro looks for the first date in
' the first field; if there are multiple 264 fields, the macro takes the first date from
' the fields according to the second indicator value, in this order: 1 (publication), 4
' (copyright), 0 (production), 3 (manufacture), and 2 (distribution). If there are no 260
' or 264 fields, or no 11X field, the macro will copy the first date in the fixed field
' (if available) to the call number--again, with the exception of serials.
'
' When formatting field 050, the macro assumes the call number is not assigned by LC and
' sets the second indicator to "4."
'
' Following the guidelines in instruction sheet G140, "Dates," in LC's Classification and
' Shelflisting Manual, a work letter "z" is added to a call number ending in zero if the
' date is an estimate, that is, if it is between two numbers--except if the resource is
' from a corporate body.
'
' It cannot handle a call number with more than two Cutters, or with a date elsewhere
' than at the end. For some call numbers, this macro may produce bizarre results (for
' example, a Cutter of four digits may, in some circumstances, be treated by the macro as
' a date). It's not AI! The macro works by looking for the alternation of groups of
' letters and numbers, and interior dates, volume numbering, supplements and series, or
' other unusual kinds of call numbers will confuse it.
'****************************************************************************************

Option Explicit

Declare Function NormalizeDate( InString$, Which% ) As String

Global DELIMITER As String*1
Global TO_0      As Integer
Global TO_U      As Integer

Global Tag26X$
Global WaltsMacros$

'****************************************************************************************

Sub Main

Dim CS As Object
On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Const CRITICAL_MESSAGE     As Integer = 16
Const DISPLAY_FF_AT_TOP    As Integer = 1
Const EMPTY                As Integer = 0
Const INFORMATION_MESSAGE  As Integer = 64
Const MSGBOX_RETURN_CANCEL As Integer = 2
Const MSGBOX_RETURN_NO     As Integer = 7
Const MSGBOX_RETURN_YES    As Integer = 6
Const MSGBOX_SETUP         As Integer = 291  'The sum of: 3 = Yes, No, Cancel buttons
                                             '           32 = Warning query
                                             '          256 = Second button as default
Const WARNING_MESSAGE      As Integer = 48

DELIMITER = Chr$( 223 )

Dim DOUBLE_QUOTE As String*1 : DOUBLE_QUOTE     = Chr$( 034 )
Dim DELIMITER_B  As String*2 : DELIMITER_B      = DELIMITER & "b"
Dim DELIMITER_C  As String*2 : DELIMITER_C      = DELIMITER & "c"

Dim Answer%
Dim BLvl$
Dim CallNumberCopied$
Dim CallNumberDate$
Dim CallNumberDateLength%
Dim CallNumberDateSource$
Dim CallNumberDateValue%
Dim CallNumberFormatted$
Dim CallNumberIndicator1$
Dim CallNumberInProcess$
Dim CallNumberNoDate$
Dim CallNumberOriginal$
Dim CallNumberTag$
Dim CallNumberWorkLetters$
Dim CharT$
Dim ClassNumber$
Dim CountOf260Fields%
Dim CountOf264Fields%
Dim CountOfDatesIn26X%
Dim CountOfSubfield_A%
Dim DateStringFrom11X$
Dim DateStringFrom26X$
Dim DateStringFromFF$
Dim DateValueIn11X%
Dim DateValueIn26X%
Dim DateValueInFF%
Dim Field26X$
Dim Field26XIndicator2$
Dim FieldData$
Dim Index%
Dim LengthTempString%
Dim Ordinal$
Dim PosFF%
Dim PrecedingSubfields$
Dim Row%
Dim SourceQuestion$
Dim Start%
Dim StartOfCallNumber%
Dim SubfieldCode$
Dim SucceedingSubfields$
Dim SummaryMsgActionTaken$
Dim SummaryMsgFormatting$
Dim SummaryMsgSources$
Dim Tag11X$
Dim TempString$
Dim TestString$
Dim TestStringWithZeros$
Dim TypeOfWindow%

Dim First26X As Variant

Dim ChangedFFView            : ChangedFFView    = FALSE
Dim ContinuingResource
Dim CorpNamePresent
Dim Digits                   : Digits           = FALSE
Dim FFFix                    : FFFix            = FALSE
Dim HasBeenFormatted         : HasBeenFormatted = FALSE
Dim No26X                    : No26X            = FALSE
Dim Uncertain                : Uncertain        = FALSE

Dim i As Integer, p As Integer, q As Integer

Dim CallNumberArray( 3 ) As String
Dim Field26XArray  ( 6 ) As String

TO_0 = 1
TO_U = 2

CallNumberIndicator1$ = " "
WaltsMacros$          = "[Walt's macros] Essentials:FormatCallNumber"

' First, make sure that a bibliographic record is displayed.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%

  Case -1, 3 To 16, 18, 20 To 26
    MsgBox "Sorry, this macro works only in a bibliographic record!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub

End Select

' Get the call number in the row in which the cursor is placed and do preliminary checks.

Row% = CS.CursorRow
If CS.GetField( "...", Row%, FieldData$ ) Then
    CallNumberTag$ = Left$( FieldData$, 3 )
    If CallNumberTag$ = "050" Or CallNumberTag$ = "090" Then
        CallNumberIndicator1$ = Mid$( FieldData$, 4, 1 )
      Else
        MsgBox "This is not an LC call number field!", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If
End If

' If the call number field is empty, or it contains two call numbers--identified by the
' presence of a second subfield $a--exit the macro.

If Mid$( FieldData$, 6 ) = DELIMITER_B & " " Then
    MsgBox "This call number field is empty!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End If

' Remove all subfields except $a and $b, setting them aside to be added back later. The
' macro does nothing with them.

Start%             = 6
StartOfCallNumber% = 6
Do
  p = InStr( Start%, FieldData$, DELIMITER )
  If p > 0 Then
      SubfieldCode$ = Mid$( FieldData$, p + 1, 1 )
      Select Case SubfieldCode$
        Case "a"
          StartOfCallNumber%  = p
          PrecedingSubfields$ = Trim$( Mid$( FieldData$, 6, p - 6 ) )
          If CountOfSubfield_A% = 1 Then
              MsgBox "Each call number must be in its own field! Separate the two call numbers and try again.", CRITICAL_MESSAGE, WaltsMacros$
              Exit Sub
            Else
              CountOfSubfield_A% = 1
          End If
        Case "0", "1", "3", "6", "8"
          If p > StartOfCallNumber% Then
              SucceedingSubfields$ = Trim$( Mid$( FieldData$, p ) )
              CallNumberInProcess$ = Trim$( Mid$( FieldData$, StartOfCallNumber%, p - StartOfCallNumber% ) )
              Exit Do
          End If
      End Select
    Else
      If SucceedingSubfields$ = "" Then
          CallNumberInProcess$ = Trim$( Mid$( FieldData$, StartOfCallNumber% ) )
      End If
  End If
  Start% = p + 1
Loop Until p = 0

If Left$( CallNumberInProcess$, 2 ) = DELIMITER & "a" Then
    CallNumberInProcess$ = Trim$( Mid$( CallNumberInProcess$, 3 ) )
End If

' Make a copy of the original call number so the edited number can be compared to the
' original at the end.

CallNumberOriginal$ = CallNumberInProcess$

' Check for work letters, or workmarks, which are lowercase letters at the end of the
' call number. Although they usually follow a date, they may also appear at the end of a
' Cutter. If found, remove them, storing the string for later. However, a "z" that
' follows a zero in the date indicates uncertainty in the date and is not a work letter.
' It too is set aside to be added back later, if necessary.

If Right$( CallNumberInProcess$, 2 ) = "0z" Then
    CallNumberWorkLetters$ = ""
    CallNumberInProcess$   = Left$( CallNumberInProcess$, Len( CallNumberInProcess$ ) - 1 )
  Else
    For i = Len( CallNumberInProcess$ ) To 1 Step -1
      CharT$ = Mid$( CallNumberInProcess$, i, 1 )
      If CharT$ Like "[a-z]" Then
          CallNumberWorkLetters$ = CharT$ & CallNumberWorkLetters$
        Else
          Exit For
      End If
    Next i
    CallNumberInProcess$ = Left$( CallNumberInProcess$, i )
End If

' Check for a date at the end of the call number by examining the last four characters.
' If they contain a number between 1450 and the present, assume that number is the date
' (although this is not an infallible assumption--it could be a long Cutter), and remove
' it so the base call number can be processed. Otherwise, assume the call number lacks a
' date, and get the date from the 260/264 or the fixed field later in the macro.

CallNumberDate$ = Right$( CallNumberInProcess$, 4 )
If Val( CallNumberDate$ ) < 1450 Or Val( CallNumberDate$ ) > Year( Now() ) + 1 Then
    CallNumberDate$       = ""
    CallNumberDateLength% = 0

' If work letters were detected at the end of the call number but they weren't following
' a date, discard them. (The single letter "x" was used by some libraries to indicate the
' call number wasn't assigned by LC.) Those kinds of work letters can't be simply re-
' assigned to follow the date at the end of the call number.

    If CallNumberWorkLetters$ <> "" Then
        CallNumberWorkLetters$ = ""
    End If
  Else
    CallNumberDateLength% = 4
End If
CallNumberInProcess$ = Trim$( Left$( CallNumberInProcess$, Len( CallNumberInProcess$ ) - CallNumberDateLength% ) )

CallNumberNoDate$    = CallNumberInProcess$

' Remove a delimiter "$b," if present, and let the macro take care of its positioning later.

p = InStr( CallNumberInProcess$, DELIMITER_B )
If p > 0 Then
    CallNumberInProcess$ = Left$( CallNumberInProcess$, p - 1 ) & Mid$( CallNumberInProcess$, p + 2 )
End If
CallNumberInProcess$ = Trim$( CallNumberInProcess$ )

If Len( CallNumberInProcess$ ) < 2 Then
    MsgBox "The macro cannot handle this call number!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End If

' Make the string uppercase for manipulation, and then remove all spaces.

CallNumberInProcess$ = UCase$( CallNumberInProcess$ )
Do
  p = InStr( CallNumberInProcess$, " " )
  If p <> 0 Then
      CallNumberInProcess$ = Left$( CallNumberInProcess$, p - 1 ) & Mid$( CallNumberInProcess$, p + 1 )
  End If
Loop Until p = 0

' Separate the string into alternating groups of letters and numbers, storing them in an
' array whose four elements are the alphabetic and numeric parts of the classification
' (including any decimal), and one or two Cutters. The macro creates these elements by
' adding each character in the string to the appropriate element, depending on the
' character that follows. A change from letters to numbers, or vice versa, starts
' building the next element of the array. All other characters are ignored.

For i = 1 To Len( CallNumberInProcess$ )
  TestString$ = Mid$( CallNumberInProcess$, i, 1 )

  Select Case TestString$

    Case "A" To "Z"
      If Index% = 1 Or Digits = TRUE Then
          Index% = Index% + 1
          If Index% = 4 Then
              MsgBox "Sorry, this call number cannot be formatted by this macro. Check that it has a maximum of two Cutters following a class number.", CRITICAL_MESSAGE, WaltsMacros$
              Exit Sub
          End If
          Digits = FALSE
      End If
      CallNumberArray( Index% ) = CallNumberArray( Index% ) & TestString$

    Case "."
      If Index% = 1 Then
          If Right$( CallNumberArray( Index% ), 1 ) <> "." Then
              CallNumberArray( Index% ) = CallNumberArray( Index% ) & TestString$
          End If
      End If

    Case "0" To "9"

' If the call number starts with digits, it's not LC, so quit.

      If Index% = 0 Then
          If CallNumberArray( Index% ) = "" Then
              MsgBox "This is not an LC-type call number. Macro exiting,", CRITICAL_MESSAGE, WaltsMacros$
              Exit Sub
            Else
              Index% = 1
          End If
      End If
      CallNumberArray( Index% ) = CallNumberArray( Index% ) & TestString$
      Digits = TRUE

  End Select

Next i

' If the call number consists of a class letter only, it's incomplete, and the macro quits.

If Index% = 0 Then
    MsgBox "This is not an LC-type call number. Macro exiting,", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End If

If Right$( CallNumberArray( 2 ), 1 ) = "." Then
    CallNumberArray( 2 ) = Left$( CallNumberArray( 2 ), Len( CallNumberArray( 2 ) ) - 1 )
End If
If Left$( CallNumberArray( 2 ), 1 ) <> "." Then
    CallNumberArray( 2 ) = "." & CallNumberArray( 2 )
End If

' Clean up extraneous decimals that may sneak in at the end of elements.

For Index% = 0 To 3
  If Right$( CallNumberArray( Index% ), 1 ) = "." Then
      CallNumberArray( Index% ) = Left$ ( CallNumberArray( Index% ), Len( CallNumberArray( Index% ) ) - 1 )
  End If
Next

' Check that the alphabetic portion of the class number is not too long.

If Len( CallNumberArray( 0 ) ) > 3 Then
    MsgBox "There is no such class as " & DOUBLE_QUOTE & CallNumberArray( 0 ) & DOUBLE_QUOTE & "!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End If

' Check that the non-decimal portion of the class number is not too long.

ClassNumber$ = CallNumberArray( 0 ) & CallNumberArray( 1 )
p = InStr( CallNumberArray( 1 ), "." )
If p <> 0 Then
    TempString$ = Left$( CallNumberArray( 1 ), p - 1 )
  Else
    TempString$ = CallNumberArray( 1 )
End If
If Len( TempString$ ) > 4 Then
    If p <> 0 Then
        MsgBox "The class number, '" & ClassNumber$ & "', may be too long. Please check placement of the decimal.", WARNING_MESSAGE, WaltsMacros$
      Else
        MsgBox "The class number, '" & ClassNumber$ & "', may be too long.", WARNING_MESSAGE, WaltsMacros$
    End If
    Exit Sub
End If

' Assemble the base call number from the classification and the Cutters, placing subfield
' $b according to the number of Cutters.

If CallNumberArray( 3 ) = "" Then
    CallNumberFormatted$ = ClassNumber$ & " " & DELIMITER_B & " " & CallNumberArray( 2 )
  Else
    CallNumberFormatted$ = ClassNumber$ & CallNumberArray( 2 ) & " " & DELIMITER_B & " " & CallNumberArray( 3 )
End If

' Compare the reconstructed, dateless string with the dateless call number formulated
' earlier, to determine if any formatting actually took place.

If CallNumberFormatted$ <> UCase( CallNumberNoDate$ ) Then
    HasBeenFormatted = TRUE
End If

' With the call number formatted, except for the date, check dates in the relevant areas
' of the record. Start with opening the fixed field and getting the date recorded there.
' Also from the fixed field, ascertain if the record describes a serial, as that
' information is important in determining whether to add a date to a call number that
' lacks one.

PosFF% = CS.FixedFieldPosition
If PosFF% <> DISPLAY_FF_AT_TOP Then
    CS.FixedFieldPosition = DISPLAY_FF_AT_TOP
    ChangedFFView         = TRUE
End If

If CS.GetFixedField( "Dates", DateStringFromFF$ ) Then
    TempString$ = DateStringFromFF$
    For i = 1 To 4
      If Mid$( TempString$, i, 1 ) = "u" Then
          Mid$( TempString$, i, 1 ) = "0"
      End If
    Next i
    DateValueInFF% = Val( TempString$ )
End If

If CS.GetFixedField( "BLvl", BLvl$ ) Then
    If BLvl$ = "s" Then
        ContinuingResource = TRUE
      Else
        ContinuingResource = FALSE
    End If
End If

If ChangedFFView Then CS.FixedFieldPosition = PosFF%

' Move on to examine a 110 or 111 field, if present. Get the date of a meeting or
' conference from subfield $d.

If CS.GetField( "11.", 1, FieldData$ ) Then
    CorpNamePresent = TRUE
    Tag11X$         = "field " & Left$( FieldData$, 3 )
    p = InStr( FieldData$, DELIMITER & "d" )
    If p > 0 Then
        q = InStr( p + 1, FieldData$, DELIMITER )
        If q > 0 Then
            TempString$ = Mid$( FieldData$, p + 2, q - p - 2 )
          Else
            TempString$ = Mid$( FieldData$, p + 2 )
        End If
        For i = 1 to Len( TempString$ ) - 4
          TestString$ = Mid$( TempString$, i, 4 )
          If TestString$ Like "[12][0126789][0-9][0-9]" Then
              DateStringFrom11X$ = TestString$
              DateValueIn11X%    = Val( DateStringFrom11X$ )
              Exit For
          End If
        Next i
    End If
  Else
    CorpNamePresent = FALSE
    DateValueIn11X% = 0
End If

' Finally, look for a date in the 260/264 fields. Get all the 260/264 fields in the
' record, putting the first one found of each type into the array in the order of
' priority for selecting a date appropriate for the call number: 260 first, then 264,
' starting with publication information. Assume that the 260 and 264 fields are
' mutually exclusive, i.e., both fields will not appear in one record.

i = 1
Do
  If CS.GetFieldUnicode( "26[04]", i, Field26X$ ) Then
      Field26XIndicator2$ = Mid$( Field26X$, 5, 1 )
      Select Case Field26XIndicator2$
        Case " "    '260 field
          If Field26XArray( 0 ) = "" Then
              Field26XArray( 0 ) = Field26X$
              CountOf260Fields%  = CountOf260Fields% + 1
          End If
        Case "1"
          If Field26XArray( 1 ) = "" Then
              Field26XArray( 1 ) = Field26X$
              CountOf264Fields%  = CountOf264Fields% + 1
          End If
        Case "4"
          If Field26XArray( 2 ) = "" Then
              Field26XArray( 2 ) = Field26X$
              CountOf264Fields%  = CountOf264Fields% + 1
          End If
        Case "0"
          If Field26XArray( 3 ) = "" Then
              Field26XArray( 3 ) = Field26X$
              CountOf264Fields%  = CountOf264Fields% + 1
          End If
        Case "3"
          If Field26XArray( 4 ) = "" Then
              Field26XArray( 4 ) = Field26X$
              CountOf264Fields%  = CountOf264Fields% + 1
          End If
        Case "2"
          If Field26XArray( 5 ) = "" Then
              Field26XArray( 5 ) = Field26X$
              CountOf264Fields%  = CountOf264Fields% + 1
          End If
        Case Else
          If Field26XArray( 6 ) = "" Then
              Field26XArray( 6 ) = Field26X$
              CountOf264Fields%  = CountOf264Fields% + 1
          End If
      End Select
      i = i + 1
    Else
      Exit Do
  End If
Loop Until i = 100

' Now go through the array, whose fields are in the preferred order for choosing a date,
' and take the first field with a date.

For i = 0 To 6
  TempString$ = Field26XArray( i )
  If TempString$ <> "" Then
      If VarType( First26X ) = EMPTY Then
          First26X = i
      End If

' In case the field is in Unicode, change the encoding of the delimiter sign to ASCII.

      Do
        p = InStr( TempString$, "&#x01C2;c" )
        If p <> 0 Then
            TempString$ = Left$( TempString$, p - 1 ) & DELIMITER_C & Mid$( TempString$, p + 9 )
        End If
      Loop Until p = 0

' Isolate subfield $c.

      p = InStr( TempString$, DELIMITER_C )
      If p <> 0 Then
          TempString$       = Trim$( Mid$( TempString$, p + 2 ) )
          LengthTempString% = Len( TempString$ )

' Go through subfield $c, examining four characters at a time, looking for a string in
' which the first digit is "1" or "2" and each of the remaining three characters is a
' digit or a hyphen. If the first four characters don't match the pattern, then go to
' characters 2-5, then 3-6, and so on.

          If LengthTempString% > 3 Then
              i = 1
              Do
                TestString$ = Mid$( TempString$, i, 4 )

' If the pattern for a date is found, convert any hyphens to zeros and test the string to
' see if it's a valid date, that is, a date between 1451 and next year.

                If TestString$ Like "[1-2][-0456789][-0-9][-0-9]" Then
                    TestStringWithZeros$ = TestString$
                    Do
                      p = InStr( TestStringWithZeros$, "-" )
                      If p <> 0 Then
                          Mid$( TestStringWithZeros$, p, 1 ) = "0"
                          Uncertain                          = TRUE
                      End If
                    Loop Until p = 0
                    If Val( TestStringWithZeros$ ) > 1450 And Val( TestStringWithZeros$ ) < Year( Now() ) + 2 Then
                        If CountOfDatesIn26X% = 0 Then
                            DateStringFrom26X$ = TestString$
                            DateValueIn26X%    = Val( DateStringFrom26X$ )
                            CountOfDatesIn26X% = 1
                            i = i + 3
                          Else
                            CountOfDatesIn26X% = 2
                            Exit Do
                        End If
                        If LengthTempString% - i < 6 Then
                            Exit Do
                        End If
                      Else
                        If LengthTempString% - i < 6 Then Exit Do
                    End If
                End If
                i = i + 1
              Loop Until i >= LengthTempString%
          End If
      End If

' Check for the date being estimated by the presence of the string "[between" in the
' field. If the date ends in a zero, it will appear in the call number with a "z" suffix,
' unless a 11X field also appears.

      If InStr( TempString$, "[between" ) And Right$( DateStringFrom26X$, 1 ) = "0" Then
          Uncertain = TRUE
      End If

      If DateValueIn26X% > 0 Then
          Exit For
      End If
  End If
Next i

' Construct the text snippets for the message boxes to identify the source of the date
' used for the call number.

If CountOfDatesIn26X% = 1 Then
    Ordinal$ = ""
  Else
    Ordinal$ = " first"
End If
    If VarType( First26X ) <> EMPTY Then
        Field26X$ = Field26XArray( First26X )
    End If
Tag26X$ = Left$( Field26X$, 3 )

If CountOf260Fields% = 0 And CountOf264Fields% = 0 Then
    Tag26X$            = "26X"
    No26X              = TRUE
    DateValueIn26X%    = 0
  ElseIf CountOf260Fields% = 1 Then
    Tag26X$ = "field 260"
  ElseIf CountOf260Fields% > 1 Then
    Tag26X$ = "the first 260 field"
  ElseIf CountOf264Fields% > 0 Then
    Field26XIndicator2$ = Mid$( Field26X$, 5, 1 )
    If CountOf264Fields% = 1 Then
        Tag26X$ = "field 264"
      Else
        Select Case Field26XIndicator2$
          Case "0"
            Tag26X$ = "field 264_0 (production statement)"
          Case "1"
            Tag26X$ = "field 264_1 (publication statement)"
          Case "2"
            Tag26X$ = "field 264_2 (distribution statement)"
          Case "3"
            Tag26X$ = "field 264_3 (manufacture statement)"
          Case "4"
            Tag26X$ = "field 264_4 (copyright notice)"
          Case Else
            Tag26X$ = "field 264 (unknown or missing function)"
        End Select
    End If
    If Field26XIndicator2$ Like "[!01234]" Then
        SummaryMsgSources$ = "Field 264 has a problem with the second indicator."
    End If
End If

If Len( DateStringFromFF$ ) = 0 Or DateStringFromFF$ = "uuuu" Then DateStringFromFF$ = ""

' Make the 26X date and the fixed field date match.

If DateValueIn26X% > 0 And DateValueIn26X% <> DateValueInFF% Then
    If CS.SetFixedField ( "Dates", Trim$( Str$( DateValueIn26X% ) ) ) Then   'THIS IS ACTUALLY MORE COMPLEX
        If SummaryMsgActionTaken$ = "" Then
            SummaryMsgActionTaken$ = "The date in the fixed field has been changed to match the" & Ordinal$ & " date in " & Tag26X$ & "."
        End If
    End If
End If

' Prepare a summary of the presence or absence of dates in the 26X fields and the fixed
' field.

If No26X Then
    If DateValueInFF% = 0 Then
        SummaryMsgSources$ = "There are no 26X fields in the record and no date in the fixed field."
      Else
        SummaryMsgSources$ = "There are no 26X fields in the record."
    End If
  Else
    If DateValueIn26X% = 0 Then
        If DateValueInFF% = 0 Then
            SummaryMsgSources$ = "There is no date in " & Tag26X$ & ", nor in the fixed field."
          Else
            SummaryMsgSources$ = "There is no date in " & Tag26X$ & "."
        End If
    End If
End If

' With data in hand from the areas in the record that can contain relevant date
' information--an existing call number, the 260/264 fields, the fixed field, and a 11X
' field--compare them to determine whether the date in the call number needs to be added
' or changed, and what feedback to offer. The date of a conference or meeting is assigned
' the highest priority; next is the first date in the 260/264 field; a date in the fixed
' field will be used as a last resort. The fixed field will be changed to match the
' 260/264 field, if necessary.

If DateValueIn11X% > 0 Then
    CallNumberDateValue%  = DateValueIn11X%
    CallNumberDateSource$ = Tag11X$
  Else
    If DateValueIn26X% > 0 Then
        CallNumberDateValue%  = DateValueIn26X%
        CallNumberDateSource$ = Tag26X$
        If DateValueIn26X% <> DateValueInFF% Then
            If CS.SetFixedField( "Dates", NormalizeDate( DateStringFrom26X$, TO_U ) ) Then
                FFFix             = TRUE
                SummaryMsgActionTaken$ = "The date in the fixed field has been changed to match the" & Ordinal$ & " date in " & Tag26X$ & "."
            End If
        End If
      Else
        If DateValueInFF% > 0 Then
            CallNumberDateValue%  = DateValueInFF%
            CallNumberDateSource$ = "fixed"
          Else
            CallNumberDateValue% = 0
        End If
    End If
End If

' Then compare the date derived from the record with the date found in the call number
' (if any). Change the existing call number date, if necessary, or add the new call
' number, if appropriate.

If CallNumberDate$ = "" And CallNumberDateValue% = 0 Then

    GoTo Report:

  ElseIf CallNumberDate$ = "" And CallNumberDateValue% > 0 Then

    If ContinuingResource Then

' A date is automatically added to a call number, except if the bibliographic record is
' for a continuing resource, in which case it won't be added unless specifically directed
' to.

        If CallNumberDateSource$ = Tag26X$ Then
            SourceQuestion$ = "Add the date from the 26X field?"
          ElseIf CallNumberDateSource$ = "fixed" Then
            SourceQuestion$ = "There is no date in the 26X field. Add the date from the fixed field?"
        End If
        Answer% = MsgBox( SourceQuestion$, MSGBOX_SETUP, WaltsMacros$ )
        Select Case Answer%

          Case MSGBOX_RETURN_CANCEL
            Exit Sub

          Case MSGBOX_RETURN_NO
            GoTo Report:

        End Select
    End If

    CallNumberDate$      = Trim$( Str$( CallNumberDateValue% ) )
    CallNumberFormatted$ = CallNumberFormatted$ & " " & Trim$( Str$( CallNumberDateValue% ) )
    If CallNumberDateSource$ = "fixed" Then
        SummaryMsgActionTaken$ = "The date in the call number has been added from the fixed field."
    End If

  ElseIf CallNumberDate$ <> "" And CallNumberDateValue% = 0 Then

    CallNumberFormatted$ = CallNumberFormatted$ & " " & CallNumberDate$

  Else  'CallNumberDate$ <> "" And CallNumberDateValue% > 0

    If CallNumberDate$ = Trim$( Str$( CallNumberDateValue% ) ) Then
        CallNumberFormatted$ = CallNumberFormatted$ & " " & Trim$( Str$( CallNumberDateValue% ) )
      Else
        CallNumberFormatted$ = CallNumberFormatted$ & " " & Trim$( Str$( CallNumberDateValue% ) )
        If CallNumberDateSource$ = Tag11X$ Or ( CallNumberDateSource$ = Tag26X$ And FFFix = FALSE ) Then
            SummaryMsgActionTaken$ = "The date in the call number has been changed to match the date in " & CallNumberDateSource$ & "."
          ElseIf CallNumberDateSource$ = Tag26X$ And FFFix = TRUE Then
            SummaryMsgActionTaken$ = "The dates in the call number and the fixed field have been changed to match the" & Ordinal$ & " date in " & Tag26X$ & "."
          ElseIf CallNumberDateSource$ = "fixed" Then
            SummaryMsgActionTaken$ = "The date in the call number has been changed to match the date in the fixed field."
        End If
    End If
End If

' If one or more digits are unknown in the 260/264 date, add "z" at the end of the call
' number date, unless the presence of a 11X field indicates the item is from a corporate
' body.

If DateValueIn11X% = 0 Then
    If Uncertain Then
      If CorpNamePresent = FALSE Then
          If CallNumberWorkLetters$ <> "z" Then
              CallNumberFormatted$ = CallNumberFormatted$ & "z"
          End If
      End If
    End If
End If

Report:

' Set up the summary message. When displayed, this message contains three elements:
' Whether or not the base call number (exclusive of date) was formatted; the source of
' the date, if the date in the call number was changed, or added from elsewhere than a
' 260/264 field; and what issues with dates remain in the record, such as expected
' information lacking, or mismatches in dates. No message is displayed if the call number
' has simply been formatted, or if it had a date added and dates in the record all
' matched. A message is displayed if the macro concludes that the call number needs no
' manipulation, just to confirm that the macro indeed ran.

If CallNumberOriginal$ = Trim$( CallNumberFormatted$ & CallNumberWorkLetters$ ) Then
    If SummaryMsgActionTaken$ = "" Then
        SummaryMsgFormatting$ = "The call number looks OK to this macro. "
      Else
        SummaryMsgFormatting$  = "The call number looks OK to this macro, but--t"
        SummaryMsgActionTaken$ = Mid$( SummaryMsgActionTaken$, 2 )
    End If
    If SummaryMsgSources$ <> "" Then
        SummaryMsgSources$     = "However, t" & Mid$( SummaryMsgSources$, 2 )
    End If
  Else
    If HasBeenFormatted = FALSE Then
        SummaryMsgFormatting$ = "The call number looks OK to this macro"
        If SummaryMsgActionTaken$ <> "" Then
            SummaryMsgFormatting$  = SummaryMsgFormatting$ & ", but--t"
            SummaryMsgActionTaken$ = Mid$( SummaryMsgActionTaken$, 2 )
          Else
            SummaryMsgFormatting$ = SummaryMsgFormatting$ & "."
            If SummaryMsgSources$ <> "" Then
                SummaryMsgSources$ = "However, t" & Mid$( SummaryMsgSources$, 2 )
            End If
        End If
      Else
        SummaryMsgFormatting$ = ""
    End If

' Finally, construct the field, using the tag as found. Begin by checking the 040 for
' "DLC" to help determine the 1st indicator.

    If CS.GetField( "040", 1, FieldData$ ) Then
        p = InStr( FieldData$, "DLC" )
        If p = 0 Then
            CallNumberIndicator1$ = " "
        End If
    End If
    CallNumberFormatted$ = CallNumberFormatted$ & CallNumberWorkLetters$
    If PrecedingSubfields$ <> "" Then
        CallNumberFormatted$ = PrecedingSubfields$ & " " & DELIMITER & "a " & CallNumberFormatted$
    End If
    If SucceedingSubfields$ <> "" Then
        CallNumberFormatted$ = CallNumberFormatted$ & " " & SucceedingSubfields$
    End If

' Remove any double spaces.

    Do
      p = InStr( CallNumberFormatted$, "  " )
      If p > 0 Then
          CallNumberFormatted$ = Left$( CallNumberFormatted$, p - 1 ) & Mid$( CallNumberFormatted$, p + 1 )
      End If
    Loop Until p = 0

    If CallNumberTag$ = "050" Then
        CallNumberFormatted$ = CallNumberTag$ & CallNumberIndicator1$ & "4" & CallNumberFormatted$
      Else
        CallNumberFormatted$ = CallNumberTag$ & "  " & CallNumberFormatted$
    End If

' Add the new (formatted) field and delete the old (original) one.

    If CS.SetFieldLine( Row%, CallNumberFormatted$ ) = FALSE Then
        MsgBox "Sorry, could not add formatted call number.", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If

    CS.CursorRow = Row%

End If

' Copy the formatted string to the Clipboard, removing a delimiter "$b."

CallNumberCopied$ = CallNumberFormatted$
If Left$( CallNumberCopied$, 2 ) Like "0[59]" Then
    CallNumberCopied$ = Mid$( CallNumberCopied$, 6 )
End If
p = InStr( CallNumberCopied$, DELIMITER_B )
If p <> 0 Then
    CallNumberCopied$ = Trim$( Left$( CallNumberCopied$, p - 1 ) ) & " " & Trim$( Mid$( CallNumberCopied$, p + 2 ) )
End If
Clipboard.Clear
Clipboard.SetText CallNumberCopied$

' Display the summary message.

If SummaryMsgFormatting$ = "" And SummaryMsgActionTaken$ = "" And SummaryMsgSources$ = "" Then
  Else
    MsgBox SummaryMsgFormatting$ & SummaryMsgActionTaken$ & " " & SummaryMsgSources$, INFORMATION_MESSAGE, WaltsMacros$
End If

End Sub

'****************************************************************************************

Function NormalizeDate( InputString$, Which% ) As String

' This function converts the hyphen or letter "u" in a date string to the digit zero and
' vice versa, so a date in the fixed field that contains a letter can be properly
' compared to a date in a 260/264 field that contains a hyphen to denote an unknown
' digit (this is of course pre-RDA).

Dim TempString$

Dim p As Integer

TempString$ = InputString$

If Which% = TO_0 Then

    Do
      p = InStr( TempString$, "u" )
      If p <> 0 Then
          Mid$( TempString$, p, 1 ) = "0"
      End If
    Loop Until p = 0

    Do
      p = InStr( TempString$, "-" )
      If p <> 0 Then
          Mid$( TempString$, p, 1 ) = "0"
      End If
    Loop Until p = 0

  Else

    Do
      p = InStr( TempString$, "-" )
      If p <> 0 Then
          Mid$( TempString$, p, 1 ) = "u"
      End If
    Loop Until p = 0

End If

NormalizeDate = TempString$

End Function
'99038638

'MacroName:FieldCount.2023.03
'MacroDescription:Shows all fields in a bibliographic or authority record with their
' individual and total count, as well as the subject thesauri used in 6XX fields. Allows
' for filtering fields display by tag groups.
'
' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
'
' Last updated: 29 July 2023.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 3.1 and Windows 11 Enterprise & 64-bit
' Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works: Run the macro to list all the fields in a record (in strict numerical
' sequence), number of occurrences of each field, and total field count. To view and
' count all the fields (and their occurrences) in a group or range, enter numbers and Xs
' in the input box, using a hyphen to show a range:
'
'  5xx     lists all the 5XX fields.
'  65x     lists all the 65X fields.
'  700     lists the number of occurrences of the 700 field.
'  2xx-5xx lists all fields from 200 to 599.
'  -1xx    lists all 0XX and 1XX fields.
'  61x-    lists all the fields from 610 to 999.
'
' Empty fields, such as OCLC-supplied call number fields, are not included in the list or
' the count. If any fields are to be deleted upon export, as defined in "Settings," they
' are included in the list and the count, but are marked in the list by an asterisk.
'
' The different thesauri used in the 6XX fields, along with their occurrences, are
' shown in a separate list, if such fields are present.
'****************************************************************************************

Option Explicit
Option Compare Text

Declare Sub Build6XXArray( InString$ )
Declare Sub DeleteFieldsOnExport

Declare Function ValidateInput( InString$, RangeEnd% ) As String

Declare Function Dialog1ControlFunction( Id$, Action%, SVal& )

Global Const AUTHORITY              As Integer = 1
Global Const BIBLIOGRAPHIC          As Integer = 0
Global Const RANGE_BEGIN            As Integer = 0
Global Const RANGE_END              As Integer = 1
Global Const SUBSCRIPT_OUT_OF_RANGE As Integer = 9

Global SINGLE_QUOTE As String*1

Global CountOfFields%
Global ErrorMessage$
Global FieldsExcludedFromExport$
Global MatchPattern$
Global TypeOfRecord%
Global WaltsMacros$

Global ExportDelete

Global AllFields () As String
Global DelField  () As String
Global SubjFields() As String

'****************************************************************************************

Sub Main

Const CRITICAL_MESSAGE     As Integer = 16
Const DLG_STATEMENT_CANCEL As Integer = 102
Const SPACES               As Integer = 5

Dim CS As Object
On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Dim DELIMITER As String*1    : DELIMITER = Chr$( 223 )

Dim FieldCount$
Dim FieldData$
Dim Instances%
Dim Instructions$
Dim NotExported$
Dim RecordLine%
Dim RowCount%
Dim Spacer$
Dim Tag$
Dim TempString$
Dim TypeOfWindow%

Dim FoundField

Dim i As Integer, j As Integer, p As Integer

SINGLE_QUOTE  = Chr$( 039 )

Instructions$ = "Use " & SINGLE_QUOTE & "x" & SINGLE_QUOTE & " as a wildcard. Use a hyphen for a range of fields."
NotExported$  = "*Fields marked with an asterisk will be deleted upon export."
Spacer$       = Space$( SPACES )
WaltsMacros$  = "[Walt's macros] MacroTools:FieldCount"

ExportDelete  = FALSE

' Make sure this macro is running in a record, as opposed to a list.

TypeOfWindow% = CS.ItemType

Select Case TypeOfWindow%

  Case 0 To 2, 17, 19
    TypeOfRecord% = BIBLIOGRAPHIC

  Case 3 To 4, 14, 18, 20
    TypeOfRecord% = AUTHORITY

  Case Else
    MsgBox "Sorry, this macro works only in bibliographic or authority records!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub

End Select

' Determine if any fields are to be omitted when the record is exported.

DeleteFieldsOnExport

' Go through the record, making an array of all the fields encountered (sorting the
' fields along the way) and the total number of instances of each field. Although the
' content of each field is irrelevant, the "GetFieldLineUnicode" command is necessary
' because the plain "GetFieldLine" command fails when non-Latin scripts are encountered,
' not retrieving even the tag.

RecordLine% = 1
Do
  FoundField = CS.GetFieldUnicode( "...", RecordLine%, FieldData$ )
  If FoundField Then
      FieldData$ = Trim$( FieldData$ )
      If Len( FieldData$ ) <> 7 Or Mid$( FieldData$, 6, 1 ) <> DELIMITER Then
          Tag$ = Left$( FieldData$, 3 )
          If Left$( Tag$, 1 ) = "6" Then
              Build6XXArray( FieldData$ )
          End If
          If RecordLine% = 1 Then
              ReDim AllFields( 0 )
              AllFields( 0 ) = Tag$ & Spacer$ & "1"
            Else
              RowCount% = UBound( AllFields )
              For i = 0 To RowCount%
                If Tag$ = Left$( AllFields( i ), 3 ) Then
                    Instances%     = Val( Right$( AllFields( i ), 3 ) )
                    AllFields( i ) = Left$( AllFields( i ), 3 ) & Spacer$ & Trim$( Str$( Instances% + 1 ) )
                    Exit For
                  ElseIf Tag$ < Left$( AllFields( i ), 3 ) Then
                    ReDim Preserve AllFields( RowCount% + 1 )
                    For j = RowCount% + 1 To i + 1 Step -1
                      AllFields( j ) = AllFields( j - 1 )
                    Next j
                    AllFields( i ) = Tag$ & Spacer$ & "1"
                    Exit For
                  Else
                    If i = RowCount% Then
                        ReDim Preserve AllFields( RowCount% + 1 )
                        AllFields( RowCount% + 1 ) = Tag$ & Spacer$ & "1"
                    End If
                End If
              Next i
          End If
          CountOfFields% = CountOfFields% + 1
      End If
      RecordLine%    = RecordLine% + 1
  End If
Loop Until FoundField = FALSE

' Add an asterisk to the tag of those fields not included when exporting.

If FieldsExcludedFromExport$ <> "NONE" Then
    For i = 0 To RowCount%
      For j = 0 To UBound( DelField )
        TempString$ = AllFields( i )
        If Left$( TempString$, 3 ) = DelField( j ) Then
            Mid$( AllFields( i ), 4, 1 ) = "*"
            ExportDelete                 = TRUE
            Exit For
        End If
      Next j
    Next i
End If

' Run the dialog box, where the action happens.

Begin Dialog Dialog1Definition  168, 214, WaltsMacros$, .Dialog1ControlFunction
  OkButton       28, 190,  50,  14
  CancelButton   86, 190,  50,  14
  TextBox        96,  26,  60,  12,                          .InputBox
  Text           96,   6,  60,  16, "Show only tag groups:"
  ListBox        10,  26,  64, 144, "",                      .ListBoxAllFields
  ListBox        96, 113,  60,  52, SubjFields(),            .ListBox6XXThesauri
  Text           10,   6,  60,  16, FieldCount$,             .Summary
  Text           96,  40,  60,  32, Instructions$
  Text           96, 102,  60,   8, "Types of 6xx:",         .ListBox6XXLegend
  Text           10, 166, 100,  16, NotExported$,            .ExportNote
  GroupBox       84,   4,   1, 160, ""
  GroupBox       94,  89,  64,   1, ""
  Text           92,  90,  68,   4, ""
End Dialog

Dim CountFields As Dialog1Definition
On Error Resume Next
Dialog CountFields
If Err = DLG_STATEMENT_CANCEL Then Exit Sub

End Sub

'****************************************************************************************

Sub Build6XXArray( InString$ )

' This function builds an array of the thesauri used in the 6XX fields, as identified by
' the second indicator and the value in subfield $2 of each subject field.

Const SPACES                 As Integer = 10  'A separator to help dialog boxes look OK.

Dim CompareString$
Dim DELIMITER As String*1    : DELIMITER = Chr$( 223 )
Dim Ind2$
Dim Spacer$
Dim Tag%
Dim TempString$
Dim Thesaurus$
Dim ThesaurusCount%
Dim UB6XX%
Dim WorkString$

Dim i As Integer, j As Integer, p As Integer, q As Integer

WorkString$ = InString$

' Fill the array with the thesauri used, whether identified by the field's second
' indicator of the field or named in subfield $2. This subfield should always be the last
' in the field, but this routine checks for following data anyway.

Tag% = Val( Left$( WorkString$, 3 ) )
If ( Tag% > 599 And Tag% < 652 ) Or Tag% = 655 Then
    Ind2$ = Mid$( WorkString$, 5, 1 )

    Select Case Ind2$

      Case "0"
        Thesaurus$ = "lcsh"
      Case "1"
        Thesaurus$ = "lcac"
      Case "2"
        Thesaurus$ = "mesh"
      Case "3"
        Thesaurus$ = "nal"
      Case "4"
        Thesaurus$ = "unspec"
      Case "5"
        Thesaurus$ = "cash"
      Case "6"
        Thesaurus$ = "rvm"
      Case "7"
        GoTo GetSource:
      Case "8"
        Thesaurus$ = "sears"

    End Select

  ElseIf Tag% = 653 Then
    Thesaurus$ = "other"

  Else

GetSource:

    p = InStr( WorkString$, DELIMITER & "2" )
    If p <> 0 Then
        q = InStr( p + 1, WorkString$, DELIMITER )
        If q = 0 Then
            Thesaurus$ = Trim$( Mid$( WorkString$, p + 3 ) )
          Else
            Thesaurus$ = Trim$( Mid$( WorkString$, p + 3, q - ( p + 3 ) ) )
        End If
    End If
End If

' The spacing interval is a little different in this array than in the main.

Spacer$ = Space$( SPACES - Len( Thesaurus$ ) )

' Test to see if the 6XX array has been initialized. If it hasn't been, asking for its
' upper bound returns an error (error 9, "subscript out of range").

On Error Resume Next
UB6XX% = UBound( SubjFields )
If Err = SUBSCRIPT_OUT_OF_RANGE Then
    ReDim SubjFields( 0 )
    SubjFields( 0 ) = Thesaurus$ & Spacer$ & "1"
    Exit Sub
End If

' Build the array in a way similar to the way the main array was built, except don't sort
' it as it's built, so the terms appear in the same order as their first appearance in
' the record.

For i = 0 To UB6XX%
  TempString$    = SubjFields( i )
  CompareString$ = Trim$( Left$( TempString$, Len( TempString$ ) - 3 ) )
  If Thesaurus$ = CompareString$ Then
      ThesaurusCount% = Val( Right$( TempString$, 3 ) )
      SubjFields( i ) = CompareString$ & Spacer$ & Trim$( Str$( ThesaurusCount% + 1 ) )
      Exit For
    Else
      If i = UB6XX% Then
          ReDim Preserve SubjFields( UB6XX% + 1 )
          SubjFields( UB6XX% + 1 ) = Thesaurus$ & Spacer$ & "1"
      End If
  End If
Next i

End Sub

'****************************************************************************************

Sub DeleteFieldsOnExport

' If fields have been defined to be deleted when a record is exported, they are marked in
' the main array. First that list has to be established.

Const AUTHORITY            As Integer = 1
Const BIBLIOGRAPHIC        As Integer = 0
Const MAX_ATTEMPTS_ENVIRON As Integer = 128
Const NORMAL_FILE          As Integer = 0
Const NORMAL_FILE_ARCHIVE  As Integer = 32

Dim AppData$
Dim Attributes%
Dim CountOfDelFields%
Dim DOUBLE_QUOTE As String*1        : DOUBLE_QUOTE = Chr$( 034 )
Dim EnvironmentString$
Dim FieldString$
Dim FileNum%
Dim ItemKey$
Dim LengthDeleteString%
Dim LineRead$
Dim LowerEnd$
Dim OptionsXmlPath$
Dim Range%
Dim Tag$
Dim TempString$
Dim TypeOfRecord%
Dim UpperEnd$

Dim i As Integer, j As Integer, p As Integer

i = 1
Do
  EnvironmentString$ = Environ( i )
  If Left$( EnvironmentString$, 8 ) = "APPDATA=" Then
      AppData$ = Mid$( EnvironmentString$, 9 )
      Exit Do
  End If
  i = i + 1
Loop Until EnvironmentString$ = "" Or i > MAX_ATTEMPTS_ENVIRON
If i = 1 Or i > MAX_ATTEMPTS_ENVIRON Then GoTo NoPath:

' The complete path to the file is built by adding the information specified in the
' Connexion client documentation to the path to the user profile, obtained above.

OptionsXmlPath$ = AppData$ & "\OCLC\Connex\Profiles\MyProfile\Options.xml"

On Error GoTo NoPath:
Attributes% = GetAttr( OptionsXmlPath$ )

' In "Options.xml", get the list of fields to be deleted by finding the key that contains
' it. In the Connexion client, this list is found in the "Tools > Options... > Export"
' tab when the "Field Export Options..." button is clicked; there is a separate list for
' bibliographic and authority records. Read the file, a line at a time, by calling "Line
' Input" repeatedly. The line containing the term "ExportBibFieldsToDelete" (or
' "ExportAuthFieldsToDelete") holds the list of fields as the value of that item key. If
' no fields have been specified, the list is an empty string.

If Attributes% = NORMAL_FILE Or Attributes% = NORMAL_FILE_ARCHIVE Then
    FileNum% = FreeFile
    On Error GoTo NoPath:
    Open OptionsXmlPath$ For Input As #FileNum%
    Do Until Eof( FileNum% )
      Line Input #FileNum%, LineRead$
      If TypeOfRecord% = BIBLIOGRAPHIC Then
          ItemKey$ = DOUBLE_QUOTE & "ExportBibFieldsToDelete" & DOUBLE_QUOTE
        Else
          ItemKey$ = DOUBLE_QUOTE & "ExportAuthFieldsToDelete" & DOUBLE_QUOTE
      End If
      p = InStr( LineRead$, ItemKey$ )
      If p <> 0 Then
          p = InStr( LineRead$, "value=" )
          If p <> 0 Then
              FieldString$ = Mid$( LineRead$, p + 7 )
              p = InStr( FieldString$, DOUBLE_QUOTE )
              If p <> 0 Then
                  TempString$ = Left$( FieldString$, p - 1 )
              End If
              Exit Do
            Else
              GoTo NoPath:
          End If
      End If
    Loop
    Close
    Reset
    If p = 0 Then GoTo NoPath:
End If

NoPath:

' If a list has been found, begin processing by adding a comma to the end.

If TempString$ = "" Then
    FieldsExcludedFromExport$ = "NONE"
    Exit Sub
  Else
    TempString$ = TempString$ & ","
End If

' Remove spaces. (The client seems to do no checking or normalizing of input of these
' fields, so their validity and format are not assured.)

Do
  p = InStr( TempString$, " " )
  If p <> 0 Then
      TempString$ = Left$( TempString$, p - 1 ) & Mid$( TempString$, p + 1 )
  End If
Loop Until p = 0

' Make a simple array of the fields found in the list. A range of fields needs to be
' separated into its individual components.

CountOfDelFields%   = 0
LengthDeleteString% = Len( TempString$ )
i = 1
Do
  Tag$ = Mid$( TempString$, i, 4 )

  Select Case Right$( Tag$, 1 )

    Case ","
      ReDim Preserve DelField( CountOfDelFields% )
      DelField( CountOfDelFields% ) = Left$( Tag$, 3 )
      CountOfDelFields%             = CountOfDelFields% + 1

    Case "-"
      LowerEnd$ = Left$( Tag$, 3 )
      UpperEnd$ = Mid$( TempString$, i + 4, 3 )
      Range%    = ( Val( UpperEnd$ ) - Val( LowerEnd$ ) )
      ReDim Preserve DelField( CountOfDelFields% + Range% )
      For j = 0 To Range%
        DelField( CountOfDelFields% + j ) = Trim$( Str$( Val( LowerEnd$ ) + j ) )
      Next j
      i = i + 4
      CountOfDelFields% = CountOfDelFields% + Range% + 1

  End Select

  i = i + 4
Loop Until i >= LengthDeleteString%

FieldsExcludedFromExport$ = TempString$

End Sub

'****************************************************************************************

Function ValidateInput( InString$, EndOfRange% ) As String

' This function checks the input string for correctness. Too long a string returns a
' value of 1; the presence of non-digit characters returns a value of 2; a correctly-
' formed string returns a value of 30 plus the length of the input string.

Dim LengthInString%
Dim TempString$

ErrorMessage$   = "OK"
TempString$     = LCase$( InString$ )
LengthInString% = Len( TempString$ )

Select Case LengthInString%

  Case Is <> 3
    ErrorMessage$ = "Please enter only a three-character string consisting only of numbers and the wildcard " & SINGLE_QUOTE & "x" & SINGLE_QUOTE & "."
    Exit Function

  Case Else

    If TempString$ Like "x##" Then
        If EndOfRange% = RANGE_BEGIN Then
            MatchPattern$ = "xnn"
          Else
            ErrorMessage$ = "Sorry, this range is unsearchable."
            DlgFocus        "InputBox"
            Exit Function
        End If

      ElseIf TempString$ Like "xx#" Then
        If EndOfRange% = RANGE_BEGIN Then
            MatchPattern$ = "xxn"
          Else
            ErrorMessage$ = "Sorry, this range is unsearchable."
            DlgFocus        "InputBox"
            Exit Function
        End If

      ElseIf TempString$ Like "#x#" Then
        If EndOfRange% = RANGE_BEGIN Then
            MatchPattern$ = "nxn"
          Else
            ErrorMessage$ = "Sorry, this range is unsearchable."
            DlgFocus        "InputBox"
            Exit Function
        End If

      ElseIf TempString$ Like "x#x" Then
        If EndOfRange% = RANGE_BEGIN Then
            MatchPattern$ = "xnx"
          Else
            ErrorMessage$ = "Sorry, this range is unsearchable."
            DlgFocus        "InputBox"
            Exit Function
        End If

      ElseIf TempString$ Like "##x" Then
        MatchPattern$ = "nnx"
        If EndOfRange% = RANGE_BEGIN Then
            Mid$( TempString$, 3, 1 ) = "0"
          Else
            Mid$( TempString$, 3, 1 ) = "9"
        End If

      ElseIf TempString$ Like "#xx" Then
        MatchPattern$ = "nxx"
        If EndOfRange% = RANGE_BEGIN Then
            Mid$( TempString$, 2, 2 ) = "00"
          Else
            Mid$( TempString$, 2, 2 ) = "99"
        End If

      ElseIf TempString$ Like "###" Then
        ErrorMessage$ = "Use this text box to search for tag groups or ranges of tags. Use an " & SINGLE_QUOTE & "x" & SINGLE_QUOTE & " as a wildcard."
        DlgFocus        "InputBox"
        Exit Function

      Else
        ErrorMessage$ = "Please enter only digits. Use a hyphen for a range of tags and " & SINGLE_QUOTE & "x" & SINGLE_QUOTE & " for a wildcard."
        DlgFocus        "InputBox"
        Exit Function

    End If

End Select

ValidateInput = TempString$

End Function

'****************************************************************************************

Function Dialog1ControlFunction( Id$, Action%, SVal& )

Const CONTROL_CHANGE  As Integer = 2
Const INITIALIZE      As Integer = 1
Const INVISIBLE       As Integer = 0
Const KEEP_DLG_OPEN   As Integer = -1
Const VISIBLE         As Integer = 1
Const WARNING_MESSAGE As Integer = 48
Const WARNING_QUERY   As Integer = 32

Dim CandidateTag$
Dim CurrentField$
Dim Filter$
Dim HyphenPosition%
Dim InputCheck%
Dim InputString$
Dim LengthInputString%
Dim LowerEnd$
Dim MatchTag$
Dim SelectionCount%
Dim TempString$
Dim UpperEnd$
Dim Wildcard1%
Dim Wildcard2%

Dim Match                    : Match         = FALSE
Dim SublistExport            : SublistExport = FALSE

Dim i As Integer, j As Integer

Dim TagGroups() As String

Select Case Action%

  Case INITIALIZE

ReShow:

    DlgListBoxArray "ListBoxAllFields",   AllFields()
    If TypeOfRecord% = AUTHORITY Then
        DlgVisible      "ListBox6XXThesauri", INVISIBLE
        DlgVisible      "ListBox6XXLegend",   INVISIBLE
      Else
        On Error Resume Next
        i = UBound( SubjFields )
        If Err = SUBSCRIPT_OUT_OF_RANGE Then
            DlgVisible      "ListBox6XXThesauri", INVISIBLE
            DlgVisible      "ListBox6XXLegend",   INVISIBLE
        End If
    End If
    DlgText         "Summary",            "Number of fields in record: " & Trim$( Str$( CountOfFields% ) )
    If ExportDelete Then
        DlgVisible      "ExportNote",         VISIBLE
      Else
        DlgVisible      "ExportNote",         INVISIBLE
    End If


  Case CONTROL_CHANGE

' When the "OK" button is clicked, check for text in the input box. If the box is empty,
' the macro is done.

    If Id$ = "OK" Then
        InputString$       = Trim$( DlgText( "InputBox" ) )
        If InputString$ = "" Then DlgEnd 0
        LengthInputString% = Len( InputString$ )

' If there's a hyphen, use it to separate the two ends of the range, testing each end for
' proper input. If there's no hyphen, pretend there is one anyway, so each single entry
' is considered a range.

        HyphenPosition% = InStr( InputString$, "-" )

        Select Case HyphenPosition%

          Case 0
            LowerEnd$ = InputString$
            UpperEnd$ = InputString$

          Case 1
            LowerEnd$ = "001"
            UpperEnd$ = Mid$( InputString$, 2 )

          Case LengthInputString%
            LowerEnd$ = Left$( InputString$, LengthInputString% - 1 )
            UpperEnd$ = "999"

          Case Else
            LowerEnd$ = Left$( InputString$, HyphenPosition% - 1 )
            UpperEnd$ = Mid$( InputString$, HyphenPosition% + 1 )

        End Select

' Make sure the input value is valid--no more than three characters in each part, and
' only digits and the letter "x" as a wildcard.

        LowerEnd$ = ValidateInput( LowerEnd$, RANGE_BEGIN )
        If ErrorMessage$ <> "OK" Then
            MsgBox ErrorMessage$, WARNING_MESSAGE, WaltsMacros$
            GoTo KeepOpen:
        End If
        UpperEnd$ = ValidateInput( UpperEnd$, RANGE_END )
        If ErrorMessage$ <> "OK" Then
            MsgBox ErrorMessage$, WARNING_MESSAGE, WaltsMacros$
            GoTo KeepOpen:
        End If
        Filter$ = InputString$

' Now go through the original array and copy all tags that fall within the range
' specified by the input to the display array.

        For i = 0 To UBound( AllFields )
          CurrentField$ = AllFields( i )
          CandidateTag$ = Left$( CurrentField$, 3 )

          Select Case MatchPattern$

            Case "nnx", "nxx"
              If CandidateTag$ >= LowerEnd$ And CandidateTag$ <= UpperEnd$ Then
                  Match = TRUE
              End If

            Case "nxn"
              If Left$( CandidateTag$, 1 ) = Left$( LowerEnd$, 1 ) Then
                  For Wildcard1% = 0 To 9
                    MatchTag$ = Left$( LowerEnd$, 1 ) & Trim$( Str$( Wildcard1% ) ) & Right$( LowerEnd$, 1 )
                    If CandidateTag$ = MatchTag$ Then
                        Match = TRUE
                        Exit For
                    End If
                  Next Wildcard1%
              End If

            Case "xnn"
              For Wildcard1% = 0 To 9
                MatchTag$ = Trim$( Str$( Wildcard1% ) ) & Right$( LowerEnd$, 2 )
                If CandidateTag$ = MatchTag$ Then
                    Match = TRUE
                    Exit For
                End If
              Next Wildcard1%

            Case "xxn"
              For Wildcard1% = 0 To 99
                MatchTag$ = Trim$( Str$( Wildcard1% ) ) & Right$( LowerEnd$, 1 )
                If Len( MatchTag$ ) = 2 Then
                    MatchTag$ = "0" & MatchTag$
                End If
                If CandidateTag$ = MatchTag$ Then
                    Match = TRUE
                    Exit For
                End If
              Next Wildcard1%

            Case "xnx"
              For Wildcard1% = 0 To 9
                For Wildcard2% = 0 To 9
                  MatchTag$ = Trim$( Str$( Wildcard1% ) ) & Mid$( LowerEnd$, 2, 1 ) & Trim$( Str$( Wildcard2% ) )
                  If CandidateTag$ = MatchTag$ Then
                      Match = TRUE
                      Exit For
                  End If
                Next Wildcard2%
                If Match Then Exit For
              Next Wildcard1%

          End Select

' Then show those fields in the dialog box, along with a new count. Clear the input box
' so the next click of "OK" simply ends the macro.

          If Match Then
              ReDim Preserve TagGroups( j )
              TagGroups( j )  = CurrentField$
              If InStr( CurrentField$, "*" ) Then SublistExport = TRUE
              SelectionCount% = SelectionCount% + Val( Right$( CurrentField$, 3 ) )
              j = j + 1
          End If
          Match = FALSE
        Next i
        If j = 0 Then
            MsgBox "There are no fields in tag group " & Filter$ & "."
            DlgListBoxArray "ListBoxAllFields",   AllFields()
            DlgText         "Summary",            "Number of fields in record: " & Trim$( Str$( CountOfFields% ) )
          Else
            DlgListBoxArray "ListBoxAllFields",   TagGroups()
            DlgText         "Summary",            "Number of fields in tag group " & Filter$ & ": " & Trim$( Str$( SelectionCount% ) )
            If SublistExport Then
                DlgVisible      "ExportNote",         VISIBLE
              Else
                DlgVisible      "ExportNote",         INVISIBLE
            End If
        End If
        DlgText         "InputBox",           ""
        DlgFocus        "OK"

KeepOpen:

        Dialog1ControlFunction = KEEP_DLG_OPEN

    End If

End Select

End Function
'7792557'
'Macro name: FieldCount
'Macro book: C:\Users\wnickeson.UR\AppData\Roaming\OCLC\Connex\Macros\MacroTools.mbk
'Saved: 8/22/2023 10:04:39 AM using "MacroBookInspector" macro by Walter F. Nickeson.

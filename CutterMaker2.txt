'MacroName:CutterMaker2.2024.42
'MacroDescription:Creates an alphanumeric Cutter, or a numeric Cutter to fit into a
' specified range, for selected or copied text, with an option to paste the output
' directly into a call number field. Supplies a Cutter from LC's tables for regions,
' countries, U.S. states, and Canadian provinces.
'
' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
' https://orcid.org/0000-0003-0484-6938
'
' Thanks to Zhuo Pan at Duke University Libraries for helpful comments, although all
' responsibility for this macro is mine alone.
'
' Last updated: 12 May 2024.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 3.1 and Windows 11 Enterprise & 64-bit
' Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works: Select a text string in a Connexion record and run the macro to generate
' a Cutter number derived from that string. Or, copy some text from any source to the
' Clipboard and run the macro to generate a Cutter from it. (Whatever its origin, all
' selected or copied text must be in the Latin alphabet.) Or, place the cursor in a
' subject heading field in a bibliographic record that contains a geographic entity or
' jurisdiction, and run the macro to retrieve LC's Cutter number for that entity. This
' feature of the macro works in a 651 field, and a 650 field that contains a subfield $z,
' but only for valid LC subjects (with second indicator "0") and only if that entity has
' had a Cutter established for it.
'
' This macro is designed to help quickly add information to a call number field, but it
' doesn't need to run with a bibliographic record open, as the Cutter it creates is put
' on the Clipboard for copying to any destination. However, if the macro is run in a
' bibliographic record, the macro offers to add the Cutter it creates to the end of one
' of the call number fields.
'
' For any selected text, the macro follows the guidelines in Classification and
' Shelflisting Manual (CSM) section G63, "Cutter Numbers" (July 2013) to generate a two-
' to four-character Cutter. It ignores case, punctuation, and diacritics in its
' calculation, and uses only the the first four alphanumeric characters of the selection.
' A space or a period will be considered by the macro to be the end of the selection.
' Some special characters are converted to their nearest Latin alphabet equivalents; for
' example, the letter "o" with slash ("ø") is considered to be a simple "o" by the macro.
' Text copied from outside Connexion--that is, text encoded in the Windows character set
' rather than in OCLC-MARC---that contains diacritical marks or special characters may
' produce wrong results. The default output of the macro is a Cutter consisting of the
' first letter of the selection, followed by one to four digits representing the
' succeeding characters. If the selection begins with a digit, or is composed of only
' digits, the macro creates a Cutter beginning with the letter "A" which will place it in
' the span A12-A19.

' The macro can also calculate a Cutter to fit into any range. Usually this will be a
' string of digits, rather than an alphanumeric string. For example, if the text selected
' is the word "general," the macro's default result is "G46", but it also offers the
' numeric string "4137." The macro offers shortcuts to fit Cutters into the specific
' ranges used in Table P-PZ40. For example, the Cutter for the word "apple" is "A67", but
' for a literature call number that uses that table, the other Cutters generated are
' "A882" (to fit into the range A61-A9999) and "Z552" (to fit into the range Z4581-
' Z9999). Similarly, the Cutter for the string "zither" may be "Z58," "Z271," and "Z99."
' But the macro can also generate a Cutter beginning with a letter to fit into any range.
'
' To fit a number into a range, enter up to four digits in each of the dialog box's two
' text input boxes, for the lower and upper limits of the range. If fewer than four
' digits are entered, the macro pads the number for the lower end of the range with
' zeros, and the number for the upper end with nines. For example, entering the range
' limits of "1" and "4" in the dialog box will generate a Cutter falling between 1000 and
' 4999 (see CSM section G58 (July 2013), "Interpreting the Classification Schedules"). To
' force the number generated to be only up to, but not including, "4", enter "4000" or
' "3999" as the upper limit. For example, to fit the word "Life" into the range allotted
' by LC Classification Table P-PZ38 for "Autobiography, journals, memoirs. By title",
' enter "8" and "829", as given in the table, as the upper and lower limits of the range,
' and run the macro to receive the suggestion "8152".
'
' The macro can also supply standard Cutters for many geographic areas and jurisdictions,
' as found in LC's "Regions and Countries Table" (CSM section G300, June 2019) or "U.S.
' States and Canadian Provinces" table (CSM section G302, July 2013). To retrieve one of
' these Cutters, run the macro in a bibliographic record with the cursor in a 650 or 651
' field that contains the place to be Cuttered. The field must be an LC subject heading;
' there is no need to select text. Besides providing Cutters for the 50 U.S. states and
' 13 Canadian provinces and territories, the tables also establish Cutters for "all 195
' independent countries as of 2019, 26 major dependencies and areas of special
' sovereignty, some historical jurisdictions or entities, and some islands." Three
' country names are ambiguous when they are used as qualifiers in field 651 and require
' user input to resolve; these names are Armenia, Congo, Korea, and Macedonia. The same
' qualifier is used for "Armenia" and "Armenia (Republic)," "Congo (Brazzaville)" and
' "Congo (Democratic Republic)," and "Korea" and "Korea (North)." For example, the
' established headings Anak-kun (Korea) and Anap Pond (Korea) refer to entities in North
' and South Korea, respectively--but of course the macro can't know which is which. So it
' displays a dialog box in order that the correct country can be chosen and the
' appropriate Cutter supplied. Similar examples can be found for the other three
' countries.
'
' If no text is selected, and the cursor is not in a subject heading field with a
' geographic entity or jurisdiction, or if a bibliographic record is not displayed, the
' macro will try to use whatever it finds on the Clipboard to create a Cutter.
'
' The macro uses a table of frequency of occurrence for letters in the English language
' to calculate a Cutter that must fit into a range. To set the range into which to fit
' the Cutter, the limits are padded to four digits as explained above, with zeros and
' nines, and then shrunk slightly to allow for modification at each end. Thus, although
' the limits of a range might be entered as 1-4, the range in which the macro does its
' calculation is actually 1200-4919, or a span of 3719. The process by which this happens
' is explained more fully below in the comments introducing the function
' "CalculateBaseCutter."
'
' It should go without saying that the Cutters produced by the macro are suggestions
' only, and should be rounded up or down, or shortened or lengthened, as appropriate, to
' fit into specific shelflists. Also, the macro may generate a Cutter that ends with "1",
' which LC recommends against, and which therefore should be omitted or considered for
' rounding to fit a particular situation. The macro will not produce a Cutter that ends
' with zero.
'
' After creating a Cutter, if a bibliographic record is open the macro shows a list of
' all the call number fields (050, 055, 060, 070, 090, and 099) in the record, in case
' you want to paste the Cutter at the end of one of them. If there are several such
' fields, the macro tries to present as the default selection a field which doesn't
' already have a Cutter; but this default suggestion may be ignored, and any call number
' field in the record may be selected. If the call number field ends with an empty
' subfield $b, the macro prefixes the Cutter with a decimal point; if there is no
' delimiter "b", the macro provides one; otherwise, it does not try to format the call
' number. Use my macro "FormatCallNumber" to quickly format the call number
' appropriately. Or, the Cutter may be copied to the Clipboard, for pasting into a field
' at a specific position, or into another application.
'****************************************************************************************

Option Explicit

Declare Sub FillArray1
Declare Sub FillArray2
Declare Sub FillArray3

Declare Function CalculateBaseCutter     ( SelectionString$, _
                                           RangeSpan% )        As Integer
Declare Function CalculateCutterWithRange( LowerEndOfRange%, _
                                           UpperEndOfRange%, _
                                           StringIn$, _
                                           OutputLength% )     As String
Declare Function CheckTerminalZero       ( InString$ )         As String
Declare Function CuttersForDigits        ( ASCIIValues% )      As String
Declare Function MakeUpperCase           ( InString$ )         As String
Declare Function RankFields              ( InString$ )         As Integer
Declare Function ShowCutterSource        ( GeogName$, _
                                           ArrayIndex%, _
                                           WhichArray% )       As String

Declare Function Dialog2ControlFunction( Id$, Action%, SVal& )
Declare Function Dialog1ControlFunction( Id$, Action%, SVal& )

Type FieldInfo
 tContent    As String
 tLineNumber As Integer
 tRank       As Integer
End Type

Global Const CONTROL_CHANGE       As Integer = 2
Global Const DLG_STATEMENT_CANCEL As Integer = 102
Global Const INITIALIZE           As Integer = 1
Global Const INVISIBLE            As Integer = 0

Global Const RANK_1               As Integer = 3   'Numeric values to rank call number fields so as to try to present a
Global Const RANK_2               As Integer = 2   'preferred default field for addition of the Cutter.
Global Const RANK_3               As Integer = 1

Global Const ABBREVS_LIST         As Integer = 58
Global Const REGIONS_LIST         As Integer = 383

Global DELIMITER    As String*1
Global DOUBLE_QUOTE As String*1

Global AmbigHdgIndex%
Global CountOfTopRank%
Global Cutter$
Global CutterSource$
Global DefaultSelection%
Global FirstCutter$
Global HelpHeading$
Global HelpSelection$
Global SelectionString$
Global WaltsMacros$

Global SelectionFound
Global StartsWithDigit

Global Abbrevs         ( 2, ABBREVS_LIST ) As String
Global AmbigRegions    ( 2 )               As String
Global CallNumberFields()                  As FieldInfo
Global Regions         ( 2, REGIONS_LIST ) As String

'****************************************************************************************

Sub Main
AmbigHdgIndex% = 0
Cutter$ = ""

Dim CS as Object
On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Const CRITICAL_MESSAGE            As Integer = 16
Const DLG_FUNCTION_CANCEL         As Integer = 0
Const FIXED_FIELD_COLUMN          As Integer = 0
Const INFORMATION_MESSAGE         As Integer = 64
Const MAX_SELECTION_LENGTH        As Integer = 4
Const MSGBOX_RETURN_CANCEL        As Integer = 2
Const MSGBOX_SETBUTTONS_OK_CANCEL As Integer = 1
Const PUSHBUTTON_ADD              As Integer = 1
Const PUSHBUTTON_CLOSE            As Integer = 2
Const WARNING_QUERY               As Integer = 32

Dim Abbreviation$
Dim AmbigHdgInfo$
Dim BibHeading$
Dim CharA%
Dim CharT$
Dim ClipboardError$
Dim CurrentCol%
Dim CurrentField As FieldInfo
Dim CurrentRow%
Dim DialogResult%
Dim FieldData$
Dim FieldRank%
Dim LineToChange%
Dim ListSelection%
Dim ModifiedSelection$
Dim QualifierString$
Dim QualifierTerm$
Dim QualifierTermMatch%
Dim RawSelection$
Dim Region$
Dim SearchString$
Dim SelectionLength%
Dim SelectionStringChar1$
Dim SelectionStringChar2%
Dim SelectionStringChar3%
Dim SelectionStringChar4%
Dim Tag$
Dim TempString$
Dim TestString$
Dim TypeOfWindow%
Dim UBCallNumberFields%

Dim BibRecord
Dim CursorInGeogHdg          : CursorInGeogHdg = FALSE
Dim FoundField
Dim MatchingEntry            : MatchingEntry   = FALSE

Dim i As Integer, j As Integer, p As Integer, x As Integer

Dim DisplayFields() As String

' The entries in the "AmbigRegions" array are strings of "fields." Each string consists
' of the ambiguous heading followed by the indexes in the "Regions" array of the two
' headings that share that term. Some headings that appear more than once in that array
' are really only different forms of the same name, and so have the same established
' Cutter.

AmbigRegions( 0 ) = "ARMENIA,36,239"
AmbigRegions( 1 ) = "CONGO,12,33"
AmbigRegions( 2 ) = "KOREA,95,348"

DELIMITER         = Chr$( 223 )
DOUBLE_QUOTE      = Chr$( 034 )
StartsWithDigit   = FALSE
WaltsMacros$      = "[Walt's macros] Essentials:CutterMaker2"

HelpSelection$    = "To fit a Cutter into a range, enter one to four digits in each of the two input boxes, from the lower "
HelpSelection$    = HelpSelection$ & "end of the range to the upper. If either number string contains fewer than four digits, "
HelpSelection$    = HelpSelection$ & "the macro will automatically pad it: A short number string in the input box for the "
HelpSelection$    = HelpSelection$ & "lower end of the range will be padded with zeros; for the upper end of the range, it "
HelpSelection$    = HelpSelection$ & "will be padded with nines. For example, entering " & DOUBLE_QUOTE & "2" & DOUBLE_QUOTE
HelpSelection$    = HelpSelection$ & " and " & DOUBLE_QUOTE & "3" & DOUBLE_QUOTE & " as the bounds of the range is "
HelpSelection$    = HelpSelection$ & "automatically considered by the macro to define a range from " & DOUBLE_QUOTE & "2000"
HelpSelection$    = HelpSelection$ & DOUBLE_QUOTE & " to " & DOUBLE_QUOTE & "3999" & DOUBLE_QUOTE & ", or a span of 1999. "
HelpSelection$    = HelpSelection$ & "To make the macro consider the upper end number to be an exclusive limit, either add "
HelpSelection$    = HelpSelection$ & "zeros or enter a number one lower than the limit. For example, to find a Cutter between "
HelpSelection$    = HelpSelection$ & "2 and 3, but not greater than 3, enter " & DOUBLE_QUOTE & "2" & DOUBLE_QUOTE & " for "
HelpSelection$    = HelpSelection$ & "the lower end of the range, and either " & DOUBLE_QUOTE & "3000" & DOUBLE_QUOTE & " or "
HelpSelection$    = HelpSelection$ & DOUBLE_QUOTE & "2999" & DOUBLE_QUOTE & " as the upper limit. Note that you can enter the "
HelpSelection$    = HelpSelection$ & "same number in both boxes. For example, a range from " & DOUBLE_QUOTE & "5"
HelpSelection$    = HelpSelection$ & DOUBLE_QUOTE & " to " & DOUBLE_QUOTE & "5" & DOUBLE_QUOTE & " is considered by the macro "
HelpSelection$    = HelpSelection$ & "to be actually " & DOUBLE_QUOTE & "5000" & DOUBLE_QUOTE & " to " & DOUBLE_QUOTE & "5999"
HelpSelection$    = HelpSelection$ & DOUBLE_QUOTE & "."

HelpHeading$      = "Because no text was selected, the macro looked for a geographic area in the heading in which the cursor "
HelpHeading$      = HelpHeading$ & "is placed, and found an established Cutter for that geographic area from LC's tables. For "
HelpHeading$      = HelpHeading$ & "a string of areas, the macro takes for the source of the Cutter the first area, assuming "
HelpHeading$      = HelpHeading$ & "it is the top jurisdiction in the hierarchy. Because this is an established Cutter, it "
HelpHeading$      = HelpHeading$ & "cannot be modified."

' First, find out if a bibliographic record is displayed, although the macro doesn't need
' to run in one.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case 0 To 2, 17, 19
    BibRecord = TRUE
  Case Else
    BibRecord = FALSE
End Select

If BibRecord Then

' If the macro is running in a bibliographic record, get the row number of the line the
' cursor is in. Follow by checking for selected text in the record. If text is not
' selected (apart from the tag and indicator cells, which are automatically selected if
' the cursor is positioned in them), and the cursor is not in the fixed field, check if
' the cursor is in a field that could contain a geographic name or jurisdiction (fields
' 650 or 651), and if it is, go ahead and fill the arrays with the established Cutters
' derived from the LC tables. If the cursor is not in one of those fields, check if text
' is on the Clipboard. If nothing is available from which a Cutter may be generated,
' display a warning and quit.

    CurrentRow% = CS.CursorRow
    CurrentCol% = CS.CursorColumn
    If CurrentCol% = FIXED_FIELD_COLUMN Then
        MsgBox "Please select text or place the cursor in a subject heading field with a geographic heading.", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If

    If CS.GetSelectedText( RawSelection$ ) Then
        If CurrentCol% < 6 Then
            SelectionFound = FALSE
          Else
            SelectionFound = TRUE
        End If
    End If

    If SelectionFound = FALSE Then
        If CS.GetField( "...", CurrentRow%, FieldData$ ) Then
            If FieldData$ = "Data contains non-latin script" Then
                MsgBox "Sorry, this macro doesn't work in a field containing non-Latin script.", CRITICAL_MESSAGE, WaltsMacros$
                Exit Sub
              Else
                Tag$ = Left$( FieldData$, 3 )
                If Mid$( FieldData$, 5, 1 ) = "0" Then
                    TempString$ = Trim$( Mid$( FieldData$, 6 ) )
                    Select Case Tag$

' For geographic headings, all that is needed to create a term to look for in the Cutter
' tables is the contents of subfield $a.

                      Case "651"

                        CursorInGeogHdg = TRUE
                        p               = InStr( TempString$, DELIMITER )
                        If p = 0 Then
                            BibHeading$ = TempString$
                          Else
                            BibHeading$ = Trim$( Left$( TempString$, p - 1 ) )
                        End If

' For topical headings, find the contents of the first subfield $z.

                      Case "650"

                        p = InStr( TempString$, DELIMITER & "z" )
                        If p = 0 Then
                            GoTo TryClipboard:
                          Else
                            CursorInGeogHdg = TRUE
                            TempString$     = Trim$( Mid$( TempString$, p + 2 ) )
                            p               = InStr( TempString$, DELIMITER )
                              If p = 0 Then
                                  BibHeading$ = TempString$
                                Else
                                  BibHeading$ = Trim$( Left$( TempString$, p - 1 ) )
                              End If
                        End If

                      Case Else

                        MsgBox "Please select text or place the cursor in a subject heading field with a geographic heading.", CRITICAL_MESSAGE, WaltsMacros$
                        Exit Sub

                    End Select
                  Else
                    MsgBox "Sorry, this macro works only in fields with LC subject headings.", CRITICAL_MESSAGE, WaltsMacros$
                    Exit Sub
                End If

                If Right$( BibHeading$, 1 ) = "." Then
                    BibHeading$ = Left$( BibHeading$, Len( BibHeading$ ) - 1 )
                End If

' Fill the arrays so the search may begin.

                FillArray1
                FillArray2
                FillArray3

' The search varies according to the tag in which the cursor is placed.

                Select Case Tag

                  Case "650"

' For topical subject headings with a geographic subdivision, the only array to search is
' "Regions"--such a subdivision will never start with a term in the "Abbrevs" array.
' There are no ambiguous terms in this search. The search string must be in all
' uppercase.

                    SearchString$ = MakeUpperCase( BibHeading$ )
                    For i = 0 To REGIONS_LIST
                      Region$ = Regions( 0, i )
                      If Left$( SearchString$, Len( Region$ ) ) = Region$ Then
                          Cutter$       = Regions( 1, i )
                          CutterSource$ = ShowCutterSource( Region$, i, REGIONS_LIST )
                          Exit For
                      End If
                    Next i
                    If Cutter$ = "" Then
                        MsgBox "Sorry, could not find a Cutter for " & DOUBLE_QUOTE & SearchString$ & DOUBLE_QUOTE & _
                               ". Please select text to Cutter instead.", CRITICAL_MESSAGE, WaltsMacros$
                        Exit Sub
                    End If

                  Case "651"

' For geographic headings, both arrays are searched, beginning with "Abbrevs." For this
' initial search, the abbreviation in the array has to match the string that begins the
' parenthetical qualifier, if present. Spaces within the abbreviation are closed, and
' case is mixed. If the qualifier includes a term that indicates the kind of place or
' jurisdiction, such as "Brighton (Mich. : Township)", the place is what precedes the
' (first) colon.

                    SearchString$ = BibHeading$
                    If Right$( SearchString$, 1 ) = ")" Then
                        p = InStr( SearchString$, "(" )
                        If p > 1 Then
                            SearchString$ = Mid$( SearchString$, p + 1, Len( SearchString$ ) - p - 1 )

' "Georgia" is a special case, being the only word that appears in both the "Abbrevs" and
' "Regions" arrays. However, it won't appear as a qualifier for a place in the U.S., so
' if it is detected within parentheses, it must be a qualifier for the republic.

                            If Right$( MakeUpperCase( SearchString$ ), 7 ) = "GEORGIA" Then
                                Cutter$       = "G28"
                                CutterSource$ = ShowCutterSource( "GEORGIA", 38, REGIONS_LIST )
                                GoTo ShowDialogBox:
                            End If
                            p = InStr( SearchString$, "," )
                            If p > 1 Then
                                SearchString$ = Trim$( Mid$( SearchString$, p + 1 ) )
                            End If
                        End If
                        Do
                          p = InStr( SearchString$, ". " )
                          If p > 0 Then
                              SearchString$ = Left$( SearchString$, p ) & Mid$( SearchString$, p + 2 )
                          End If
                        Loop Until p = 0
                    End If

                    For i = 0 To ABBREVS_LIST
                      Region$ = Abbrevs( 0, i )
                      x       = Len( Region$ )
                      If Region$ = Left$( SearchString$, x ) Or Region$ = Right$( SearchString$, x ) Then
                          Cutter$       = Abbrevs( 1, i )
                          CutterSource$ = ShowCutterSource( Region$, i, ABBREVS_LIST )
                          GoTo ShowDialogBox:
                      End If
                    Next i

' If the heading matches nothing in the "Abbrevs" array, go to the "Regions" array. Some
' of the entities have the same name and so are disambiguated by a parenthetical term.
' Check the headings against this list first. If the name appears on this list, display
' the choices for the user to choose the correct one. The search string is in uppercase,
' and the parenthetical qualifier is removed.

                    SearchString$ = MakeUpperCase( BibHeading$ )
                    p = InStr( SearchString$, "(" )
                    If p > 1 Then
                        SearchString$ = Trim$( Left$( SearchString$, p - 1 ) )
                    End If
                    For i = 0 To 2
                      AmbigHdgInfo$ = AmbigRegions( i )
                      TempString$   = GetField( AmbigHdgInfo$, 1, "," )
                      If SearchString$ = TempString$ Then
                          AmbigHdgIndex% = i
                          Exit For
                      End If
                    Next i

                    If AmbigHdgIndex% > 0 Then

                        Begin Dialog Dialog1Definition  184, 74, WaltsMacros$, .Dialog1ControlFunction
                            OkButton        62,  50,  52,  14
                            CancelButton   122,  50,  52,  14
                            Text            10,   6, 160,   8, "Select the appropriate country for this place:"
                            OptionGroup                            .OptionGroup1
                             OptionButton    1,  1,    1,   1, "", .OptionButtonDummy
                             OptionButton   16,  18, 158,  12, "", .OptionButton1
                             OptionButton   16,  30, 158,  12, "", .OptionButton2
                          End Dialog
                        Dim Dialog1 As Dialog1Definition
                        On Error Resume Next
                        Dialog Dialog1
                        If Err = DLG_STATEMENT_CANCEL Then Exit Sub
                        AmbigHdgIndex% = Dialog1.OptionGroup1
                        AmbigHdgIndex% = Val( GetField( AmbigHdgInfo$, AmbigHdgIndex% + 1, "," ) )
                        Cutter$        = Regions( 1, AmbigHdgIndex% )
                        Region$        = Regions( 0, AmbigHdgIndex% )
                        CutterSource$  = ShowCutterSource( Region$, AmbigHdgIndex%, REGIONS_LIST )

                      Else

                        SearchString$ = MakeUpperCase( BibHeading$ )
                        For i = 0 To REGIONS_LIST
                          Region$ = Regions( 0, i )
                          If Len( Region$ ) <= Len( SearchString$ ) Then
                              If InStr( SearchString$, Region$ ) Then
                                  MatchingEntry = TRUE
                                  Exit For
                                Else
                                  p = InStr( Region$, "(" )
                                  If p > 0 Then
                                      Region$ = Trim$( Left$( Region$, p - 1 ) )
                                  End If
                                  If Len( Region$ ) <= Len( SearchString$ ) Then
                                      If InStr( SearchString$, Region$ ) Then
                                          MatchingEntry = TRUE
                                          Exit For
                                      End If
                                  End If
                              End If
                          End If
                        Next i
                        If MatchingEntry Then
                            Cutter$ = Regions( 1, i )
                            CutterSource$ = ShowCutterSource( Region$, i, REGIONS_LIST )
                          Else
                            MsgBox "Sorry, could not find a Cutter for " & DOUBLE_QUOTE & SearchString$ & DOUBLE_QUOTE & _
                                   ". Please select text to Cutter instead.", CRITICAL_MESSAGE, WaltsMacros$
                            Exit Sub
                        End If
                    End If

                End Select
                If Cutter$ <> "" Then GoTo ShowDialogBox:
            End If
        End If
    End If
End If

' If there is nothing selected in the record, and the cursor is not in a heading field,
' or there is no record displayed at all, offer to generate a Cutter from the content of
' the Clipboard.

If SelectionFound = FALSE And ( BibRecord = FALSE Or CursorInGeogHdg = FALSE ) Then

TryClipboard:

    On Error Resume Next
    RawSelection$ = Clipboard.GetText()
    If Err > 0 Then
        ClipboardError$ = "There was a problem accessing the content of the Clipboard. Please check the copied text and try"
        ClipboardError$ = ClipboardError$ & " again, or select a text string and run the macro."
        MsgBox ClipboardError$, CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If
    If RawSelection$ = "" Then
        MsgBox "Please select text to Cutter!", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
      Else
        If Len( RawSelection$ ) > 16 Then
            RawSelection$ = Left$( RawSelection$, 16 ) & "... "
        End If
        If MsgBox( "Continue and generate Cutter from Clipboard contents " & DOUBLE_QUOTE & RawSelection$ & DOUBLE_QUOTE & "?", _
                   WARNING_QUERY + MSGBOX_SETBUTTONS_OK_CANCEL, WaltsMacros$ ) = MSGBOX_RETURN_CANCEL Then
            Exit Sub
          Else
            CutterSource$ = "Clipboard"
        End If
    End If
End If

' If a selection has been made in a Connexion record, check if the Client has warned
' about the presence of non-Latin characters in the selection or in the field in which
' the cursor is placed. A Cutter can't be calculated from those characters.

If TypeOfWindow% > -1 Then
    If RawSelection$ = "Data contains non-latin script" Then
        MsgBox "The selection contains non-latin script! Macro exiting.", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If
End If

' Modify the text string, if necessary, in order to calculate the Cutter. Start by
' converting the selection to uppercase, then go through it to get the first four
' alphanumeric characters. Discard punctuation (but stop at a period, considering it to
' mark the end of the selection) and diacritics, and change some special characters to
' simple ASCII equivalents. The macro can't tell where the selection comes from, but as
' it assumes OCLC-MARC, if the character encoding is something different, the result will
' probably be unexpected (and useless).

ModifiedSelection$ = Trim$( UCase$( RawSelection$ ) )

i = 1
SelectionLength% = 1
Do
  CharT$ = Mid$( ModifiedSelection$, i, 1 )
  CharA% = Asc( CharT$ )

  Select Case CharA%

' Keep track of digits in the selection. If the selection starts with a digit, a normal
' Cutter will begin with an "A". This will be the case whether the digit appears only as
' the first character (as in the ordinal "1st") or the selection is only digits (like
' "2001").

    Case 48 To 57, 65 to 90                'Normal A-Z
      SelectionString$ = SelectionString$ & CharT$
      SelectionLength% = SelectionLength% + 1
      If CharA% > 47 and CharA% < 58 Then  'Digits 0-9
          If i = 1 Then
              StartsWithDigit = TRUE
          End If
      End If
    Case 159                               'Letter "eszett"
      SelectionString$ = SelectionString$ & "SS"
      SelectionLength% = SelectionLength% + 2
    Case 161, 177, 190                     'Letter "L"
      SelectionString$ = SelectionString$ & "L"
      SelectionLength% = SelectionLength% + 1
    Case 162, 172, 178, 188                'Letter "O"
      SelectionString$ = SelectionString$ & "O"
      SelectionLength% = SelectionLength% + 1
    Case 163, 164, 179, 180, 186           'Letter "D"
      SelectionString$ = SelectionString$ & "D"
      SelectionLength% = SelectionLength% + 1
    Case 165, 181                          'Digraph "AE"
      SelectionString$ = SelectionString$ & "AE"
      SelectionLength% = SelectionLength% + 2
    Case 166, 182                          'Digraph "OE"
      SelectionString$ = SelectionString$ & "OE"
      SelectionLength% = SelectionLength% + 2
    Case 173, 189                          'Letter "U"
      SelectionString$ = SelectionString$ & "U"
      SelectionLength% = SelectionLength% + 1
    Case 184                               'Letter "I"
      SelectionString$ = SelectionString$ & "I"
      SelectionLength% = SelectionLength% + 1

' Space or period (full stop): assume that the end of the word has been reached.

    Case 32, 46
      Exit Do

' Ignore all other characters. If the first character is one that can't be used to
' generate a Cutter, such as the dollar sign in "$10,000", remove it from the string.

    Case Else
      If i = 1 Then
          ModifiedSelection$ = Mid$( ModifiedSelection$, 2 )
          i = 0
      End If

  End Select
  i = i + 1

Loop Until SelectionLength% >= 5 Or i > Len( ModifiedSelection$ )

' Does the selection begin with a digit? If so, prefix the string with "A".

If StartsWithDigit Then
    SelectionString$ = "A" & SelectionString$
    If Len( SelectionString$ ) > MAX_SELECTION_LENGTH Then
        SelectionString$ = Left$( SelectionString$, MAX_SELECTION_LENGTH )
    End If
End If

If Len( SelectionString$ ) > 1 Then
    SelectionStringChar1$ = Left$( SelectionString$, 1 )
    SelectionStringChar2% = Asc( Mid$( SelectionString$, 2, 1 ) )

' For a word of only one letter, arbitrarily assign the Cutter "12" to the letter.

  Else
    Cutter$ = SelectionString$ & "12"
    GoTo ShowDialogBox:
End If

If SelectionLength% > 3 Then
    SelectionStringChar3% = Asc( Mid$( SelectionString$, 3, 1 ) )
    SelectionStringChar4% = Asc( Right$( SelectionString$, 1 ) )
End If

' The first number (the second character) of the Cutter is determined by the first
' character, depending on whether that first character is a vowel, a consonant, or the
' letters Q and S.

Select Case SelectionStringChar1$

  Case "A", "E", "I", "O", "U"

    Select Case SelectionStringChar2%
      Case 48 To 57
        Cutter$ = SelectionStringChar1$ & "1" & CuttersForDigits( SelectionStringChar2% )
      Case 65 to 67
        Cutter$ = SelectionStringChar1$ & "2"
      Case 68 to 75
        Cutter$ = SelectionStringChar1$ & "3"
      Case 76 to 77
        Cutter$ = SelectionStringChar1$ & "4"
      Case 78 to 79
        Cutter$ = SelectionStringChar1$ & "5"
      Case 80 to 81
        Cutter$ = SelectionStringChar1$ & "6"
      Case 82
        Cutter$ = SelectionStringChar1$ & "7"
      Case 83 to 84
        Cutter$ = SelectionStringChar1$ & "8"
      Case 85 to 90
        Cutter$ = SelectionStringChar1$ & "9"
    End Select

  Case "S"

    Select Case SelectionStringChar2%
      Case 48 To 57
        Cutter$ = SelectionStringChar1$ & "1" & CuttersForDigits( SelectionStringChar2% )
      Case 65 to 66
        Cutter$ = SelectionStringChar1$ & "2"
      Case 67
        If SelectionStringChar3% = 72 Then
            Cutter$ = SelectionStringChar1$ & "3"
            Select Case SelectionStringChar4%
              Case 48 To 57
                Cutter$ = Cutter$ & "1" & CuttersForDigits( SelectionStringChar4% )
              Case 65 To 68
                Cutter$ = Cutter$ & "22"
              Case 69 To 72
                Cutter$ = Cutter$ & "24"
              Case 73 To 75
                Cutter$ = Cutter$ & "26"
              Case 76
                Cutter$ = Cutter$ & "28"
              Case 77
                Cutter$ = Cutter$ & "29"
              Case 78
                Cutter$ = Cutter$ & "32"
              Case 79 To 81
                Cutter$ = Cutter$ & "33"
              Case 82 to 84
                Cutter$ = Cutter$ & "35"
              Case 85 to 86
                Cutter$ = Cutter$ & "37"
              Case 87 to 90
                Cutter$ = Cutter$ & "38"
            End Select
        Else
            Cutter$ = SelectionStringChar1$ & "3"
        End If
      Case 68 to 69
        Cutter$ = SelectionStringChar1$ & "4"
      Case 70 to 76
        Cutter$ = SelectionStringChar1$ & "5"
      Case 77 to 82
        Cutter$ = SelectionStringChar1$ & "6"
      Case 83 to 84
        Cutter$ = SelectionStringChar1$ & "7"
      Case 85
        Cutter$ = SelectionStringChar1$ & "8"
      Case 86 to 90
        Cutter$ = SelectionStringChar1$ & "9"
    End Select

  Case "Q"

    If SelectionStringChar2% = 85 Then
        Select Case SelectionStringChar3%
          Case 48 To 57
            Cutter$ = SelectionStringChar1$ & "1" & CuttersForDigits( SelectionStringChar3% )
          Case 65 to 68
            Cutter$ = SelectionStringChar1$ & "3"
          Case 69 to 72
            Cutter$ = SelectionStringChar1$ & "4"
          Case 73 to 78
            Cutter$ = SelectionStringChar1$ & "5"
          Case 79 to 81
            Cutter$ = SelectionStringChar1$ & "6"
          Case 82 to 83
            Cutter$ = SelectionStringChar1$ & "7"
          Case 84 to 88
            Cutter$ = SelectionStringChar1$ & "8"
          Case 89 to 90
            Cutter$ = SelectionStringChar1$ & "9"
        End Select
      ElseIf SelectionStringChar2% > 85 Then
        Cutter$ = SelectionStringChar1$ & "9"
        Select Case SelectionStringChar2%
          Case 48 To 57
            Cutter$ = Cutter$ & "1" & CuttersForDigits( SelectionStringChar2% )
          Case 65 to 68
            Cutter$ = Cutter$ & "3"
          Case 69 to 72
            Cutter$ = Cutter$ & "4"
          Case 73 to 75
            Cutter$ = Cutter$ & "5"
          Case 76 to 78
            Cutter$ = Cutter$ & "6"
          Case 79 to 81
            Cutter$ = Cutter$ & "7"
          Case 82 to 83
            Cutter$ = Cutter$ & "8"
          Case 84, 86 to 90
            Cutter$ = Cutter$ & "9"
        End Select
      Else
        Cutter$ = SelectionStringChar1$ & "2"
        Select Case SelectionStringChar2%
          Case 48 To 57
            Cutter$ = Cutter$ & "1" & CuttersForDigits( SelectionStringChar2% )
          Case 65 to 68
            Cutter$ = Cutter$ & "3"
          Case 69 to 72
            Cutter$ = Cutter$ & "4"
          Case 73 to 75
            Cutter$ = Cutter$ & "5"
          Case 76 to 78
            Cutter$ = Cutter$ & "6"
          Case 79 to 81
            Cutter$ = Cutter$ & "7"
          Case 82 to 83
            Cutter$ = Cutter$ & "8"
          Case 84, 86 to 90
            Cutter$ = Cutter$ & "9"
        End Select
    End If

  Case Else

    Select Case SelectionStringChar2%
      Case 48 To 57
        Cutter$ = SelectionStringChar1$ & "1" & CuttersForDigits( SelectionStringChar2% )
      Case 65 to 68
        Cutter$ = SelectionStringChar1$ & "3"
      Case 69 to 72
        Cutter$ = SelectionStringChar1$ & "4"
      Case 73 to 78
        Cutter$ = SelectionStringChar1$ & "5"
      Case 79 to 81
        Cutter$ = SelectionStringChar1$ & "6"
      Case 82 to 84
        Cutter$ = SelectionStringChar1$ & "7"
      Case 85 to 88
        Cutter$ = SelectionStringChar1$ & "8"
      Case 89 to 90
        Cutter$ = SelectionStringChar1$ & "9"
    End Select

End Select

' In this next part, if the word is three characters long, continue by selecting the next
' letter for expansion.

If SelectionLength% > 3 Then

    Select Case SelectionStringChar3%
      Case 48 To 57
        Cutter$ = Cutter$ & CuttersForDigits( SelectionStringChar3% )
      Case 65 to 68
        Cutter$ = Cutter$ & "3"
      Case 69 to 72
        Cutter$ = Cutter$ & "4"
      Case 73 to 76
        Cutter$ = Cutter$ & "5"
      Case 77 to 79
        Cutter$ = Cutter$ & "6"
      Case 80 to 83
        Cutter$ = Cutter$ & "7"
      Case 84 to 86
        Cutter$ = Cutter$ & "8"
      Case 87 to 90
        Cutter$ = Cutter$ & "9"
    End Select

End If

ShowDialogBox:

Cutter$      = Left$( Cutter$, MAX_SELECTION_LENGTH )
FirstCutter$ = Cutter$

' Make a list of all the relevant call number fields into which an alphanumeric Cutter
' can be pasted. Attempt to rank the fields for suitability of pasting the Cutter at the
' end of the field.

i = 1
Do
  FoundField = CS.GetField( "...", i, FieldData$ )
  If FoundField Then
      Tag$ = Left$( FieldData$, 3 )
      Select Case Tag$
        Case "050", "055", "060", "070", "090", "098", "099"
          With CurrentField
           .tContent    = Trim$( FieldData$ )
           .tRank       = RankFields( FieldData$ )
           .tLineNumber = i
          End With
          ReDim Preserve CallNumberFields( j )
          CallNumberFields( j ) = CurrentField
          j = j + 1
      End Select
  End If
  i = i + 1
Loop Until FoundField = FALSE

' If there are no call number fields, simply display the generated Cutter and quit.

If j = 0 Then
    Clipboard.Clear
    Clipboard.SetText Cutter$
    MsgBox "Cutter copied to Clipboard: " & Cutter$, INFORMATION_MESSAGE, WaltsMacros$
    Exit Sub
End If

UBCallNumberFields% = UBound( CallNumberFields )
ReDim DisplayFields( UBCallNumberFields% )

For i = 0 To UBCallNumberFields%
  TempString$ = CallNumberFields( i ).tContent

' Format each field for nice display. Change the delimiter to a dollar sign.

  Do
    p = InStr( TempString$, DELIMITER )
    If p > 0 Then
         TempString$ = Left$( TempString$, p - 1 ) & "$" & Mid$( TempString$, p + 1 )
    End If
  Loop Until p = 0

' Change the value blank for an indicator to underscore.

  For j = 4 To 5
    If Mid$( TempString$, j, 1 ) = " " Then
        Mid$( TempString$, j, 1 ) = "_"
    End If
  Next j
  DisplayFields( i ) = Left$( TempString$, 3 ) & "  " & Mid$( TempString$, 4, 2 ) & "  " & Mid$( TempString$, 6 )

' Keep track of which fields have highest rank; if there are two or more of them, the
' focus of the dialog box will be the list of fields--not the action pushbutton--so the
' arrow keys can quickly select the desired field from among the equally qualified
' candidates.

  If CallNumberFields( i ).tRank > FieldRank% Then
      FieldRank%        = CallNumberFields( i ).tRank
      CountOfTopRank%   = 1
      DefaultSelection% = i
    ElseIf CallNumberFields( i ).tRank = FieldRank% Then
      CountOfTopRank%   = CountOfTopRank% + 1
  End If
Next i

' Now the dialog box where all the action takes place can be run.

Begin Dialog Dialog2Definition  340, 110, WaltsMacros$, .Dialog2ControlFunction
  PushButton      10,  25,  80,  14, "&Add to selected field:",            .ButtonAdd
  PushButton      98,  25,  58,  14, "&Copy && close",                     .ButtonCopyClose
  CancelButton   278,  86,  52,  14
  TextBox        206,  18,  24,  12,                                       .InputBox1
  TextBox        242,  18,  24,  12,                                       .InputBox2
  PushButton     272,  18,  24,  12, "&Go",                                .ButtonGoRange
  PushButton     218,  86,  52,  14, "&Reset",                             .ButtonReset
  PushButton     304,  18,  16,  12, "&?",                                 .ButtonHelp
  ListBox         10,  44, 148,  44, DisplayFields(),                      .ListOfCallNumberFields
  TextBox         10,   8,  26,  12,                                       .CutterDisplay
  OptionGroup                                                              .OptionGroupCutterFormat
   OptionButton   40,   8,  56,  12, "Al&phanumeric",                      .OptionAlphanumeric
   OptionButton  100,   8,  56,  12, "&Numbers only",                      .OptionNumbersOnly
  OptionGroup                                                              .OptionGroupRanges
   OptionButton  174,  18,  30,  12, "",                                   .OptionGroupRangesDummy
   OptionButton  174,  18,  30,  12, "&From",                              .OptionCustomRange
   OptionButton  174,  48, 102,  12, "&Separate works (A61-Z458)",         .OptionPZSeparateWorks
   OptionButton  174,  62, 121,  12, "&Biography and criticism (Z5-Z999)", .OptionPZBiogCriticism
  GroupBox       166,   4, 164,  74, "Fit into range",                     .GBFitIntoRange
  GroupBox       166,   4, 164,  52, "Source of Cutter",                   .GBCutterSource
  GroupBox       166,  36, 164,  42, "Use Table P-PZ40",                   .GBUsePZTable
  Text           174,  15, 148,  32, "",                                   .CutterSourceText
  Text           232,  19,   8,   8, "to",                                 .To
  Text           167,  49, 161,  27, "",                                   .WarningArea
End Dialog

Dim Dialog2 as Dialog2Definition
On Error Resume Next
DialogResult% = Dialog( Dialog2 )

Select Case DialogResult%

  Case DLG_FUNCTION_CANCEL

    Exit Sub

  Case PUSHBUTTON_ADD

' If the Cutter is to be added to the end of the field, it needs to be prepared. Add a
' decimal if the Cutter is to appear in subfield $b. If there is no subfield $b present
' in the field, add one just to hold the Cutter.

    ListSelection% = Dialog2.ListOfCallNumberFields
    LineToChange%  = CallNumberFields( ListSelection% ).tLineNumber
    FieldData$     = CallNumberFields( ListSelection% ).tContent
    Tag$           = Left$( FieldData$, 3 )
    FieldRank%     = CallNumberFields( ListSelection% ).tRank
    If FieldRank% = RANK_1 Then
        CountOfTopRank% = CountOfTopRank% + 1
        If Tag$ = "099" Then
            Cutter$ = " ." & Cutter$
          Else
            If Right$( FieldData$, 2 ) = DELIMITER & "b" Then
                Cutter$ = " ." & Cutter$
              Else
                Cutter$ = " " & DELIMITER & "b ." & Cutter$
            End If
        End If
      Else
        If Right$( Trim$( FieldData$ ), 2 ) = DELIMITER & "b" Or Tag$ = "099" Then
            Cutter$ = " ." & Cutter$
        End If
    End If
    FieldData$ = FieldData$ & Cutter$
    If CS.SetFieldLine( LineToChange%, FieldData$) = FALSE Then
        MsgBox "Sorry, the macro failed to replace the field.", CRITICAL_MESSAGE, WaltsMacros$
    End If
    Exit Sub

  Case PUSHBUTTON_CLOSE

' "Copy & close" simply sets the Clipboard and ends the macro.

    Clipboard.Clear
    Clipboard.SetText Cutter$
    Exit Sub

End Select

End Sub

'****************************************************************************************

Sub FillArray1

' Three different procedures to fill the arrays, as trying to do it all in one would
' exceed OML's capacity.

' These arrays contain, with some adaptations, material in LC's "Regions and Countries
' Table" (Classification & Shelflisting Manual (CSM) section G300, June 2019) and "U.S.
' States and Canadian Provinces" table (CSM section G302, July 2013). The modifications
' are chiefly so the terms in the table match established headings in the Authority File,
' although the following four terms have had diacritical marks removed for ease of
' processing:
'
'   CURAÇAO
'   CÔTE D'IVOIRE
'   RÉUNION
'   TERRES AUSTRALES ET ANTARCTIQUES FRANÇAISES

Regions( 0, 0   ) = "TERRES AUSTRALES ET ANTARCTIQUES FRANCAISES"
Regions( 0, 1   ) = "EUROPEAN FREE TRADE ASSOCIATION COUNTRIES"
Regions( 0, 2   ) = "EUROPEAN ECONOMIC COMMUNITY COUNTRIES"
Regions( 0, 3   ) = "AUSTRAL ISLANDS (FRENCH POLYNESIA)"
Regions( 0, 4   ) = "PRUSSIA, EAST (POLAND AND RUSSIA)"
Regions( 0, 5   ) = "SAINT VINCENT AND THE GRENADINES"
Regions( 0, 6   ) = "MEXICAN-AMERICAN BORDER REGION"
Regions( 0, 7   ) = "SOUTHERN CONE OF SOUTH AMERICA"
Regions( 0, 8   ) = "MICRONESIA (FEDERATED STATES)"
Regions( 0, 9   ) = "AFRICA, FRENCH-SPEAKING WEST"
Regions( 0, 10  ) = "TOBAGO (TRINIDAD AND TOBAGO)"
Regions( 0, 11  ) = "UNITED STATES VIRGIN ISLANDS"
Regions( 0, 12  ) = "CONGO (DEMOCRATIC REPUBLIC)"
Regions( 0, 13  ) = "ISLANDS OF THE INDIAN OCEAN"
Regions( 0, 14  ) = "FORMER COMMUNIST COUNTRIES"
Regions( 0, 15  ) = "NEWFOUNDLAND AND LABRADOR"
Regions( 0, 16  ) = "CENTRAL AFRICAN REPUBLIC"
Regions( 0, 17  ) = "TURKS AND CAICOS ISLANDS"
Regions( 0, 18  ) = "FORMER SOVIET REPUBLICS"
Regions( 0, 19  ) = "BOSNIA AND HERZEGOVINA"
Regions( 0, 20  ) = "BRITISH VIRGIN ISLANDS"
Regions( 0, 21  ) = "COMMONWEALTH COUNTRIES"
Regions( 0, 22  ) = "NORTHWEST TERRITORIES"
Regions( 0, 23  ) = "SAINT KITTS AND NEVIS"
Regions( 0, 24  ) = "SAO TOME AND PRINCIPE"
Regions( 0, 25  ) = "DEVELOPING COUNTRIES"
Regions( 0, 26  ) = "NETHERLANDS ANTILLES"
Regions( 0, 27  ) = "PRINCE EDWARD ISLAND"
Regions( 0, 28  ) = "UNITED ARAB EMIRATES"
Regions( 0, 29  ) = "WEST INDIES, BRITISH"
Regions( 0, 30  ) = "AFRICA, SUB-SAHARAN"
Regions( 0, 31  ) = "ANTIGUA AND BARBUDA"
Regions( 0, 32  ) = "COMMUNIST COUNTRIES"
Regions( 0, 33  ) = "CONGO (BRAZZAVILLE)"
Regions( 0, 34  ) = "PERSIAN GULF REGION"
Regions( 0, 35  ) = "WEST INDIES, FRENCH"
Regions( 0, 36  ) = "ARMENIA (REPUBLIC)"
Regions( 0, 37  ) = "DOMINICAN REPUBLIC"
Regions( 0, 38  ) = "GEORGIA (REPUBLIC)"
Regions( 0, 39  ) = "WASHINGTON (STATE)"
Regions( 0, 40  ) = "AFRICA, NORTHEAST"
Regions( 0, 41  ) = "AFRICA, NORTHWEST"
Regions( 0, 42  ) = "BENELUX COUNTRIES"
Regions( 0, 43  ) = "EQUATORIAL GUINEA"
Regions( 0, 44  ) = "GALAPAGOS ISLANDS"
Regions( 0, 45  ) = "ISLAMIC COUNTRIES"
Regions( 0, 46  ) = "KERGUELEN ISLANDS"
Regions( 0, 47  ) = "MALAY ARCHIPELAGO"
Regions( 0, 48  ) = "QUEBEC (PROVINCE)"
Regions( 0, 49  ) = "WASHINGTON (D.C.)"
Regions( 0, 50  ) = "WESTERN AUSTRALIA"
Regions( 0, 51  ) = "AFRICA, SOUTHERN"
Regions( 0, 52  ) = "BALKAN PENINSULA"
Regions( 0, 53  ) = "BRITISH COLUMBIA"
Regions( 0, 54  ) = "BYZANTINE EMPIRE"
Regions( 0, 55  ) = "CAROLINE ISLANDS"
Regions( 0, 56  ) = "EUROPE, NORTHERN"
Regions( 0, 57  ) = "EUROPE, SOUTHERN"
Regions( 0, 58  ) = "FALKLAND ISLANDS"
Regions( 0, 59  ) = "FRENCH POLYNESIA"
Regions( 0, 60  ) = "MARSHALL ISLANDS"
Regions( 0, 61  ) = "NORTHERN IRELAND"
Regions( 0, 62  ) = "PAPUA NEW GUINEA"
Regions( 0, 63  ) = "AFRICA, CENTRAL"
Regions( 0, 64  ) = "AFRICA, EASTERN"
Regions( 0, 65  ) = "CENTRAL AMERICA"
Regions( 0, 66  ) = "CHANNEL ISLANDS"
Regions( 0, 67  ) = "EUROPE, CENTRAL"
Regions( 0, 68  ) = "EUROPE, EASTERN"
Regions( 0, 69  ) = "NORTH MACEDONIA"
Regions( 0, 70  ) = "SOLOMON ISLANDS"
Regions( 0, 71  ) = "AMERICAN SAMOA"
Regions( 0, 72  ) = "ARAB COUNTRIES"
Regions( 0, 73  ) = "ARCTIC REGIONS"
Regions( 0, 74  ) = "CANARY ISLANDS"
Regions( 0, 75  ) = "CARIBBEAN AREA"
Regions( 0, 76  ) = "CAYMAN ISLANDS"
Regions( 0, 77  ) = "CZECH REPUBLIC"
Regions( 0, 78  ) = "CZECHOSLOVAKIA"
Regions( 0, 79  ) = "ISLAMIC EMPIRE"
Regions( 0, 80  ) = "NORTH CAROLINA"
Regions( 0, 81  ) = "SAMOAN ISLANDS"
Regions( 0, 82  ) = "SOUTH CAROLINA"
Regions( 0, 83  ) = "SOUTHEAST ASIA"
Regions( 0, 84  ) = "SUDAN (REGION)"
Regions( 0, 85  ) = "VIRGIN ISLANDS"
Regions( 0, 86  ) = "AFRICA, NORTH"
Regions( 0, 87  ) = "ASIA, CENTRAL"
Regions( 0, 88  ) = "BALTIC STATES"
Regions( 0, 89  ) = "BRITISH ISLES"
Regions( 0, 90  ) = "COTE D'IVOIRE"
Regions( 0, 91  ) = "FAROE ISLANDS"
Regions( 0, 92  ) = "FRENCH GUIANA"
Regions( 0, 93  ) = "GREAT BRITAIN"
Regions( 0, 94  ) = "GUINEA-BISSAU"
Regions( 0, 95  ) = "KOREA (NORTH)"
Regions( 0, 96  ) = "LATIN AMERICA"
Regions( 0, 97  ) = "LIECHTENSTEIN"
Regions( 0, 98  ) = "MASSACHUSETTS"
Regions( 0, 99  ) = "NEW BRUNSWICK"
Regions( 0, 100 ) = "NEW CALEDONIA"
Regions( 0, 101 ) = "NEW HAMPSHIRE"
Regions( 0, 102 ) = "NORTH AMERICA"
Regions( 0, 103 ) = "SOUTH AMERICA"
Regions( 0, 104 ) = "UNITED STATES"
Regions( 0, 105 ) = "WEST VIRGINIA"
Regions( 0, 106 ) = "ZAMBEZI RIVER"
Regions( 0, 107 ) = "AFRICA, EAST"
Regions( 0, 108 ) = "AFRICA, WEST"
Regions( 0, 109 ) = "BURKINA FASO"
Regions( 0, 110 ) = "COOK ISLANDS"
Regions( 0, 111 ) = "NORTH DAKOTA"
Regions( 0, 112 ) = "PACIFIC AREA"
Regions( 0, 113 ) = "PENNSYLVANIA"
Regions( 0, 114 ) = "RHODE ISLAND"
Regions( 0, 115 ) = "SASKATCHEWAN"
Regions( 0, 116 ) = "SAUDI ARABIA"
Regions( 0, 117 ) = "SIERRA LEONE"
Regions( 0, 118 ) = "SOUTH AFRICA"
Regions( 0, 119 ) = "SOUTH DAKOTA"
Regions( 0, 120 ) = "SOVIET UNION"
Regions( 0, 121 ) = "TURKMENISTAN"
Regions( 0, 122 ) = "VATICAN CITY"
Regions( 0, 123 ) = "AFGHANISTAN"
Regions( 0, 124 ) = "AUSTRALASIA"
Regions( 0, 125 ) = "CONNECTICUT"
Regions( 0, 126 ) = "EL SALVADOR"
Regions( 0, 127 ) = "MACARONESIA"
Regions( 0, 128 ) = "MIDDLE EAST"
Regions( 0, 129 ) = "MISSISSIPPI"
Regions( 0, 130 ) = "NETHERLANDS"
Regions( 0, 131 ) = "NEW ZEALAND"
Regions( 0, 132 ) = "NOVA SCOTIA"
Regions( 0, 133 ) = "PHILIPPINES"
Regions( 0, 134 ) = "PUERTO RICO"
Regions( 0, 135 ) = "SAINT LUCIA"
Regions( 0, 136 ) = "SCANDINAVIA"
Regions( 0, 137 ) = "SOUTH SUDAN"
Regions( 0, 138 ) = "SWITZERLAND"
Regions( 0, 139 ) = "TIMOR-LESTE"
Regions( 0, 140 ) = "ANTARCTICA"
Regions( 0, 141 ) = "AZERBAIJAN"
Regions( 0, 142 ) = "BANGLADESH"
Regions( 0, 143 ) = "CABO VERDE"
Regions( 0, 144 ) = "CALIFORNIA"
Regions( 0, 145 ) = "COSTA RICA"
Regions( 0, 146 ) = "GUADELOUPE"
Regions( 0, 147 ) = "HISPANIOLA"
Regions( 0, 148 ) = "KAZAKHSTAN"
Regions( 0, 149 ) = "KYRGYZSTAN"
Regions( 0, 150 ) = "LUXEMBOURG"
Regions( 0, 151 ) = "MADAGASCAR"
Regions( 0, 152 ) = "MARTINIQUE"
Regions( 0, 153 ) = "MAURITANIA"
Regions( 0, 154 ) = "MICRONESIA"
Regions( 0, 155 ) = "MONTENEGRO"
Regions( 0, 156 ) = "MONTSERRAT"
Regions( 0, 157 ) = "MOZAMBIQUE"
Regions( 0, 158 ) = "NEW GUINEA"
Regions( 0, 159 ) = "NEW JERSEY"
Regions( 0, 160 ) = "NEW MEXICO"
Regions( 0, 161 ) = "SAN MARINO"
Regions( 0, 162 ) = "SEYCHELLES"
Regions( 0, 163 ) = "SOUTH ASIA"
Regions( 0, 164 ) = "TAJIKISTAN"
Regions( 0, 165 ) = "UZBEKISTAN"
Regions( 0, 166 ) = "YUGOSLAVIA"
Regions( 0, 167 ) = "ARGENTINA"
Regions( 0, 168 ) = "AUSTRALIA"
Regions( 0, 169 ) = "EAST ASIA"
Regions( 0, 170 ) = "GIBRALTAR"
Regions( 0, 171 ) = "GREENLAND"
Regions( 0, 172 ) = "GUATEMALA"
Regions( 0, 173 ) = "INDOCHINA"
Regions( 0, 174 ) = "INDONESIA"
Regions( 0, 175 ) = "JERUSALEM"
Regions( 0, 176 ) = "LITHUANIA"
Regions( 0, 177 ) = "LOUISIANA"
Regions( 0, 178 ) = "MACEDONIA"
Regions( 0, 179 ) = "MAURITIUS"
Regions( 0, 180 ) = "MELANESIA"
Regions( 0, 181 ) = "MINNESOTA"
Regions( 0, 182 ) = "NICARAGUA"
Regions( 0, 183 ) = "PALESTINE"
Regions( 0, 184 ) = "POLYNESIA"
Regions( 0, 185 ) = "SINGAPORE"
Regions( 0, 186 ) = "SRI LANKA"
Regions( 0, 187 ) = "TENNESSEE"
Regions( 0, 188 ) = "VENEZUELA"
Regions( 0, 189 ) = "WISCONSIN"
Regions( 0, 190 ) = "ANGUILLA"
Regions( 0, 191 ) = "ARKANSAS"
Regions( 0, 192 ) = "BARBADOS"
Regions( 0, 193 ) = "BOTSWANA"
Regions( 0, 194 ) = "BULGARIA"
Regions( 0, 195 ) = "CAMBODIA"
Regions( 0, 196 ) = "CAMEROON"
Regions( 0, 197 ) = "CAUCASUS"
Regions( 0, 198 ) = "COLOMBIA"
Regions( 0, 199 ) = "COLORADO"
Regions( 0, 200 ) = "DELAWARE"
Regions( 0, 201 ) = "DJIBOUTI"
Regions( 0, 202 ) = "DOMINICA"
Regions( 0, 203 ) = "ESWATINI"
Regions( 0, 204 ) = "ETHIOPIA"
Regions( 0, 205 ) = "HONDURAS"
Regions( 0, 206 ) = "ILLINOIS"
Regions( 0, 207 ) = "KENTUCKY"
Regions( 0, 208 ) = "KIRIBATI"
Regions( 0, 209 ) = "MALAYSIA"
Regions( 0, 210 ) = "MALDIVES"
Regions( 0, 211 ) = "MANITOBA"
Regions( 0, 212 ) = "MARYLAND"
Regions( 0, 213 ) = "MICHIGAN"
Regions( 0, 214 ) = "MISSOURI"
Regions( 0, 215 ) = "MONGOLIA"
Regions( 0, 216 ) = "NEBRASKA"
Regions( 0, 217 ) = "NEW YORK"
Regions( 0, 218 ) = "OKLAHOMA"
Regions( 0, 219 ) = "PAKISTAN"
Regions( 0, 220 ) = "PARAGUAY"
Regions( 0, 221 ) = "PORTUGAL"
Regions( 0, 222 ) = "SCOTLAND"
Regions( 0, 223 ) = "SLOVAKIA"
Regions( 0, 224 ) = "SLOVENIA"
Regions( 0, 225 ) = "SURINAME"
Regions( 0, 226 ) = "TANZANIA"
Regions( 0, 227 ) = "TASMANIA"
Regions( 0, 228 ) = "THAILAND"
Regions( 0, 229 ) = "TRINIDAD"
Regions( 0, 230 ) = "VIRGINIA"
Regions( 0, 231 ) = "ZIMBABWE"
Regions( 0, 232 ) = "ALABAMA"
Regions( 0, 233 ) = "ALBANIA"
Regions( 0, 234 ) = "ALBERTA"
Regions( 0, 235 ) = "ALGERIA"
Regions( 0, 236 ) = "AMERICA"
Regions( 0, 237 ) = "ANDORRA"
Regions( 0, 238 ) = "ARIZONA"
Regions( 0, 239 ) = "ARMENIA"
Regions( 0, 240 ) = "AUSTRIA"
Regions( 0, 241 ) = "BAHAMAS"
Regions( 0, 242 ) = "BAHRAIN"
Regions( 0, 243 ) = "BARBUDA"
Regions( 0, 244 ) = "BELARUS"
Regions( 0, 245 ) = "BELGIUM"
Regions( 0, 246 ) = "BERMUDA"
Regions( 0, 247 ) = "BOLIVIA"
Regions( 0, 248 ) = "BONAIRE"
Regions( 0, 249 ) = "BURUNDI"
Regions( 0, 250 ) = "COMOROS"
Regions( 0, 251 ) = "CROATIA"
Regions( 0, 252 ) = "CURACAO"
Regions( 0, 253 ) = "DENMARK"
Regions( 0, 254 ) = "ECUADOR"
Regions( 0, 255 ) = "ENGLAND"
Regions( 0, 256 ) = "ERITREA"
Regions( 0, 257 ) = "ESTONIA"
Regions( 0, 258 ) = "EURASIA"
Regions( 0, 259 ) = "FINLAND"
Regions( 0, 260 ) = "FLORIDA"
Regions( 0, 261 ) = "GEORGIA"
Regions( 0, 262 ) = "GERMANY"
Regions( 0, 263 ) = "GRENADA"
Regions( 0, 264 ) = "HUNGARY"
Regions( 0, 265 ) = "ICELAND"
Regions( 0, 266 ) = "INDIANA"
Regions( 0, 267 ) = "IRELAND"
Regions( 0, 268 ) = "JAMAICA"
Regions( 0, 269 ) = "LEBANON"
Regions( 0, 270 ) = "LESOTHO"
Regions( 0, 271 ) = "LIBERIA"
Regions( 0, 272 ) = "MOLDOVA"
Regions( 0, 273 ) = "MONTANA"
Regions( 0, 274 ) = "MOROCCO"
Regions( 0, 275 ) = "NAMIBIA"
Regions( 0, 276 ) = "NIGERIA"
Regions( 0, 277 ) = "NUNAVUT"
Regions( 0, 278 ) = "OCEANIA"
Regions( 0, 279 ) = "ONTARIO"
Regions( 0, 280 ) = "PRUSSIA"
Regions( 0, 281 ) = "REUNION"
Regions( 0, 282 ) = "ROMANIA"
Regions( 0, 283 ) = "SENEGAL"
Regions( 0, 284 ) = "SOMALIA"
Regions( 0, 285 ) = "TROPICS"
Regions( 0, 286 ) = "TUNISIA"
Regions( 0, 287 ) = "UKRAINE"
Regions( 0, 288 ) = "URUGUAY"
Regions( 0, 289 ) = "VANUATU"
Regions( 0, 290 ) = "VERMONT"
Regions( 0, 291 ) = "VIETNAM"
Regions( 0, 292 ) = "WYOMING"
Regions( 0, 293 ) = "AFRICA"
Regions( 0, 294 ) = "ALASKA"
Regions( 0, 295 ) = "ANGOLA"
Regions( 0, 296 ) = "BELIZE"
Regions( 0, 297 ) = "BENGAL"
Regions( 0, 298 ) = "BHUTAN"
Regions( 0, 299 ) = "BRAZIL"
Regions( 0, 300 ) = "BRUNEI"
Regions( 0, 301 ) = "CANADA"
Regions( 0, 302 ) = "CYPRUS"
Regions( 0, 303 ) = "EUROPE"
Regions( 0, 304 ) = "FRANCE"
Regions( 0, 305 ) = "GAMBIA"
Regions( 0, 306 ) = "GREECE"
Regions( 0, 307 ) = "GUIANA"
Regions( 0, 308 ) = "GUINEA"
Regions( 0, 309 ) = "GUYANA"
Regions( 0, 310 ) = "HAWAII"
Regions( 0, 311 ) = "ISRAEL"
Regions( 0, 312 ) = "JORDAN"
Regions( 0, 313 ) = "KANSAS"
Regions( 0, 314 ) = "KOSOVO"
Regions( 0, 315 ) = "KUWAIT"
Regions( 0, 316 ) = "LATVIA"
Regions( 0, 317 ) = "MALAWI"
Regions( 0, 318 ) = "MEXICO"
Regions( 0, 319 ) = "MONACO"
Regions( 0, 320 ) = "NEVADA"
Regions( 0, 321 ) = "NORWAY"
Regions( 0, 322 ) = "OREGON"
Regions( 0, 323 ) = "PANAMA"
Regions( 0, 324 ) = "POLAND"
Regions( 0, 325 ) = "RUSSIA"
Regions( 0, 326 ) = "RWANDA"
Regions( 0, 327 ) = "SERBIA"
Regions( 0, 328 ) = "SWEDEN"
Regions( 0, 329 ) = "TAIWAN"
Regions( 0, 330 ) = "TURKEY"
Regions( 0, 331 ) = "TUVALU"
Regions( 0, 332 ) = "UGANDA"
Regions( 0, 333 ) = "ZAMBIA"
Regions( 0, 334 ) = "ARUBA"
Regions( 0, 335 ) = "BENIN"
Regions( 0, 336 ) = "BURMA"
Regions( 0, 337 ) = "CHILE"
Regions( 0, 338 ) = "CHINA"
Regions( 0, 339 ) = "EGYPT"
Regions( 0, 340 ) = "GABON"
Regions( 0, 341 ) = "GHANA"
Regions( 0, 342 ) = "HAITI"
Regions( 0, 343 ) = "IDAHO"
Regions( 0, 344 ) = "INDIA"
Regions( 0, 345 ) = "ITALY"
Regions( 0, 346 ) = "JAPAN"
Regions( 0, 347 ) = "KENYA"
Regions( 0, 348 ) = "KOREA"
Regions( 0, 349 ) = "LIBYA"
Regions( 0, 350 ) = "MAINE"
Regions( 0, 351 ) = "MALTA"
Regions( 0, 352 ) = "NAURU"
Regions( 0, 353 ) = "NEPAL"
Regions( 0, 354 ) = "NIGER"
Regions( 0, 355 ) = "PALAU"
Regions( 0, 356 ) = "QATAR"
Regions( 0, 357 ) = "SAHEL"
Regions( 0, 358 ) = "SAMOA"
Regions( 0, 359 ) = "SPAIN"
Regions( 0, 360 ) = "SUDAN"
Regions( 0, 361 ) = "SYRIA"
Regions( 0, 362 ) = "TEXAS"
Regions( 0, 363 ) = "TONGA"
Regions( 0, 364 ) = "WALES"
Regions( 0, 365 ) = "YEMEN"
Regions( 0, 366 ) = "YUKON"
Regions( 0, 367 ) = "ALPS"
Regions( 0, 368 ) = "ASIA"
Regions( 0, 369 ) = "CHAD"
Regions( 0, 370 ) = "CUBA"
Regions( 0, 371 ) = "FIJI"
Regions( 0, 372 ) = "GUAM"
Regions( 0, 373 ) = "IOWA"
Regions( 0, 374 ) = "IRAN"
Regions( 0, 375 ) = "IRAQ"
Regions( 0, 376 ) = "LAOS"
Regions( 0, 377 ) = "MALI"
Regions( 0, 378 ) = "OHIO"
Regions( 0, 379 ) = "OMAN"
Regions( 0, 380 ) = "PERU"
Regions( 0, 381 ) = "ROME"
Regions( 0, 382 ) = "TOGO"
Regions( 0, 383 ) = "UTAH"

End Sub

'****************************************************************************************

Sub FillArray2

' The third element of the first dimension of the array specifies the source of the
' Cutter. "A" means the "Regions and Countries Table" (CSM G300), "B" means the "U.S.
' States and Canadian Provinces" table (CSM G302)

Regions( 1, 0   ) = "T47"   : Regions( 2, 0   ) = "A"
Regions( 1, 1   ) = "E87"   : Regions( 2, 1   ) = "A"
Regions( 1, 2   ) = "E86"   : Regions( 2, 2   ) = "A"
Regions( 1, 3   ) = "T77"   : Regions( 2, 3   ) = "A"
Regions( 1, 4   ) = "P85"   : Regions( 2, 4   ) = "A"
Regions( 1, 5   ) = "S18"   : Regions( 2, 5   ) = "A"
Regions( 1, 6   ) = "M58"   : Regions( 2, 6   ) = "A"
Regions( 1, 7   ) = "S63"   : Regions( 2, 7   ) = "A"
Regions( 1, 8   ) = "M626"  : Regions( 2, 8   ) = "A"
Regions( 1, 9   ) = "A3545" : Regions( 2, 9   ) = "A"
Regions( 1, 10  ) = "T7"    : Regions( 2, 10  ) = "A"
Regions( 1, 11  ) = "V63"   : Regions( 2, 11  ) = "A"
Regions( 1, 12  ) = "C75"   : Regions( 2, 12  ) = "A"
Regions( 1, 13  ) = "I743"  : Regions( 2, 13  ) = "A"
Regions( 1, 14  ) = "C727"  : Regions( 2, 14  ) = "A"
Regions( 1, 15  ) = "N6"    : Regions( 2, 15  ) = "B"
Regions( 1, 16  ) = "C33"   : Regions( 2, 16  ) = "A"
Regions( 1, 17  ) = "T94"   : Regions( 2, 17  ) = "A"
Regions( 1, 18  ) = "F6"    : Regions( 2, 18  ) = "A"
Regions( 1, 19  ) = "B54"   : Regions( 2, 19  ) = "A"
Regions( 1, 20  ) = "V6"    : Regions( 2, 20  ) = "A"
Regions( 1, 21  ) = "C723"  : Regions( 2, 21  ) = "A"
Regions( 1, 22  ) = "N7"    : Regions( 2, 22  ) = "B"
Regions( 1, 23  ) = "S16"   : Regions( 2, 23  ) = "A"
Regions( 1, 24  ) = "S3"    : Regions( 2, 24  ) = "A"
Regions( 1, 25  ) = "D44"   : Regions( 2, 25  ) = "A"
Regions( 1, 26  ) = "N42"   : Regions( 2, 26  ) = "A"
Regions( 1, 27  ) = "P8"    : Regions( 2, 27  ) = "B"
Regions( 1, 28  ) = "U5"    : Regions( 2, 28  ) = "A"
Regions( 1, 29  ) = "W47"   : Regions( 2, 29  ) = "A"
Regions( 1, 30  ) = "A357"  : Regions( 2, 30  ) = "A"
Regions( 1, 31  ) = "A63"   : Regions( 2, 31  ) = "A"
Regions( 1, 32  ) = "C725"  : Regions( 2, 32  ) = "A"
Regions( 1, 33  ) = "C74"   : Regions( 2, 33  ) = "A"
Regions( 1, 34  ) = "P35"   : Regions( 2, 34  ) = "A"
Regions( 1, 35  ) = "W48"   : Regions( 2, 35  ) = "A"
Regions( 1, 36  ) = "A76"   : Regions( 2, 36  ) = "A"
Regions( 1, 37  ) = "D65"   : Regions( 2, 37  ) = "A"
Regions( 1, 38  ) = "G28"   : Regions( 2, 38  ) = "A"
Regions( 1, 39  ) = "W2"    : Regions( 2, 39  ) = "B"
Regions( 1, 40  ) = "A3553" : Regions( 2, 40  ) = "A"
Regions( 1, 41  ) = "A3554" : Regions( 2, 41  ) = "A"
Regions( 1, 42  ) = "B425"  : Regions( 2, 42  ) = "A"
Regions( 1, 43  ) = "E6"    : Regions( 2, 43  ) = "A"
Regions( 1, 44  ) = "G23"   : Regions( 2, 44  ) = "A"
Regions( 1, 45  ) = "I74"   : Regions( 2, 45  ) = "A"
Regions( 1, 46  ) = "K43"   : Regions( 2, 46  ) = "A"
Regions( 1, 47  ) = "M35"   : Regions( 2, 47  ) = "A"
Regions( 1, 48  ) = "Q3"    : Regions( 2, 48  ) = "B"
Regions( 1, 49  ) = "W18"   : Regions( 2, 49  ) = "B"
Regions( 1, 50  ) = "A8"    : Regions( 2, 50  ) = "A"
Regions( 1, 51  ) = "A356"  : Regions( 2, 51  ) = "A"
Regions( 1, 52  ) = "B28"   : Regions( 2, 52  ) = "A"
Regions( 1, 53  ) = "B8"    : Regions( 2, 53  ) = "B"
Regions( 1, 54  ) = "B97"   : Regions( 2, 54  ) = "A"
Regions( 1, 55  ) = "C275"  : Regions( 2, 55  ) = "A"
Regions( 1, 56  ) = "E853"  : Regions( 2, 56  ) = "A"
Regions( 1, 57  ) = "E854"  : Regions( 2, 57  ) = "A"
Regions( 1, 58  ) = "F3"    : Regions( 2, 58  ) = "A"
Regions( 1, 59  ) = "F93"   : Regions( 2, 59  ) = "A"
Regions( 1, 60  ) = "M433"  : Regions( 2, 60  ) = "A"
Regions( 1, 61  ) = "G7"    : Regions( 2, 61  ) = "A"
Regions( 1, 62  ) = "P26"   : Regions( 2, 62  ) = "A"
Regions( 1, 63  ) = "A352"  : Regions( 2, 63  ) = "A"
Regions( 1, 64  ) = "A354"  : Regions( 2, 64  ) = "A"
Regions( 1, 65  ) = "C35"   : Regions( 2, 65  ) = "A"
Regions( 1, 66  ) = "C48"   : Regions( 2, 66  ) = "A"
Regions( 1, 67  ) = "E8515" : Regions( 2, 67  ) = "A"
Regions( 1, 68  ) = "E852"  : Regions( 2, 68  ) = "A"
Regions( 1, 69  ) = "N74"   : Regions( 2, 69  ) = "A"
Regions( 1, 70  ) = "S575"  : Regions( 2, 70  ) = "A"
Regions( 1, 71  ) = "A46"   : Regions( 2, 71  ) = "A"
Regions( 1, 72  ) = "A65"   : Regions( 2, 72  ) = "A"
Regions( 1, 73  ) = "A68"   : Regions( 2, 73  ) = "A"
Regions( 1, 74  ) = "C23"   : Regions( 2, 74  ) = "A"
Regions( 1, 75  ) = "C27"   : Regions( 2, 75  ) = "A"
Regions( 1, 76  ) = "C29"   : Regions( 2, 76  ) = "A"
Regions( 1, 77  ) = "C94"   : Regions( 2, 77  ) = "A"
Regions( 1, 78  ) = "C95"   : Regions( 2, 78  ) = "A"
Regions( 1, 79  ) = "I742"  : Regions( 2, 79  ) = "A"
Regions( 1, 80  ) = "N8"    : Regions( 2, 80  ) = "B"
Regions( 1, 81  ) = "S24"   : Regions( 2, 81  ) = "A"
Regions( 1, 82  ) = "S6"    : Regions( 2, 82  ) = "B"
Regions( 1, 83  ) = "S644"  : Regions( 2, 83  ) = "A"
Regions( 1, 84  ) = "S74"   : Regions( 2, 84  ) = "A"
Regions( 1, 85  ) = "V6"    : Regions( 2, 85  ) = "A"
Regions( 1, 86  ) = "A355"  : Regions( 2, 86  ) = "A"
Regions( 1, 87  ) = "A783"  : Regions( 2, 87  ) = "A"
Regions( 1, 88  ) = "B29"   : Regions( 2, 88  ) = "A"
Regions( 1, 89  ) = "B65"   : Regions( 2, 89  ) = "A"
Regions( 1, 90 )  = "C85"   : Regions( 2, 90  ) = "A"
Regions( 1, 91  ) = "F32"   : Regions( 2, 91  ) = "A"
Regions( 1, 92  ) = "F9"    : Regions( 2, 92  ) = "A"
Regions( 1, 93  ) = "G7"    : Regions( 2, 93  ) = "A"
Regions( 1, 94  ) = "G93"   : Regions( 2, 94  ) = "A"
Regions( 1, 95  ) = "K7"    : Regions( 2, 95  ) = "A"
Regions( 1, 96  ) = "L29"   : Regions( 2, 96  ) = "A"
Regions( 1, 97  ) = "L76"   : Regions( 2, 97  ) = "A"
Regions( 1, 98  ) = "M4"    : Regions( 2, 98  ) = "B"
Regions( 1, 99  ) = "N5"    : Regions( 2, 99  ) = "B"
Regions( 1, 100 ) = "N425"  : Regions( 2, 100 ) = "A"
Regions( 1, 101 ) = "N4"    : Regions( 2, 101 ) = "B"
Regions( 1, 102 ) = "N7"    : Regions( 2, 102 ) = "A"
Regions( 1, 103 ) = "S63"   : Regions( 2, 103 ) = "A"
Regions( 1, 104 ) = "U6"    : Regions( 2, 104 ) = "A"
Regions( 1, 105 ) = "W4"    : Regions( 2, 105 ) = "B"
Regions( 1, 106 ) = "Z32"   : Regions( 2, 106 ) = "A"
Regions( 1, 107 ) = "A353"  : Regions( 2, 107 ) = "A"
Regions( 1, 108 ) = "A358"  : Regions( 2, 108 ) = "A"
Regions( 1, 109 ) = "B92"   : Regions( 2, 109 ) = "A"
Regions( 1, 110 ) = "C76"   : Regions( 2, 110 ) = "A"
Regions( 1, 111 ) = "N9"    : Regions( 2, 111 ) = "B"
Regions( 1, 112 ) = "P16"   : Regions( 2, 112 ) = "A"
Regions( 1, 113 ) = "P4"    : Regions( 2, 113 ) = "B"
Regions( 1, 114 ) = "R4"    : Regions( 2, 114 ) = "B"
Regions( 1, 115 ) = "S2"    : Regions( 2, 115 ) = "B"
Regions( 1, 116 ) = "S33"   : Regions( 2, 116 ) = "A"
Regions( 1, 117 ) = "S5"    : Regions( 2, 117 ) = "A"
Regions( 1, 118 ) = "S6"    : Regions( 2, 118 ) = "A"
Regions( 1, 119 ) = "S8"    : Regions( 2, 119 ) = "B"
Regions( 1, 120 ) = "S65"   : Regions( 2, 120 ) = "A"
Regions( 1, 121 ) = "T93"   : Regions( 2, 121 ) = "A"
Regions( 1, 122 ) = "V3"    : Regions( 2, 122 ) = "A"
Regions( 1, 123 ) = "A3"    : Regions( 2, 123 ) = "A"
Regions( 1, 124 ) = "A788"  : Regions( 2, 124 ) = "A"
Regions( 1, 125 ) = "C8"    : Regions( 2, 125 ) = "B"
Regions( 1, 126 ) = "S2"    : Regions( 2, 126 ) = "A"
Regions( 1, 127 ) = "M26"   : Regions( 2, 127 ) = "A"
Regions( 1, 128 ) = "M628"  : Regions( 2, 128 ) = "A"
Regions( 1, 129 ) = "M7"    : Regions( 2, 129 ) = "B"
Regions( 1, 130 ) = "N4"    : Regions( 2, 130 ) = "A"
Regions( 1, 131 ) = "N45"   : Regions( 2, 131 ) = "A"
Regions( 1, 132 ) = "N8"    : Regions( 2, 132 ) = "B"
Regions( 1, 133 ) = "P6"    : Regions( 2, 133 ) = "A"
Regions( 1, 134 ) = "P9"    : Regions( 2, 134 ) = "A"
Regions( 1, 135 ) = "S17"   : Regions( 2, 135 ) = "A"
Regions( 1, 136 ) = "S34"   : Regions( 2, 136 ) = "A"
Regions( 1, 137 ) = "S643"  : Regions( 2, 137 ) = "A"
Regions( 1, 138 ) = "S9"    : Regions( 2, 138 ) = "A"
Regions( 1, 139 ) = "T56"   : Regions( 2, 139 ) = "A"
Regions( 1, 140 ) = "A6"    : Regions( 2, 140 ) = "A"
Regions( 1, 141 ) = "A98"   : Regions( 2, 141 ) = "A"
Regions( 1, 142 ) = "B3"    : Regions( 2, 142 ) = "A"
Regions( 1, 143 ) = "C15"   : Regions( 2, 143 ) = "A"
Regions( 1, 144 ) = "C2"    : Regions( 2, 144 ) = "B"
Regions( 1, 145 ) = "C8"    : Regions( 2, 145 ) = "A"
Regions( 1, 146 ) = "G845"  : Regions( 2, 146 ) = "A"
Regions( 1, 147 ) = "H55"   : Regions( 2, 147 ) = "A"
Regions( 1, 148 ) = "K3"    : Regions( 2, 148 ) = "A"
Regions( 1, 149 ) = "K98"   : Regions( 2, 149 ) = "A"
Regions( 1, 150 ) = "L9"    : Regions( 2, 150 ) = "A"
Regions( 1, 151 ) = "M28"   : Regions( 2, 151 ) = "A"
Regions( 1, 152 ) = "M435"  : Regions( 2, 152 ) = "A"
Regions( 1, 153 ) = "M44"   : Regions( 2, 153 ) = "A"
Regions( 1, 154 ) = "M625"  : Regions( 2, 154 ) = "A"
Regions( 1, 155 ) = "M68"   : Regions( 2, 155 ) = "A"
Regions( 1, 156 ) = "M7"    : Regions( 2, 156 ) = "A"
Regions( 1, 157 ) = "M85"   : Regions( 2, 157 ) = "A"
Regions( 1, 158 ) = "N43"   : Regions( 2, 158 ) = "A"
Regions( 1, 159 ) = "N5"    : Regions( 2, 159 ) = "B"
Regions( 1, 160 ) = "N6"    : Regions( 2, 160 ) = "B"
Regions( 1, 161 ) = "S27"   : Regions( 2, 161 ) = "A"
Regions( 1, 162 ) = "S45"   : Regions( 2, 162 ) = "A"
Regions( 1, 163 ) = "S64"   : Regions( 2, 163 ) = "A"
Regions( 1, 164 ) = "T3"    : Regions( 2, 164 ) = "A"
Regions( 1, 165 ) = "U9"    : Regions( 2, 165 ) = "A"
Regions( 1, 166 ) = "Y8"    : Regions( 2, 166 ) = "A"
Regions( 1, 167 ) = "A7"    : Regions( 2, 167 ) = "A"
Regions( 1, 168 ) = "A8"    : Regions( 2, 168 ) = "A"
Regions( 1, 169 ) = "E18"   : Regions( 2, 169 ) = "A"
Regions( 1, 170 ) = "G5"    : Regions( 2, 170 ) = "A"
Regions( 1, 171 ) = "G83"   : Regions( 2, 171 ) = "A"
Regions( 1, 172 ) = "G9"    : Regions( 2, 172 ) = "A"
Regions( 1, 173 ) = "I48"   : Regions( 2, 173 ) = "A"
Regions( 1, 174 ) = "I5"    : Regions( 2, 174 ) = "A"
Regions( 1, 175 ) = "J4"    : Regions( 2, 175 ) = "A"
Regions( 1, 176 ) = "L78"   : Regions( 2, 176 ) = "A"
Regions( 1, 177 ) = "L8"    : Regions( 2, 177 ) = "B"
Regions( 1, 178 ) = "M27"   : Regions( 2, 178 ) = "A"
Regions( 1, 179 ) = "M45"   : Regions( 2, 179 ) = "A"
Regions( 1, 180 ) = "M5"    : Regions( 2, 180 ) = "A"
Regions( 1, 181 ) = "M6"    : Regions( 2, 181 ) = "B"
Regions( 1, 182 ) = "N5"    : Regions( 2, 182 ) = "A"
Regions( 1, 183 ) = "P19"   : Regions( 2, 183 ) = "A"
Regions( 1, 184 ) = "P75"   : Regions( 2, 184 ) = "A"
Regions( 1, 185 ) = "S55"   : Regions( 2, 185 ) = "A"
Regions( 1, 186 ) = "S72"   : Regions( 2, 186 ) = "A"
Regions( 1, 187 ) = "T2"    : Regions( 2, 187 ) = "B"
Regions( 1, 188 ) = "V4"    : Regions( 2, 188 ) = "A"
Regions( 1, 189 ) = "W6"    : Regions( 2, 189 ) = "B"
Regions( 1, 190 ) = "A54"   : Regions( 2, 190 ) = "A"
Regions( 1, 191 ) = "A8"    : Regions( 2, 191 ) = "B"
Regions( 1, 192 ) = "B35"   : Regions( 2, 192 ) = "A"
Regions( 1, 193 ) = "B55"   : Regions( 2, 193 ) = "A"
Regions( 1, 194 ) = "B9"    : Regions( 2, 194 ) = "A"
Regions( 1, 195 ) = "C16"   : Regions( 2, 195 ) = "A"
Regions( 1, 196 ) = "C17"   : Regions( 2, 196 ) = "A"
Regions( 1, 197 ) = "C28"   : Regions( 2, 197 ) = "A"
Regions( 1, 198 ) = "C7"    : Regions( 2, 198 ) = "A"
Regions( 1, 199 ) = "C6"    : Regions( 2, 199 ) = "B"
Regions( 1, 200 ) = "D3"    : Regions( 2, 200 ) = "B"
Regions( 1, 201 ) = "D5"    : Regions( 2, 201 ) = "A"
Regions( 1, 202 ) = "D6"    : Regions( 2, 202 ) = "A"
Regions( 1, 203 ) = "E77"   : Regions( 2, 203 ) = "A"
Regions( 1, 204 ) = "E8"    : Regions( 2, 204 ) = "A"
Regions( 1, 205 ) = "H8"    : Regions( 2, 205 ) = "A"
Regions( 1, 206 ) = "I3"    : Regions( 2, 206 ) = "B"
Regions( 1, 207 ) = "K4"    : Regions( 2, 207 ) = "B"
Regions( 1, 208 ) = "K5"    : Regions( 2, 208 ) = "A"
Regions( 1, 209 ) = "M4"    : Regions( 2, 209 ) = "A"
Regions( 1, 210 ) = "M415"  : Regions( 2, 210 ) = "A"
Regions( 1, 211 ) = "M3"    : Regions( 2, 211 ) = "B"
Regions( 1, 212 ) = "M3"    : Regions( 2, 212 ) = "B"
Regions( 1, 213 ) = "M5"    : Regions( 2, 213 ) = "B"
Regions( 1, 214 ) = "M8"    : Regions( 2, 214 ) = "B"
Regions( 1, 215 ) = "M65"   : Regions( 2, 215 ) = "A"
Regions( 1, 216 ) = "N2"    : Regions( 2, 216 ) = "B"
Regions( 1, 217 ) = "N7"    : Regions( 2, 217 ) = "B"
Regions( 1, 218 ) = "O5"    : Regions( 2, 218 ) = "B"
Regions( 1, 219 ) = "P18"   : Regions( 2, 219 ) = "A"
Regions( 1, 220 ) = "P3"    : Regions( 2, 220 ) = "A"
Regions( 1, 221 ) = "P8"    : Regions( 2, 221 ) = "A"
Regions( 1, 222 ) = "G7"    : Regions( 2, 222 ) = "A"
Regions( 1, 223 ) = "S56"   : Regions( 2, 223 ) = "A"
Regions( 1, 224 ) = "S57"   : Regions( 2, 224 ) = "A"
Regions( 1, 225 ) = "S75"   : Regions( 2, 225 ) = "A"
Regions( 1, 226 ) = "T34"   : Regions( 2, 226 ) = "A"
Regions( 1, 227 ) = "A8"    : Regions( 2, 227 ) = "A"
Regions( 1, 228 ) = "T5"    : Regions( 2, 228 ) = "A"
Regions( 1, 229 ) = "T7"    : Regions( 2, 229 ) = "A"
Regions( 1, 230 ) = "V8"    : Regions( 2, 230 ) = "B"
Regions( 1, 231 ) = "Z55"   : Regions( 2, 231 ) = "A"
Regions( 1, 232 ) = "A2"    : Regions( 2, 232 ) = "B"
Regions( 1, 233 ) = "A38"   : Regions( 2, 233 ) = "A"
Regions( 1, 234 ) = "A3"    : Regions( 2, 234 ) = "B"
Regions( 1, 235 ) = "A4"    : Regions( 2, 235 ) = "A"
Regions( 1, 236 ) = "A45"   : Regions( 2, 236 ) = "A"
Regions( 1, 237 ) = "A48"   : Regions( 2, 237 ) = "A"
Regions( 1, 238 ) = "A6"    : Regions( 2, 238 ) = "B"
Regions( 1, 239 ) = "A75"   : Regions( 2, 239 ) = "A"
Regions( 1, 240 ) = "A9"    : Regions( 2, 240 ) = "A"
Regions( 1, 241 ) = "B24"   : Regions( 2, 241 ) = "A"
Regions( 1, 242 ) = "B26"   : Regions( 2, 242 ) = "A"
Regions( 1, 243 ) = "A63"   : Regions( 2, 243 ) = "A"
Regions( 1, 244 ) = "B38"   : Regions( 2, 244 ) = "A"
Regions( 1, 245 ) = "B4"    : Regions( 2, 245 ) = "A"
Regions( 1, 246 ) = "B46"   : Regions( 2, 246 ) = "A"
Regions( 1, 247 ) = "B5"    : Regions( 2, 247 ) = "A"
Regions( 1, 248 ) = "B52"   : Regions( 2, 248 ) = "A"
Regions( 1, 249 ) = "B94"   : Regions( 2, 249 ) = "A"
Regions( 1, 250 ) = "C73"   : Regions( 2, 250 ) = "A"
Regions( 1, 251 ) = "C87"   : Regions( 2, 251 ) = "A"
Regions( 1, 252 ) = "C92"   : Regions( 2, 252 ) = "A"
Regions( 1, 253 ) = "D4"    : Regions( 2, 253 ) = "A"
Regions( 1, 254 ) = "E2"    : Regions( 2, 254 ) = "A"
Regions( 1, 255 ) = "G7"    : Regions( 2, 255 ) = "A"
Regions( 1, 256 ) = "E65"   : Regions( 2, 256 ) = "A"
Regions( 1, 257 ) = "E75"   : Regions( 2, 257 ) = "A"
Regions( 1, 258 ) = "E83"   : Regions( 2, 258 ) = "A"
Regions( 1, 259 ) = "F5"    : Regions( 2, 259 ) = "A"
Regions( 1, 260 ) = "F6"    : Regions( 2, 260 ) = "B"
Regions( 1, 261 ) = "G4"    : Regions( 2, 261 ) = "B"
Regions( 1, 262 ) = "G3"    : Regions( 2, 262 ) = "A"
Regions( 1, 263 ) = "G84"   : Regions( 2, 263 ) = "A"
Regions( 1, 264 ) = "H9"    : Regions( 2, 264 ) = "A"
Regions( 1, 265 ) = "I2"    : Regions( 2, 265 ) = "A"
Regions( 1, 266 ) = "I6"    : Regions( 2, 266 ) = "B"
Regions( 1, 267 ) = "I73"   : Regions( 2, 267 ) = "A"
Regions( 1, 268 ) = "J25"   : Regions( 2, 268 ) = "A"
Regions( 1, 269 ) = "L4"    : Regions( 2, 269 ) = "A"
Regions( 1, 270 ) = "L5"    : Regions( 2, 270 ) = "A"
Regions( 1, 271 ) = "L7"    : Regions( 2, 271 ) = "A"
Regions( 1, 272 ) = "M629"  : Regions( 2, 272 ) = "A"
Regions( 1, 273 ) = "M9"    : Regions( 2, 273 ) = "B"
Regions( 1, 274 ) = "M8"    : Regions( 2, 274 ) = "A"
Regions( 1, 275 ) = "N3"    : Regions( 2, 275 ) = "A"
Regions( 1, 276 ) = "N6"    : Regions( 2, 276 ) = "A"
Regions( 1, 277 ) = "N9"    : Regions( 2, 277 ) = "B"
Regions( 1, 278 ) = "O3"    : Regions( 2, 278 ) = "A"
Regions( 1, 279 ) = "O6"    : Regions( 2, 279 ) = "B"
Regions( 1, 280 ) = "G3"    : Regions( 2, 280 ) = "A"
Regions( 1, 281 ) = "R4"    : Regions( 2, 281 ) = "A"
Regions( 1, 282 ) = "R6"    : Regions( 2, 282 ) = "A"
Regions( 1, 283 ) = "S38"   : Regions( 2, 283 ) = "A"
Regions( 1, 284 ) = "S58"   : Regions( 2, 284 ) = "A"
Regions( 1, 285 ) = "T73"   : Regions( 2, 285 ) = "A"
Regions( 1, 286 ) = "T8"    : Regions( 2, 286 ) = "A"
Regions( 1, 287 ) = "U38"   : Regions( 2, 287 ) = "A"
Regions( 1, 288 ) = "U8"    : Regions( 2, 288 ) = "A"
Regions( 1, 289 ) = "V26"   : Regions( 2, 289 ) = "A"
Regions( 1, 290 ) = "V5"    : Regions( 2, 290 ) = "B"
Regions( 1, 291 ) = "V5"    : Regions( 2, 291 ) = "A"
Regions( 1, 292 ) = "W8"    : Regions( 2, 292 ) = "B"
Regions( 1, 293 ) = "A35"   : Regions( 2, 293 ) = "A"
Regions( 1, 294 ) = "A4"    : Regions( 2, 294 ) = "B"
Regions( 1, 295 ) = "A5"    : Regions( 2, 295 ) = "A"
Regions( 1, 296 ) = "B42"   : Regions( 2, 296 ) = "A"
Regions( 1, 297 ) = "B43"   : Regions( 2, 297 ) = "A"
Regions( 1, 298 ) = "B47"   : Regions( 2, 298 ) = "A"
Regions( 1, 299 ) = "B6"    : Regions( 2, 299 ) = "A"
Regions( 1, 300 ) = "B7"    : Regions( 2, 300 ) = "A"
Regions( 1, 301 ) = "C2"    : Regions( 2, 301 ) = "A"
Regions( 1, 302 ) = "C93"   : Regions( 2, 302 ) = "A"
Regions( 1, 303 ) = "E85"   : Regions( 2, 303 ) = "A"
Regions( 1, 304 ) = "F8"    : Regions( 2, 304 ) = "A"
Regions( 1, 305 ) = "G25"   : Regions( 2, 305 ) = "A"
Regions( 1, 306 ) = "G8"    : Regions( 2, 306 ) = "A"
Regions( 1, 307 ) = "G915"  : Regions( 2, 307 ) = "A"
Regions( 1, 308 ) = "G92"   : Regions( 2, 308 ) = "A"
Regions( 1, 309 ) = "G95"   : Regions( 2, 309 ) = "A"
Regions( 1, 310 ) = "H3"    : Regions( 2, 310 ) = "B"
Regions( 1, 311 ) = "I75"   : Regions( 2, 311 ) = "A"
Regions( 1, 312 ) = "J6"    : Regions( 2, 312 ) = "A"
Regions( 1, 313 ) = "K2"    : Regions( 2, 313 ) = "B"
Regions( 1, 314 ) = "K8"    : Regions( 2, 314 ) = "A"
Regions( 1, 315 ) = "K9"    : Regions( 2, 315 ) = "A"
Regions( 1, 316 ) = "L35"   : Regions( 2, 316 ) = "A"
Regions( 1, 317 ) = "M3"    : Regions( 2, 317 ) = "A"
Regions( 1, 318 ) = "M6"    : Regions( 2, 318 ) = "A"
Regions( 1, 319 ) = "M63"   : Regions( 2, 319 ) = "A"
Regions( 1, 320 ) = "N3"    : Regions( 2, 320 ) = "B"
Regions( 1, 321 ) = "N8"    : Regions( 2, 321 ) = "A"
Regions( 1, 322 ) = "O7"    : Regions( 2, 322 ) = "B"
Regions( 1, 323 ) = "P2"    : Regions( 2, 323 ) = "A"
Regions( 1, 324 ) = "P7"    : Regions( 2, 324 ) = "A"
Regions( 1, 325 ) = "R8"    : Regions( 2, 325 ) = "A"
Regions( 1, 326 ) = "R95"   : Regions( 2, 326 ) = "A"
Regions( 1, 327 ) = "S4"    : Regions( 2, 327 ) = "A"
Regions( 1, 328 ) = "S8"    : Regions( 2, 328 ) = "A"
Regions( 1, 329 ) = "T28"   : Regions( 2, 329 ) = "A"
Regions( 1, 330 ) = "T9"    : Regions( 2, 330 ) = "A"
Regions( 1, 331 ) = "T95"   : Regions( 2, 331 ) = "A"
Regions( 1, 332 ) = "U33"   : Regions( 2, 332 ) = "A"
Regions( 1, 333 ) = "Z33"   : Regions( 2, 333 ) = "A"
Regions( 1, 334 ) = "A77"   : Regions( 2, 334 ) = "A"
Regions( 1, 335 ) = "B45"   : Regions( 2, 335 ) = "A"
Regions( 1, 336 ) = "B93"   : Regions( 2, 336 ) = "A"
Regions( 1, 337 ) = "C5"    : Regions( 2, 337 ) = "A"
Regions( 1, 338 ) = "C6"    : Regions( 2, 338 ) = "A"
Regions( 1, 339 ) = "E3"    : Regions( 2, 339 ) = "A"
Regions( 1, 340 ) = "G2"    : Regions( 2, 340 ) = "A"
Regions( 1, 341 ) = "G4"    : Regions( 2, 341 ) = "A"
Regions( 1, 342 ) = "H2"    : Regions( 2, 342 ) = "A"
Regions( 1, 343 ) = "I2"    : Regions( 2, 343 ) = "B"
Regions( 1, 344 ) = "I4"    : Regions( 2, 344 ) = "A"
Regions( 1, 345 ) = "I8"    : Regions( 2, 345 ) = "A"
Regions( 1, 346 ) = "J3"    : Regions( 2, 346 ) = "A"
Regions( 1, 347 ) = "K4"    : Regions( 2, 347 ) = "A"
Regions( 1, 348 ) = "K6"    : Regions( 2, 348 ) = "A"
Regions( 1, 349 ) = "L75"   : Regions( 2, 349 ) = "A"
Regions( 1, 350 ) = "M2"    : Regions( 2, 350 ) = "B"
Regions( 1, 351 ) = "M43"   : Regions( 2, 351 ) = "A"
Regions( 1, 352 ) = "N32"   : Regions( 2, 352 ) = "A"
Regions( 1, 353 ) = "N35"   : Regions( 2, 353 ) = "A"
Regions( 1, 354 ) = "N55"   : Regions( 2, 354 ) = "A"
Regions( 1, 355 ) = "P185"  : Regions( 2, 355 ) = "A"
Regions( 1, 356 ) = "Q2"    : Regions( 2, 356 ) = "A"
Regions( 1, 357 ) = "S15"   : Regions( 2, 357 ) = "A"
Regions( 1, 358 ) = "S23"   : Regions( 2, 358 ) = "A"
Regions( 1, 359 ) = "S7"    : Regions( 2, 359 ) = "A"
Regions( 1, 360 ) = "S73"   : Regions( 2, 360 ) = "A"
Regions( 1, 361 ) = "S95"   : Regions( 2, 361 ) = "A"
Regions( 1, 362 ) = "T4"    : Regions( 2, 362 ) = "B"
Regions( 1, 363 ) = "T63"   : Regions( 2, 363 ) = "A"
Regions( 1, 364 ) = "G7"    : Regions( 2, 364 ) = "A"
Regions( 1, 365 ) = "Y4"    : Regions( 2, 365 ) = "A"
Regions( 1, 366 ) = "Y8"    : Regions( 2, 366 ) = "B"
Regions( 1, 367 ) = "A43"   : Regions( 2, 367 ) = "A"
Regions( 1, 368 ) = "A78"   : Regions( 2, 368 ) = "A"
Regions( 1, 369 ) = "C45"   : Regions( 2, 369 ) = "A"
Regions( 1, 370 ) = "C9"    : Regions( 2, 370 ) = "A"
Regions( 1, 371 ) = "F4"    : Regions( 2, 371 ) = "A"
Regions( 1, 372 ) = "G85"   : Regions( 2, 372 ) = "A"
Regions( 1, 373 ) = "I8"    : Regions( 2, 373 ) = "B"
Regions( 1, 374 ) = "I7"    : Regions( 2, 374 ) = "A"
Regions( 1, 375 ) = "I72"   : Regions( 2, 375 ) = "A"
Regions( 1, 376 ) = "L28"   : Regions( 2, 376 ) = "A"
Regions( 1, 377 ) = "M42"   : Regions( 2, 377 ) = "A"
Regions( 1, 378 ) = "O3"    : Regions( 2, 378 ) = "B"
Regions( 1, 379 ) = "O5"    : Regions( 2, 379 ) = "A"
Regions( 1, 380 ) = "P4"    : Regions( 2, 380 ) = "A"
Regions( 1, 381 ) = "R57"   : Regions( 2, 381 ) = "A"
Regions( 1, 382 ) = "T6"    : Regions( 2, 382 ) = "A"
Regions( 1, 383 ) = "U8"    : Regions( 2, 383 ) = "B"

End Sub

'****************************************************************************************

Sub FillArray3

Abbrevs( 0, 0  ) = "Calif." : Abbrevs( 1, 0  ) = "C2"  : Abbrevs( 2, 0  ) = "CALIFORNIA"
Abbrevs( 0, 1  ) = "N.W.T." : Abbrevs( 1, 1  ) = "N7"  : Abbrevs( 2, 1  ) = "NORTHWEST TERRITORIES"
Abbrevs( 0, 2  ) = "P.E.I." : Abbrevs( 1, 2  ) = "P8"  : Abbrevs( 2, 2  ) = "PRINCE EDWARD ISLAND"
Abbrevs( 0, 3  ) = "Alta."  : Abbrevs( 1, 3  ) = "A3"  : Abbrevs( 2, 3  ) = "ALBERTA"
Abbrevs( 0, 4  ) = "Ariz."  : Abbrevs( 1, 4  ) = "A6"  : Abbrevs( 2, 4  ) = "ARIZONA"
Abbrevs( 0, 5  ) = "Colo."  : Abbrevs( 1, 5  ) = "C6"  : Abbrevs( 2, 5  ) = "COLORADO"
Abbrevs( 0, 6  ) = "Conn."  : Abbrevs( 1, 6  ) = "C8"  : Abbrevs( 2, 6  ) = "CONNECTICUT"
Abbrevs( 0, 7  ) = "Mass."  : Abbrevs( 1, 7  ) = "M4"  : Abbrevs( 2, 7  ) = "MASSACHUSETTS"
Abbrevs( 0, 8  ) = "Mich."  : Abbrevs( 1, 8  ) = "M5"  : Abbrevs( 2, 8  ) = "MICHIGAN"
Abbrevs( 0, 9  ) = "Minn."  : Abbrevs( 1, 9  ) = "M6"  : Abbrevs( 2, 9  ) = "MINNESOTA"
Abbrevs( 0, 10 ) = "Miss."  : Abbrevs( 1, 10 ) = "M7"  : Abbrevs( 2, 10 ) = "MISSISSIPPI"
Abbrevs( 0, 11 ) = "Mont."  : Abbrevs( 1, 11 ) = "M9"  : Abbrevs( 2, 11 ) = "MONTANA"
Abbrevs( 0, 12 ) = "Okla."  : Abbrevs( 1, 12 ) = "O5"  : Abbrevs( 2, 12 ) = "OKLAHOMA"
Abbrevs( 0, 13 ) = "Sask."  : Abbrevs( 1, 13 ) = "S2"  : Abbrevs( 2, 13 ) = "SASKATCHEWAN"
Abbrevs( 0, 14 ) = "Tenn."  : Abbrevs( 1, 14 ) = "T2"  : Abbrevs( 2, 14 ) = "TENNESEE"
Abbrevs( 0, 15 ) = "W.Va."  : Abbrevs( 1, 15 ) = "W4"  : Abbrevs( 2, 15 ) = "WEST VIRGINIA"
Abbrevs( 0, 16 ) = "Wash."  : Abbrevs( 1, 16 ) = "W2"  : Abbrevs( 2, 16 ) = "WASHINGTON"
Abbrevs( 0, 17 ) = "Ala."   : Abbrevs( 1, 17 ) = "A2"  : Abbrevs( 2, 17 ) = "ALABAMA"
Abbrevs( 0, 18 ) = "Ark."   : Abbrevs( 1, 18 ) = "A8"  : Abbrevs( 2, 18 ) = "ARKANSAS"
Abbrevs( 0, 19 ) = "B.C."   : Abbrevs( 1, 19 ) = "B8"  : Abbrevs( 2, 19 ) = "BRITISH COLUMBIA"
Abbrevs( 0, 20 ) = "D.C."   : Abbrevs( 1, 20 ) = "W18" : Abbrevs( 2, 20 ) = "DISTRICT OF COLUMBIA"
Abbrevs( 0, 21 ) = "Del."   : Abbrevs( 1, 21 ) = "D3"  : Abbrevs( 2, 21 ) = "DELAWARE"
Abbrevs( 0, 22 ) = "Fla."   : Abbrevs( 1, 22 ) = "F6"  : Abbrevs( 2, 22 ) = "FLORIDA"
Abbrevs( 0, 23 ) = "Ill."   : Abbrevs( 1, 23 ) = "I3"  : Abbrevs( 2, 23 ) = "ILLINOIS"
Abbrevs( 0, 24 ) = "Ind."   : Abbrevs( 1, 24 ) = "I6"  : Abbrevs( 2, 24 ) = "INDIANA"
Abbrevs( 0, 25 ) = "Kan."   : Abbrevs( 1, 25 ) = "K2"  : Abbrevs( 2, 25 ) = "KANSAS"
Abbrevs( 0, 26 ) = "Man."   : Abbrevs( 1, 26 ) = "M3"  : Abbrevs( 2, 26 ) = "MANITOBA"
Abbrevs( 0, 27 ) = "N.B."   : Abbrevs( 1, 27 ) = "N5"  : Abbrevs( 2, 27 ) = "NEW BRUNSWICK"
Abbrevs( 0, 28 ) = "N.C."   : Abbrevs( 1, 28 ) = "N8"  : Abbrevs( 2, 28 ) = "NORTH CAROLINA"
Abbrevs( 0, 29 ) = "N.D."   : Abbrevs( 1, 29 ) = "N9"  : Abbrevs( 2, 29 ) = "NORTH DAKOTA"
Abbrevs( 0, 30 ) = "N.H."   : Abbrevs( 1, 30 ) = "N4"  : Abbrevs( 2, 30 ) = "NEW HAMPSHIRE"
Abbrevs( 0, 31 ) = "N.J."   : Abbrevs( 1, 31 ) = "N5"  : Abbrevs( 2, 31 ) = "NEW JERSEY"
Abbrevs( 0, 32 ) = "N.L."   : Abbrevs( 1, 32 ) = "N6"  : Abbrevs( 2, 32 ) = "NEWFOUNDLAND AND LABRADOR"
Abbrevs( 0, 33 ) = "N.M."   : Abbrevs( 1, 33 ) = "N6"  : Abbrevs( 2, 33 ) = "NEW MEXICO"
Abbrevs( 0, 34 ) = "N.S."   : Abbrevs( 1, 34 ) = "N8"  : Abbrevs( 2, 34 ) = "NOVA SCOTIA"
Abbrevs( 0, 35 ) = "N.Y."   : Abbrevs( 1, 35 ) = "N7"  : Abbrevs( 2, 35 ) = "NEW YORK"
Abbrevs( 0, 36 ) = "N.Z."   : Abbrevs( 1, 36 ) = "N45" : Abbrevs( 2, 36 ) = "NEW ZEALAND"
Abbrevs( 0, 37 ) = "Neb."   : Abbrevs( 1, 37 ) = "N2"  : Abbrevs( 2, 37 ) = "NEBRASKA"
Abbrevs( 0, 38 ) = "Nev."   : Abbrevs( 1, 38 ) = "N3"  : Abbrevs( 2, 38 ) = "NEVADA"
Abbrevs( 0, 39 ) = "Ont."   : Abbrevs( 1, 39 ) = "O6"  : Abbrevs( 2, 39 ) = "ONTARIO"
Abbrevs( 0, 40 ) = "P.R."   : Abbrevs( 1, 40 ) = "P9"  : Abbrevs( 2, 40 ) = "PUERTO RICO"
Abbrevs( 0, 41 ) = "R.I."   : Abbrevs( 1, 41 ) = "R4"  : Abbrevs( 2, 41 ) = "RHODE ISLAND"
Abbrevs( 0, 42 ) = "S.C."   : Abbrevs( 1, 42 ) = "S6"  : Abbrevs( 2, 42 ) = "SOUTH CAROLINA"
Abbrevs( 0, 43 ) = "S.D."   : Abbrevs( 1, 43 ) = "S8"  : Abbrevs( 2, 43 ) = "SOUTH DAKOTA"
Abbrevs( 0, 44 ) = "Tex."   : Abbrevs( 1, 44 ) = "T4"  : Abbrevs( 2, 44 ) = "TEXAS"
Abbrevs( 0, 45 ) = "U.S."   : Abbrevs( 1, 45 ) = "U6"  : Abbrevs( 2, 45 ) = "UNITED STATES"
Abbrevs( 0, 46 ) = "W.A."   : Abbrevs( 1, 46 ) = "A8"  : Abbrevs( 2, 46 ) = "WESTERN AUSTRALIA"
Abbrevs( 0, 47 ) = "Wis."   : Abbrevs( 1, 47 ) = "W6"  : Abbrevs( 2, 47 ) = "WISCONSIN"
Abbrevs( 0, 48 ) = "Wyo."   : Abbrevs( 1, 48 ) = "W8"  : Abbrevs( 2, 48 ) = "WYOMING"
Abbrevs( 0, 49 ) = "Ga."    : Abbrevs( 1, 49 ) = "G4"  : Abbrevs( 2, 49 ) = "GEORGIA"
Abbrevs( 0, 50 ) = "Ky."    : Abbrevs( 1, 50 ) = "K4"  : Abbrevs( 2, 50 ) = "KENTUCKY"
Abbrevs( 0, 51 ) = "La."    : Abbrevs( 1, 51 ) = "L8"  : Abbrevs( 2, 51 ) = "LOUISIANA"
Abbrevs( 0, 52 ) = "Md."    : Abbrevs( 1, 52 ) = "M3"  : Abbrevs( 2, 52 ) = "MARYLAND"
Abbrevs( 0, 53 ) = "Me."    : Abbrevs( 1, 53 ) = "M2"  : Abbrevs( 2, 53 ) = "MAINE"
Abbrevs( 0, 54 ) = "Mo."    : Abbrevs( 1, 54 ) = "M8"  : Abbrevs( 2, 54 ) = "MISSOURI"
Abbrevs( 0, 55 ) = "Or."    : Abbrevs( 1, 55 ) = "O7"  : Abbrevs( 2, 55 ) = "OREGON"
Abbrevs( 0, 56 ) = "Pa."    : Abbrevs( 1, 56 ) = "P4"  : Abbrevs( 2, 56 ) = "PENNSYLVANIA"
Abbrevs( 0, 57 ) = "Va."    : Abbrevs( 1, 57 ) = "V8"  : Abbrevs( 2, 57 ) = "VIRGINIA"
Abbrevs( 0, 58 ) = "Vt."    : Abbrevs( 1, 58 ) = "V5"  : Abbrevs( 2, 58 ) = "VERMONT"

End Sub

'****************************************************************************************

Function CalculateBaseCutter( StringInput$, RangeSpan% ) As Integer

' This function calculates a base Cutter for the input string by using a table of
' relative frequencies of occurrence of the letters in the English alphabet. (Digits have
' been arbitrarily squeezed in at the beginning of the table.) For example, the
' relative frequency with which the letter "a" appears is 8.167%, that for the letter "b"
' is 1.492%, and so on. The way this table is used by this macro is to consider that
' titles beginning with the letter "a" will on average consist of the first 8,167 of a
' collection of 100,000 titles arranged in alphabetical order (except for a small space
' reserved for digits at the very beginning of the shelves), those beginning with "b"
' will take up the next 1,492, or titles 8,168 to 9,659, and so on. (Letter frequencies
' for beginnings of words differ from those for all occurrences, a distinction ignored in
' this macro.) So a title beginning with the letter "n" will be shelved, so to speak,
' after all the titles beginning with the letters "a" through "m"--a group that accounts
' for 54.055% (or the first 54,055) of all the titles. If there were 5,000 books, this
' title would be shelved in the 337 books whose titles also begin with "n" that are
' shelved between numbers 2703 and 3040. In other words, if the range into which to
' squeeze the Cutter is 5, then an appropriate Cutter for such a title would be between
' 2.70275 and 3.04020. The numbers in the rest of the Cutter depend on what follows the
' letter "n." For the title "new", the letter "e" would be between 16.694% and 29.396% of
' 0.33745. This calculation runs until four digits have been generated. This table of
' letter frequencies (there are others with different numbers) is from the Department of
' Mathematics and Computer Science at Oxford College of Emory University
' <https://mathcenter.oxford.emory.edu/site/math125/englishLetterFreqs/> and was viewed
' on 31 March 2023.

Const REDUCER As Long = 100000   'The value to reduce the calculated result to a number less than 10,000.

Dim BaseNumber!
Dim LowerEnd#
Dim LowerEndPrev#
Dim MaxNumber%
Dim MultiplyA As Long
Dim MultiplyB As Long
Dim Range#
Dim UpperEnd#
Dim ZeroCount%

Dim i As Integer

If Len( StringInput$ ) < 4 Then
    MaxNumber% = Len( StringInput$ )
  Else
    MaxNumber% = 4
End If

Range# = RangeSpan%

For i = 1 To MaxNumber%

  Select Case Mid$( StringInput$, i, 1 )

    Case "0"
      MultiplyA =     10
      MultiplyB =     15
    Case "1"
      MultiplyA =     15
      MultiplyB =     20
    Case "2"
      MultiplyA =     20
      MultiplyB =     25
    Case "3"
      MultiplyA =     25
      MultiplyB =     30
    Case "4"
      MultiplyA =     30
      MultiplyB =     35
    Case "5"
      MultiplyA =     35
      MultiplyB =     40
    Case "6"
      MultiplyA =     40
      MultiplyB =     45
    Case "7"
      MultiplyA =     45
      MultiplyB =     50
    Case "8"
      MultiplyA =     50
      MultiplyB =     55
    Case "9"
      MultiplyA =     55
      MultiplyB =     60
    Case "A"              ' 8.167%
      MultiplyA =     60
      MultiplyB =   8167
    Case "B"              ' 1.492%
      MultiplyA =   8167
      MultiplyB =   9659
    Case "C"              ' 2.782%
      MultiplyA =   9659
      MultiplyB =  12441
    Case "D"              ' 4.253%
      MultiplyA =  12441
      MultiplyB =  16694
    Case "E"              '12.702%
      MultiplyA =  16694
      MultiplyB =  29396
    Case "F"              ' 2.228%
      MultiplyA =  29396
      MultiplyB =  31624
    Case "G"              ' 2.015%
      MultiplyA =  31624
      MultiplyB =  33639
    Case "H"              ' 6.094%
      MultiplyA =  33639
      MultiplyB =  39733
    Case "I"              ' 6.966%
      MultiplyA =  39733
      MultiplyB =  46699
    Case "J"              ' 0.153%
      MultiplyA =  46699
      MultiplyB =  46852
    Case "K"              ' 0.772%
      MultiplyA =  46852
      MultiplyB =  47624
    Case "L"              ' 4.025%
      MultiplyA =  47624
      MultiplyB =  51649
    Case "M"              ' 2.406%
      MultiplyA =  51649
      MultiplyB =  54055
    Case "N"              ' 6.749%
      MultiplyA =  54055
      MultiplyB =  60804
    Case "O"              ' 7.507%
      MultiplyA =  60804
      MultiplyB =  68311
    Case "P"              ' 1.929%
      MultiplyA =  68311
      MultiplyB =  70240
    Case "Q"              ' 0.095%
      MultiplyA =  70240
      MultiplyB =  70335
    Case "R"              ' 5.987%
      MultiplyA =  70335
      MultiplyB =  76322
    Case "S"              ' 6.327%
      MultiplyA =  76322
      MultiplyB =  82649
    Case "T"              ' 9.056%
      MultiplyA =  82649
      MultiplyB =  91705
    Case "U"              ' 2.758%
      MultiplyA =  91705
      MultiplyB =  94463
    Case "V"              ' 0.978%
      MultiplyA =  94463
      MultiplyB =  95441
    Case "W"              ' 2.360%
      MultiplyA =  95441
      MultiplyB =  97801
    Case "X"              ' 0.150%
      MultiplyA =  97801
      MultiplyB =  97951
    Case "Y"              ' 1.974%
      MultiplyA =  97951
      MultiplyB =  99925
    Case "Z"              ' 0.074%
      MultiplyA =  99925
      MultiplyB = 100000

  End Select

' For whatever range is being considered, the table gives a lower and upper limit of the
' space within the range taken up by the letter; the range will be further reduced by the
' limits of the next letter.

  LowerEnd# = Int( Range# * MultiplyA )
  UpperEnd# = Int( Range# * MultiplyB )
  If i > 1 Then
      LowerEnd# = Int( LowerEnd# / REDUCER )
      UpperEnd# = Int( UpperEnd# / REDUCER )
  End If
  If LowerEndPrev# = 0 Then
      If LowerEnd# = 0 Then
          ZeroCount% = ZeroCount% + 1
        Else
          LowerEndPrev# = 1
      End If
  End If
  BaseNumber!   = BaseNumber! + LowerEnd#
  Range#        = UpperEnd# - LowerEnd#
  LowerEndPrev# = LowerEnd#

Next i

CalculateBaseCutter = BaseNumber! / REDUCER

End Function

'****************************************************************************************

Function CalculateCutterWithRange( LowerEndOfRange%, UpperEndOfRange%, StringIn$, OutputLength% ) As String

' This function sends the span into which the Cutter must fit, and the selected string,
' to the function "CalculateBaseCutter" for calculating the basic Cutter. The number
' string it returns is formatted for proper length--three digits when the first character
' of the Cutter is to be a letter, four digits otherwise.

Const PAD_BOTTOM As Integer = 20  'The value to calculate how much to pad the bottom of a range for expansion.
Const PAD_TOP    As Integer = 50  'The value to calculate how much to pad the top of a range for expansion.

Dim Ceiling%
Dim Floor%
Dim NumberResult%
Dim RawCutter%
Dim Span%
Dim Temp$

' The span is the interval between the upper and lower numbers.

Span%         = UpperEndOfRange% - LowerEndOfRange%

' The "floor" and "ceiling" nudge the ends of the range together a little to allow for
' wiggle room, thus reducing the dimension of the span.

Floor%        = Span% / PAD_BOTTOM
Ceiling%      = Span% / PAD_TOP
Span%         = Span% - Floor% - Ceiling%

If StartsWithDigit And Left$( StringIn$, 1 ) Like "[A-Z]" Then
    StringIn$ = Mid$( StringIn$, 2 )
End If

' Send the span and the cleaned selection to the function to calculate a number.

RawCutter%    = CalculateBaseCutter( StringIn$, Span% )

' Add the number to the lower end of the range, increased by the floor, to get the
' Cutter.

NumberResult% = LowerEndOfRange% + Floor% + RawCutter%

Temp$         = Trim$( Str$( NumberResult% ) )

' Round up the last number, if necessary.

If OutputLength% = 3 Then
    If Right$( Temp$, 1 ) Like "[5-9]" Then
        Temp$ = Trim$( Str$( Val( Left$( Temp$, 3 ) ) + 1 ) )
       Else
        Temp$ = Left$( Temp$, 3 )
    End If
End If

CalculateCutterWithRange = Temp$

End Function

'****************************************************************************************

Function CheckTerminalZero( InString$ ) As String

' A Cutter shouldn't end in zero. This function eliminates terminal zeros.

Dim TempString$
Dim TerminalZero

TempString$ = InString$

Do
  If Right$( TempString$, 1 ) = "0" Then
      TerminalZero = TRUE
      TempString$  = Left$( TempString$, Len( TempString$ ) - 1 )
    Else
      TerminalZero = FALSE
  End If
Loop Until TerminalZero = FALSE

CheckTerminalZero = TempString$

End Function

'****************************************************************************************

Function CuttersForDigits( ASCIIValues% )

' This function assigns Cutter numbers to strings of digits.

Select Case ASCIIValues%
  Case 48
    CuttersForDigits = "2"
  Case 49
    CuttersForDigits = "3"
  Case 50 To 51
    CuttersForDigits = "4"
  Case 52
    CuttersForDigits = "5"
  Case 53
    CuttersForDigits = "6"
  Case 54 To 55
    CuttersForDigits = "7"
  Case 56
    CuttersForDigits = "8"
  Case 57
    CuttersForDigits = "9"
End Select

End Function

'****************************************************************************************

Function MakeUpperCase( InString$ ) As String

' Because the simple OML command "UCase" will fail when confronted with diacritical
' marks, this function makes a string uppercase and strips out those characters.

Dim CharA%
Dim TempString$

Dim i

For i = 1 To Len( InString$ )
  CharA% = Asc( Mid$( InString$, i, 1 ) )
  If CharA% > 31 And CharA% < 128 Then
      TempString$ = TempString$ & UCase$( Chr$( CharA% ) )
  End If
Next i

MakeUpperCase = TempString$

End Function

'****************************************************************************************

Function RankFields( InString$ )

' This function assigns a rank to a call number field, in order to offer an appropriate
' default selection in the list box. A complete LC call number--having both a
' classification and an item part--is of lowest rank (RANK_3), and will not be the
' default selection in the list box unless it is the only such field. Ranking higher
' (RANK_2) is an empty call number field, one that contains only coding for subfield $b,
' or a classification number with part of a Cutter. The best candidate for a default
' selection (RANK_1) is a classification number (with or without a Cutter already
' present) lacking an item number. The function returns its ranking of the field that has
' been input, that is, how good a candidate the field is to be the default choice in the
' dialog box.

Dim CallNumberStructure$
Dim Classification$
Dim Item$
Dim TempString$
Dim TestChar$

Dim PatternA0

Dim i As Integer, p As Integer, x As Integer

TempString$ = InString$

p = InStr( TempString$, DELIMITER )
If p > 0 Then
    Classification$ = Trim$( Mid$( TempString$, 6, p - 6 ) )
    Item$           = Trim$( Mid$( TempString$, p + 2 ) )
    If Classification$ = "" And Item$ = "" Then
        RankFields = RANK_3
      ElseIf Classification$ <> "" And Item$ = "" Then
        RankFields = RANK_1
      ElseIf Classification$ = "" And Item$ <> "" Then
        RankFields = RANK_3
      Else
        RankFields = RANK_2
    End If
  Else

' If the field lacks coding for subfield $b, test if the classification number is proper
' LC, that is, it alternates alphabetic characters and digits. If it does, it's a prime
' candidate for a Cutter to be added. Otherwise, there may be something funny going on,
' and the field shouldn't be offered as the default selection.

    If TempString$ <> "" Then
        Classification$ = Trim$( Mid$( TempString$, 6 ) )
        For i = 1 To Len( Classification$ )
          If Mid$( Classification$, i, 1 ) Like "[0-9]" Then
              TestChar$ = "0"
            ElseIf Mid$( Classification$, i, 1 ) Like "[A-Z]" Then
              TestChar$ = "A"
          End If
          If CallNumberStructure$ = "" Then
              CallNumberStructure$ = TestChar$
            Else
              If TestChar$ <> Right$( CallNumberStructure$, 1 ) Then
                  CallNumberStructure$ = CallNumberStructure$ & TestChar$
              End If
          End If
        Next i
        For i = 1 To Len( CallNumberStructure$ ) Step 2
          If Mid$( CallNumberStructure$, i, 2 ) = "A0" Then
              PatternA0 = TRUE
            Else
              PatternA0 = FALSE
              Exit For
          End If
        Next i
        If PatternA0 Then
            RankFields = RANK_1
          Else
            RankFields = RANK_2
        End If
    End If
End If

End Function

'****************************************************************************************

Function ShowCutterSource( GeogName$, ArrayIndex%, WhichArray% ) As String

Dim SourceString$

SourceString$ = "Cutter for " & DOUBLE_QUOTE & GeogName$ & DOUBLE_QUOTE
If WhichArray% = REGIONS_LIST Then
    If Regions( 2, ArrayIndex% ) = "A" Then
        SourceString$ = SourceString$ & " from " & DOUBLE_QUOTE & "Regions and Countries Table" & DOUBLE_QUOTE & " (Classification and Shelflisting Manual, section G300)."
      Else
        SourceString$ = SourceString$ & " from " & DOUBLE_QUOTE & "U.S. States and Canadian Provinces" & DOUBLE_QUOTE & " table (Classification and Shelflisting Manual, section G302)."
    End If
  Else
    SourceString$ = SourceString$ & " [" & Abbrevs( 2, ArrayIndex% ) & "] from " & DOUBLE_QUOTE
    If ArrayIndex% = 36 Or ArrayIndex% = 40 Or ArrayIndex% = 46 Then
        SourceString$ = SourceString$ & "Regions and Countries Table" & DOUBLE_QUOTE & " (Classification and Shelflisting Manual, section G300)."
      Else
        SourceString$ = SourceString$ & "U.S. States and Canadian Provinces" & DOUBLE_QUOTE & " table (Classification and Shelflisting Manual, section G302)."
    End If
End If

ShowCutterSource = SourceString$

End Function

'****************************************************************************************

Function Dialog1ControlFunction( Id$, Action%, SVal& )

Static AmbiguousTerm1%
Static AmbiguousTerm2%

Dim RegionsString$

Select Case Action%

  Case INITIALIZE

    RegionsString$  = AmbigRegions( AmbigHdgIndex% )
    AmbiguousTerm1% = Val( GetField( RegionsString$, 2, "," ) )
    AmbiguousTerm2% = Val( GetField( RegionsString$, 3, "," ) )
    DlgText    "OptionButton1",                Regions( 0, AmbiguousTerm1% )
    DlgText    "OptionButton2",                Regions( 0, AmbiguousTerm2% )
    DlgVisible "OptionButtonDummy",            INVISIBLE


  Case CONTROL_CHANGE

    If Id$ = "OK" Then
        Select Case DlgValue( "OptionGroup1" )
          Case 0
            Cutter$ = Regions( 1, AmbiguousTerm1% )
          Case 1
            Cutter$ = Regions( 1, AmbiguousTerm2% )
        End Select
    End If

End Select

End Function

'****************************************************************************************

Function Dialog2ControlFunction( Id$, Action%, SValue& )

' This function controls the second dialog box. It displays the Cutter, whether a simple
' number already generated in the Main sub, or one calculated to fit into a range
' depending on the input received by the dialog box.

Const DISABLED         As Integer = 0
Const DUMMY_BUTTON     As Integer = 0
Const ENABLED          As Integer = 1
Const FOCUS_CHANGE     As Integer = 4
Const IDLE_STATE       As Integer = 5
Const KEEP_DLG_OPEN    As Integer = -1
Const VISIBLE          As Integer = 1

Const ALPHANUMERIC     As Integer = 0
Const BACKWARDS_INPUT  As Integer = 4
Const NON_DIGITS       As Integer = 2
Const NO_INPUT         As Integer = -1
Const NO_PROBLEM       As Integer = 0
Const NUMBERS_ONLY     As Integer = 1
Const STARTS_WITH_ZERO As Integer = 1
Const TOO_LONG         As Integer = 3

Dim CheckCurrentInput$
Dim CheckOtherInput$
Dim CutterInitialLetter$
Dim LengthOfCurrentInput%
Dim TempString$

Dim i As Integer

' Static variables retain their values through each call of the dialog box control
' function.

Static ControlWithFocus$
Static CurrentInput$
Static CurrentTextBox$
Static CutterNumbersOnly$
Static HelpText$
Static InputWarningMessage$
Static Lower%
Static OtherInput$
Static OtherTextBox$
Static PreviousInput$
Static PreviousInputWarningMessage$
Static Upper%
Static WhatIsTheProblem%

Static FitIntoRange
Static RangeCalc

Select Case Action%

  Case INITIALIZE

    DlgValue   "OptionGroupCutterFormat",      ALPHANUMERIC
    DlgVisible "OptionGroupRangesDummy",       INVISIBLE
    DlgEnable  "ButtonGoRange",                DISABLED
    DlgVisible "WarningArea",                  INVISIBLE
    WhatIsTheProblem%            = NO_PROBLEM
    FitIntoRange                 = FALSE
    PreviousInputWarningMessage$ = ""
    InputWarningMessage$         = ""
    RangeCalc                    = FALSE
    DlgText    "CutterDisplay",                FirstCutter$
    DlgValue   "ListOfCallNumberFields",       DefaultSelection%
    If CountOfTopRank% > 1 Then
        DlgFocus   "ListOfCallNumberFields"
    End If
    If SelectionFound Or CutterSource$ = "Clipboard" Then
        DlgVisible "CutterSourceText",             INVISIBLE
        DlgVisible "GBCutterSource",               INVISIBLE
        HelpText$ = HelpSelection$
      Else
        DlgText    "CutterSourceText",             CutterSource$
        DlgVisible "GBFitIntoRange",               INVISIBLE
        DlgVisible "GBUsePZTable",                 INVISIBLE
        DlgVisible "InputBox1",                    INVISIBLE
        DlgVisible "InputBox2",                    INVISIBLE
        DlgVisible "OptionAlphanumeric",           INVISIBLE
        DlgVisible "OptionPZBiogCriticism",        INVISIBLE
        DlgVisible "OptionGroupRangesDummy",       INVISIBLE
        DlgVisible "OptionNumbersOnly",            INVISIBLE
        DlgVisible "OptionPZSeparateWorks",        INVISIBLE
        DlgVisible "ButtonGoRange",                INVISIBLE
        DlgVisible "To",                           INVISIBLE
        HelpText$ = HelpHeading$
    End If


  Case CONTROL_CHANGE

    Select Case Id$

      Case "OptionAlphanumeric"

        If FitIntoRange Then
            TempString$ = DlgText( "InputBox1" )
            TempString$ = TempString$ & String$( 4 - Len( TempString$ ), "0" )
            Lower%      = Val( TempString$ )
            TempString$ = DlgText( "InputBox2" )
            TempString$ = TempString$ & String$( 4 - Len( OtherInput$ ), "9" )
            Upper%      = Val( TempString$ )
            CutterInitialLetter$ = Left$( SelectionString$, 1 ) & _
                                   CalculateCutterWithRange( Lower%, Upper%, Mid$( SelectionString$, 2 ), 3 )
            DlgText    "CutterDisplay",                CutterInitialLetter$
          Else
            DlgText    "CutterDisplay",                FirstCutter$
            DlgValue   "OptionGroupRanges",            DUMMY_BUTTON
          End If

      Case "OptionNumbersOnly"

' A completely numeric Cutter is always fit into a range, even if not specified by
' entries in the input boxes. In that case the range is implicit, and is actually 1000 to
' 9999.

        If FitIntoRange Then
            If CutterNumbersOnly$ <> "" Then
                Cutter$ = CutterNumbersOnly$
              Else
                Cutter$ = CalculateCutterWithRange( 1000, 9999, SelectionString$, 4 )
            End If
          Else
            Cutter$ = CalculateCutterWithRange( 1000, 9999, SelectionString$, 4 )
        End If
        Cutter$ = CheckTerminalZero( Cutter$ )
        DlgText    "CutterDisplay",                Cutter$

      Case "OptionCustomRange"

        DlgFocus   "InputBox1"
        RangeCalc = TRUE
        DlgValue   "OptionGroupCutterFormat",      NUMBERS_ONLY

      Case "OptionPZSeparateWorks"

' For literature using Table P-PZ40, a normal Cutter is used for all strings except those
' beginning with "A" or "Z". In those cases, the Cutter must be squeezed into a range--
' the upper end of the span for the letter "A", but the beginning part for the letter
' "Z".

        DlgValue   "OptionGroupCutterFormat",      DUMMY_BUTTON
        Select Case Left$( SelectionString$, 1 )
          Case "A"
            Cutter$ = "A" & CalculateCutterWithRange( 6100, 9999, Mid$( SelectionString$, 2 ), 3 )
          Case "Z"
            Cutter$ = "Z" & CalculateCutterWithRange( 1000, 4589, Mid$( SelectionString$, 2 ), 3 )
          Case Else
            Cutter$ = FirstCutter$
        End Select
        Cutter$ = CheckTerminalZero( Cutter$ )
        DlgText    "CutterDisplay",                Cutter$
        DlgText    "InputBox1",                    ""
        DlgText    "InputBox2",                    ""

      Case "OptionPZBiogCriticism"

' Also for Table P-PZ40, works of criticism, etc. are prefaced by the letter "Z" and fit
' into the upper end of the span.

        DlgValue   "OptionGroupCutterFormat",      DUMMY_BUTTON
        Cutter$ = "Z" & Left$( CalculateCutterWithRange( 5000, 9999, SelectionString$, 3 ), 3 )
        Cutter$ = CheckTerminalZero( Cutter$ )
        DlgText    "CutterDisplay",                Cutter$
        DlgText    "InputBox1",                    ""
        DlgText    "InputBox2",                    ""

      Case "ButtonGoRange"

' This button calculates the Cutter when a valid span is entered into the input boxes.

        CutterNumbersOnly$   = CalculateCutterWithRange( Lower%, Upper%, SelectionString$, 4 )
        CutterInitialLetter$ = Left$( SelectionString$, 1 ) & _
                                      CalculateCutterWithRange( Lower%, Upper%, Mid$( SelectionString$, 2 ), 3 )
        If DlgValue( "OptionGroupCutterFormat" ) = NUMBERS_ONLY Then
            Cutter$ = CutterNumbersOnly$
          ElseIf DlgValue( "OptionGroupCutterFormat" ) = ALPHANUMERIC Then
            Cutter$ = CutterInitialLetter$
        End If
        Cutter$              = CheckTerminalZero( Cutter$ )
        DlgText    "CutterDisplay",                Cutter$
        WhatIsTheProblem%    = NO_PROBLEM
        InputWarningMessage$ = ""
        DlgEnable  "ButtonGoRange",                DISABLED
        RangeCalc            = FALSE

        Dialog2ControlFunction = KEEP_DLG_OPEN

      Case "ButtonReset"

' The "Reset" button clears everything and restores the appearance of the dialog box to
' its state when first invoked.

        DlgEnable  "ButtonGoRange",                DISABLED
        DlgText    "CutterDisplay",                FirstCutter$
        DlgText    "InputBox1",                    ""
        DlgText    "InputBox2",                    ""
        DlgValue   "OptionGroupCutterFormat",      ALPHANUMERIC
        DlgValue   "OptionGroupRanges",            DUMMY_BUTTON
        DlgVisible "WarningArea",                  INVISIBLE
        DlgFocus   "ButtonAdd"

        Dialog2ControlFunction = KEEP_DLG_OPEN

      Case "ButtonHelp"

' The help dialog box is chiefly for guidance on input of a range.

        Begin Dialog Dialog1Definition  256, 150, WaltsMacros$
          CancelButton  194, 128,  52,  14
          OkButton      194, 128,  52,  14
          Text           10,   6, 236, 120, HelpText$
        End Dialog

        Dim Dialog1 As Dialog1Definition
        On Error Resume Next
        Dialog Dialog1
        If Error = DLG_STATEMENT_CANCEL Then DlgEnd 0
        DlgFocus   "Cancel"

        Dialog2ControlFunction = KEEP_DLG_OPEN

    End Select


  Case FOCUS_CHANGE

' If the focus in the dialog box moves to the number input boxes, consider that a range
' of numbers is to be the input value.

    ControlWithFocus$ = Id$
    If ControlWithFocus$ = "InputBox1" Or ControlWithFocus$ = "InputBox2" Then
        RangeCalc = TRUE
        DlgValue   "OptionGroupRanges",            1
        DlgValue   "OptionGroupCutterFormat",      NUMBERS_ONLY
    End If


  Case IDLE_STATE

' Monitor the input boxes as they are being filled for valid input: Numbers only,
' excluding zeros, a length of at most four characters, and proper relationship (the left
' input box being a number lower than the right input box, after temporary modification--
' a range of "5" to "5" is valid because the macro will modify the input, effectively
' changing the range to be "5000" to "5999").

    If RangeCalc Then

        CurrentTextBox$ = ControlWithFocus$
        If ControlWithFocus$ = "InputBox1" Then
            OtherTextBox$   = "InputBox2"
          Else
            CurrentTextBox$ = "InputBox2"
            OtherTextBox$   = "InputBox1"
        End If
        CurrentInput$ = DlgText( CurrentTextBox$ )
        OtherInput$   = DlgText( OtherTextBox$ )
        If CurrentInput$ = "" Then'Or OtherInput$ = "" Then
            WhatIsTheProblem% = NO_INPUT
          Else
            WhatIsTheProblem% = NO_PROBLEM
        End If
        LengthOfCurrentInput% = Len( CurrentInput$ )
        If CurrentInput$ = "0" Then
            WhatIsTheProblem% = STARTS_WITH_ZERO
          ElseIf CurrentInput$ Like "[!0-9]" Then
            WhatIsTheProblem% = NON_DIGITS
          ElseIf Len( CurrentInput$ ) > 4 Then
            WhatIsTheProblem% = TOO_LONG
        End If
        If WhatIsTheProblem% <> NO_PROBLEM Then

            Select Case WhatIsTheProblem%

              Case STARTS_WITH_ZERO, NON_DIGITS
                If WhatIsTheProblem% = STARTS_WITH_ZERO Then
                    InputWarningMessage$ = "    A range must not start or end with zero!"
                  Else
                    InputWarningMessage$ = "    Please enter only digits!"
                End If
                DlgText    CurrentTextBox,                 ""

              Case TOO_LONG
                InputWarningMessage$  = "    Please enter no more than 4 digits!"
                If CurrentInput$ <> PreviousInput$ Then
                    CurrentInput$ = PreviousInput$
                    DlgText    CurrentTextBox,                 CurrentInput$
                End If

            End Select

          Else

            If CurrentInput$ <> "" And OtherInput$ <> "" Then
                If ControlWithFocus$ = "InputBox1" Then
                    CheckCurrentInput$   = CurrentInput$ & String$( 4 - Len( CurrentInput$ ), "0" )
                    CheckOtherInput$     = OtherInput$ & String$( 4 - Len( OtherInput$ ), "9" )
                    Lower%               = Val( CheckCurrentInput$ )
                    Upper%               = Val( CheckOtherInput$ )
                 Else
                    CheckCurrentInput$   = CurrentInput$ & String$( 4 - Len( CurrentInput$ ), "9" )
                    CheckOtherInput$     = OtherInput$ & String$( 4 - Len( OtherInput$ ), "0" )
                    Lower%               = Val( CheckOtherInput$ )
                    Upper%               = Val( CheckCurrentInput$ )
                End If
                If Lower% >= Upper% Then
                    InputWarningMessage$ = "    Please input the lower end of a range in the left box!"
                    WhatIsTheProblem%    = BACKWARDS_INPUT
                End If
              Else
                If CurrentInput$ <> PreviousInput$ Then
                    If WhatIsTheProblem% <> NO_PROBLEM Then
                        InputWarningMessage$ = ""
                        WhatIsTheProblem%    = NO_PROBLEM
                    End If
                End If
            End If
        End If
        PreviousInput$ = CurrentInput$

        If WhatIsTheProblem% = NO_PROBLEM Then
            DlgEnable  "ButtonGoRange",                ENABLED
            FitIntoRange = TRUE
            If DlgVisible( "WarningArea" ) Then
                DlgVisible "WarningArea",                  INVISIBLE
            End If
            If DlgVisible( "OptionPZSeparateWorks" ) = INVISIBLE Then
                DlgVisible "OptionPZSeparateWorks",        VISIBLE
            End If
            If DlgVisible( "OptionPZBiogCriticism" ) = INVISIBLE Then
                DlgVisible "OptionPZBiogCriticism",        VISIBLE
            End If
          Else
            DlgEnable  "ButtonGoRange",                DISABLED
            FitIntoRange = FALSE
        End If

        If InputWarningMessage$ <> PreviousInputWarningMessage$ Then
            If InputWarningMessage$ = "" Then
                DlgVisible "WarningArea",                  INVISIBLE
                DlgVisible "OptionPZSeparateWorks",        VISIBLE
                DlgVisible "OptionPZBiogCriticism",        VISIBLE
              Else
                DlgVisible "WarningArea",                  VISIBLE
                DlgText    "WarningArea",                  InputWarningMessage$
                DlgVisible "OptionPZSeparateWorks",        INVISIBLE
                DlgVisible "OptionPZBiogCriticism",        INVISIBLE
            End If
            PreviousInputWarningMessage$ = InputWarningMessage$
        End If
        WhatIsTheProblem% = NO_PROBLEM

        Dialog2ControlFunction = KEEP_DLG_OPEN

    End If

End Select

End Function
'2743117665

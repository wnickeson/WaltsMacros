'MacroName:BreakField.2024.01
'MacroDescription:Breaks a field at the cursor position, moving all subsequent text in
' that field to a new field, with a blank tag, immediately following.
'
' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
' https://orcid.org/0000-0003-0484-6938
'
' Last updated: 11 February 2024.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 3.1 and Windows 11 Enterprise & 64-bit
' Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works: Put the cursor in a variable field at the point where you want to divide
' it and run the macro. The macro cuts the field at the cursor position, adding the cut
' portion as the next field but with a blank tag.
'
' The macro uses the "GetFieldUnicode" command to retrieve the field in which the cursor
' is placed. The data preceding the cursor position becomes a replacement field, and is
' put in place with the "SetField" command. The rest of the data becomes a new field, and
' is added with the "AddFieldLine" command at the next line. The new field has a blank
' tag so the appropriate tag can be simply typed in.
'****************************************************************************************

Option Explicit

'****************************************************************************************

Sub Main

Dim CS As Object
On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Const CRITICAL_MESSAGE As Integer = 16

Dim BreakColumn%
Dim ChoppedField$
Dim CurrentColumn%
Dim CurrentRow%
Dim FieldData$
Dim NewField$
Dim Start%
Dim Tag$
Dim TypeOfWindow%
Dim WaltsMacros$             : WaltsMacros$ = "[Walt's macros] Extras3:BreakField"

Dim i As Integer, p As Integer, q As Integer

' Before going any further, make sure the current window is not a list: The macro works
' only in bibliographic or authority records.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case -1, 5 To 11, 13, 15 To 16, 21 To 25
    MsgBox "Sorry, this macro works only while editing a bibliographic or authority record.", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End Select

CurrentRow%    = CS.CursorRow
CurrentColumn% = CS.CursorColumn

' First check for cursor position: If the column position is less than 6, the cursor is
' not in a variable field; it's either in the fixed field or it's in the tag + indicator
' cells. Either way, there is no string to divide.

If CurrentColumn% < 6 Then
    MsgBox "Please place the cursor in a variable data field cell to split the field.", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End If

' If the cursor position is OK, retrieve the data for the row the cursor is in and begin
' processing.

If CS.GetFieldUnicode( "...", CurrentRow%, FieldData$ ) = FALSE Then
    MsgBox "Sorry, this macro couldn't get the data in the field to analyze.", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
  Else
    If CurrentColumn% >= Len( FieldData$ ) Or CurrentColumn% = 6 Then
        MsgBox "Please place the cursor within the field to split it.", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If

' If the field does not contain Unicode characters, then the position in the string at
' which to break the field will be the same as the cursor column position. Otherwise, the
' string's split position will be greater than that position, as each Unicode character
' is encoded as seven or more ASCII characters. So every Unicode character counts as one
' toward the cursor column position, but is measured as seven or more characters in the
' string.

    BreakColumn% = CurrentColumn%
    Start%       = 6
    Do
      p = InStr( Start%, FieldData$, "&#x" )
      If p > 0 Then
          If p < BreakColumn% Then
              q            = InStr( p, FieldData$, ";" )
              BreakColumn% = BreakColumn% + (q - p )
              Start%       = q + 1
            Else
              Exit Do
          End If
      End If
    Loop Until p = 0 Or p > BreakColumn%

' To add the new field (the second or latter part of the field the cursor is in), the
' macro command requires a tag. But because that tag will disappear to leave a blank
' space ready for typing in the new tag, whatever we label the field is irrelevant.

    NewField$     = "000  " & Trim$( Mid$( FieldData$, BreakColumn% ) )
    ChoppedField$ = Trim$( Left$( FieldData$, BreakColumn% - 1 ) )

' The "SetFieldLine" command replaces the existing field with a new one.

    If CS.SetFieldLine( CurrentRow%, ChoppedField$ ) Then
        If CS.AddFieldLine( CurrentRow% + 1, NewField$ ) = FALSE Then
            MsgBox "Sorry, this macro couldn't break field " & Tag$ & ".", CRITICAL_MESSAGE, WaltsMacros$
            Exit Sub
          Else
            CS.DeleteCurrentWord
        End If
      Else
        MsgBox "Sorry, this macro couldn't break field " & Tag$ & ".", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If
End If

End Sub
'1375418

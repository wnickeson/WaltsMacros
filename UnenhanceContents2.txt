' MacroName:UnenhanceContents2.2025.02
' MacroDescription:Removes subfield coding from an enhanced contents note, and optionally
' removes all instances of subfield $g.
'
' This macro was written by Walter F. Nickeson and last updated 3 May 2025.
' It was developed in Connexion client 3.1 running in Windows 11 Enterprise and 64-bit
' Windows 10 Pro.
' Walt's macros for the Connexion client: https://github.com/wnickeson/WaltsMacros
' wfnickeson@zohomail.com
'
' Copyright 2025 Walter F. Nickeson.
'
' Permission is hereby granted, free of charge, to any person obtaining a copy of this
' software and associated documentation files (the "Software"), to deal in the Software
' without restriction, including without limitation the rights to use, copy, modify,
' merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
' permit persons to whom the Software is furnished to do so, subject to the following
' conditions:
'
' The above copyright notice and this permission notice shall be included in all copies
' or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
' INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
' PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
' HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
' THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'
'****************************************************************************************
' How it works: Run the macro in a bibliographic record with an enhanced contents note to
' unenhance it--that is, to remove all subfield coding. If the cursor is placed in a
' field containing such a note, the macro will unenhance the field; otherwise, the macro
' will unenhance the first enhanced contents note it finds. The enhanced field replaces
' the field that has been unenhanced. The macro works on only field at a time.
'
' The macro removes only the subfield codes $t, $r, and $g, leaving the content of the
' subfields intact. However, it can also remove the contents of every subfield $g in the
' field. If the option to retain that content is chosen, the macro presents the further
' option to change the dashes that normally separate titles between each instance of
' subfield $g to semicolons, considering subfield $g to contain titles of sections.
' Otherwise, the macro attempts to preserve proper punctuation between titles and
' statements of responsibility. Its success at those attempts depends in part on how the
' field was input.
'****************************************************************************************

Option Explicit

Declare Function Dialog1ControlFunction( Id$, Action%, SValue& )

'----------------------------------------------------------------------------------------

' The following routines declare procedures in the .dll files for retrieving data from
' the Windows Clipboard. Initial guidance on use of this technique is due to Joel Hahn.

Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" ( DestinationPointer As Any, _
                                                              SourcePointer As Any, _
                                                              ByVal SizeOfCopy As Long)

Declare Function CloseClipboard   Lib "user32"   Alias "CloseClipboard" () As Long
Declare Function GetActiveWindow  Lib "user32"   Alias "GetActiveWindow" () As Long
Declare Function GetClipboardData Lib "user32"   Alias "GetClipboardData" ( ByVal uFormat As Long ) As Long
Declare Function GetStringLength  Lib "kernel32" Alias "lstrlenW" ( ByVal lpString As Long ) As Long
Declare Function GlobalLock       Lib "kernel32" Alias "GlobalLock" ( ByVal hMem As Long ) As Long
Declare Function GlobalUnlock     Lib "kernel32" Alias "GlobalUnlock" ( ByVal hMem As Long ) As Long
Declare Function OpenClipboard    Lib "user32"   Alias "OpenClipboard" ( ByVal HWND As Long ) As Long

'****************************************************************************************

Sub Main

Dim CS As Object
On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Const CHECKED          As Integer = 1
Const CRITICAL_MESSAGE As Integer = 16
Const WARNING_QUERY    As Integer = 32

Const CHANGE_DASH      As Integer = 2
Const DELETE_G         As Integer = -1
Const KEEP_G           As Integer = 1

Dim DELIMITER As String*1    : DELIMITER      = Chr$( 223 )

Dim AddFieldByLine%
Dim AddFieldBySequence%
Dim FieldContents$
Dim FieldData$
Dim Indicator1$
Dim Row%
Dim SubfieldCode$
Dim SubfieldG_Action%
Dim SubfieldG_FieldContents$
Dim SubfieldR_FieldContents$
Dim TestChar$
Dim TypeOfWindow%
Dim WaltsMacros$             : WaltsMacros$   = "[Walt's macros] Extras2:UnenhanceContents2"

Dim FirstSubGFound           : FirstSubGFound = TRUE
Dim FoundField

Dim i As Integer, p As Integer, q As Integer

'----------------------------------------------------------------------------------------
Const INTEGER_RANGE       As Long = 65536 '-32,768 to 32,767
Const UNICODE_TEXT        As Long = 13&

Dim ActiveWindowHandle    As Long
Dim CharToAdd$
Dim ClipboardCharsDim%
Dim ClipboardClose
Dim ClipboardDataHandle   As Long
Dim ClipboardDataLocation As Long
Dim CodePoint%
Dim LengthOfField%
Dim UniCodePoint$

Dim ClipboardChars() As Integer
'----------------------------------------------------------------------------------------

' First, make sure a bibliographic record is displayed.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case -1, 3 To 16, 18, 20 To 26
    MsgBox "Sorry, this macro works only in a bibliographic record!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End Select

' Then check to see if the cursor is in a contents field. If it is, and the note is
' enhanced, begin processing it. If the note is not enhanced, quit. But if the cursor is
' not in a contents field, search the record for one. Keep searching until all contents
' fields have been found or an enhanced field is found. Unenhance only the first one
' encountered.

Row% = CS.CursorRow
If CS.GetFieldUnicode( "...", Row%, FieldData$ ) Then
    If Left$( FieldData$, 3 ) = "505" Then
        If Mid$( FieldData$, 5, 1 ) <> "0" Then
            MsgBox "This field does not contain an enhanced contents note!", CRITICAL_MESSAGE, WaltsMacros$
            Exit Sub
        End If
      Else
        i = 1
        Do
          FoundField = CS.GetFieldUnicode( "...", i, FieldData$ )
          If FoundField Then
              If Left$( FieldData$, 3 ) = "505" Then
                  If Mid$( FieldData$, 5, 1 ) = "0" Then
                      Exit Do
                  End If
              End If
          End If
          i = i + 1
        Loop Until FoundField = FALSE
        If FoundField = FALSE Then
            If i = 2 Then
                MsgBox "The contents note in this record is not enhanced!", CRITICAL_MESSAGE, WaltsMacros$
              Else
                MsgBox "No enhanced contents note fields were found in this record!", CRITICAL_MESSAGE, WaltsMacros$
            End If
            Exit Sub
        End If
    End If
End If

' The new field will be added either on the line following the original field, or as the
' next 505 field, depending on how the original field was found.

If i = 0 Then
    AddFieldByLine% = Row%
  Else
    If i = 1 Then
         AddFieldBySequence% = 1
      Else
         AddFieldBySequence% = i
    End If
End If

FieldData$ = ""
CS.CursorRow% = i

CS.CopyField

' Use Windows API to access the Clipboard.

ActiveWindowHandle = GetActiveWindow()
If OpenClipboard( ActiveWindowHandle ) = FALSE Then
    MsgBox "Sorry, the contents of the Clipboard could not be accessed.", CRITICAL_MESSAGE, WaltsMacros$
    ClipboardClose = CloseClipboard()
    Exit Sub
End If

ClipboardDataHandle = GetClipboardData( UNICODE_TEXT )
If ClipboardDataHandle = 0& Then
    MsgBox "Sorry, the macro failed to get Clipboard data.", CRITICAL_MESSAGE, WaltsMacros$
    ClipboardClose = CloseClipboard()
    Exit Sub
End If
ClipboardDataLocation = GlobalLock( ClipboardDataHandle )

' Copy the Clipboard contents to a prepared array.

LengthOfField% = GetStringLength( ClipboardDataLocation )
If LengthOfField% > 0 Then
    ClipboardCharsDim% = ( LengthOfField% - 1 ) * 2
    ReDim ClipboardChars( ClipboardCharsDim% )
    CopyMemory ClipboardChars( 0 ), ByVal ClipboardDataLocation, ClipboardCharsDim% + 2
  Else
    Exit Sub
End If

GlobalUnlock( ClipboardDataHandle )
ClipboardClose = CloseClipboard()

' Build a string of characters from the numbers in the array. As type "integer", the
' numbers range from -32,768 to 32,767. Numbers 0 to 127 encode plain ASCII characters,
' which are added to the string as themselves. All other numbers (except the delimiter
' symbol, whose encoding is converted to MARC-8) are converted to hexadecimal by the
' BASIC "Hex" function. Decimal numbers from 128 to 32,767 are directly converted to
' hexadecimal 0080 to 7FFF. Negative decimal numbers are made positive by adding them to
' 65,536, so the range -32,768 to -1 becomes the range 32,768 to 65,535. The "Hex"
' function converts those numbers to the hexadecimal range 8000 to FFFF. Finally, the
' hexadecimal numbers are transformed into Numeric Character References, with strings of
' two or three digits padded with leading zeros to make each string four characters in
' length; then that NCR is added to the character string.

For i = 0 To ClipboardCharsDim%
  CodePoint% = ClipboardChars( i )
  If CodePoint% = 0 Then
      Exit For
    ElseIf CodePoint% > 0 And CodePoint% < 128 Then
      CharToAdd$ = Chr$( CodePoint% )
    ElseIf CodePoint% = 450 Then
      CharToAdd$ = Chr$( 223 )
    Else
      If CodePoint% > 127 Then
          UniCodePoint$ = Hex( ClipboardChars( i ) )
          If Len( UniCodePoint$ ) < 4 Then
             UniCodePoint$ = String$( 4 - Len( UniCodePoint$ ), "0" ) & UniCodePoint$
          End If
        Else
          UniCodePoint$ = Hex( INTEGER_RANGE + CodePoint% )
      End If
      CharToAdd$ = "&#x" & UniCodePoint$ & ";"
  End If
  FieldData$ = FieldData$ & CharToAdd$
  CharToAdd$ = ""
Next i

Indicator1$    = Mid$( FieldData$, 4, 1 )
FieldContents$ = Mid$( FieldData$, 6 )

Do
  p = InStr( FieldContents$, DELIMITER )
  If p > 0 Then
      SubfieldCode$ = Mid$( FieldContents$, p + 1, 1 )
      Select Case SubfieldCode$

' The contents of subfield $g may be significant or trivial. The first subfield $g found
' as the macro analyzes the field triggers a message box asking if the subfield should be
' deleted. If it should be kept, it may be that it identifies a section or group of
' titles, and if so, the question is posed whether titles in that section should be
' separated with dashes or semicolons. If dashes are discarded between titles, they are
' retained before each subfield $g.

        Case "g"

          If FirstSubGFound Then
              Begin Dialog Dialog1Definition  192, 100, WaltsMacros$, .Dialog1ControlFunction
                OkButton        70,  76,  52,  14
                CancelButton   130,  76,  52,  14
                Text            10,   6, 166,   8, "Delete contents of every subfield $g in this field?"
                OptionGroup                                                                               .OptionGroup1
                 OptionButton   16,  18,  32,  12, "&Yes",                                                .OptionButton1
                 OptionButton   16,  32,  32,  12, "&No",                                                 .OptionButton2
                CheckBox        28,  44, 154,  12, "&Change dashes between titles in subfield $t",        .CheckBox1
                Text            40,  56,  76,   8, "(if found) to semicolons",                            .TextLine2
              End Dialog
              Dim Dialog1 As Dialog1Definition

              SubfieldG_Action% = Dialog( Dialog1 )

              If SubfieldG_Action% = 0 Then
                  Exit Sub
                Else
                  If Dialog1.OptionGroup1 = 0 Then
                      SubfieldG_Action% = DELETE_G
                    Else
                      SubfieldG_Action% = KEEP_G
                      If Dialog1.CheckBox1 = CHECKED Then
                          SubfieldG_Action% = CHANGE_DASH
                      End If
                  End If
              End If
              FirstSubGFound = FALSE
          End If

          q = InStr( p + 1, FieldContents$, DELIMITER )

' If no delimiter is found after this occurrence, the end of the field has been reached.
' If this last subfield $g is to be eliminated, check for remaining ISBD punctuation
' preceding it, and delete it.

          If q = 0 Then
              SubfieldG_FieldContents$ = Trim$( Mid$( FieldContents$, p + 2 ) )
              If SubfieldG_Action% = DELETE_G Then
                  FieldContents$ = Left$( FieldContents$, p - 1 )
                Else
                  FieldContents$ = Left$( FieldContents$, p - 1 ) & Mid$( FieldContents$, p + 2 )
              End If
              For i = Len( FieldContents$ ) To 1 Step -1
                TestChar$ = Mid$( FieldContents$, i, 1 )
                If TestChar$ Like "[!- ;:]" Or TestChar$ = Chr$( 034 ) Or TestChar$ = Chr$( 039 ) Then
                    FieldContents$ = Left$( FieldContents$, i )
                    Exit For
                End If
              Next i
            Else
              If p = 1 Then
                  SubfieldG_FieldContents$ = Mid$( FieldContents$, p, q - 1 )
                  If SubfieldG_Action% = DELETE_G Then
                      FieldContents$ = Trim$( Mid$( FieldContents$, q - 1 ) )
                    Else
                      FieldContents$ = Trim$( Left$( FieldContents$, p - 1 ) ) & Mid$( FieldContents$, p + 2, q - 3 ) & Mid$( FieldContents$, q + 2 )
                  End If
                Else
                  SubfieldG_FieldContents$ = Trim$( Mid$( FieldContents$, p, q - p ) )
                  If SubfieldG_Action% = DELETE_G Then

' If the content of subfield $g is also to be deleted but it contains punctuation that
' should be retained, keep that punctuation.

                      If Right$( SubfieldG_FieldContents$, 2 ) = "--" Then
                          FieldContents$ = Trim$( Left$( FieldContents$, p - 1 ) ) & " -- " & Trim$( Mid$( FieldContents$, q - 1 ) )
                        ElseIf Right$( SubfieldG_FieldContents$, 1 ) = "/" Then
                          FieldContents$ = Trim$( Left$( FieldContents$, p - 1 ) ) & " / " & Trim$( Mid$( FieldContents$, q - 1 ) )
                        ElseIf Right$( SubfieldG_FieldContents$, 1 ) = ";" Then
                          FieldContents$ = Trim$( Left$( FieldContents$, p - 1 ) ) & " ; " & Trim$( Mid$( FieldContents$, q - 1 ) )
                        Else
                          FieldContents$ = Left$( FieldContents$, p - 1 ) & Trim$( Mid$( FieldContents$, q - 1 ) )
                      End If
                    Else
                      FieldContents$ = Trim$( Left$( FieldContents$, p - 1 ) ) & Mid$( FieldContents$, p + 2, ( q - p ) - 3 ) & Mid$( FieldContents$, q + 2 )
                  End If
              End If
          End If

        Case "t"

          If p = 1 Then
              FieldContents$ = Trim$( Mid$( FieldContents$, p + 2 ) )
            Else

' Title subfields should normally be preceded by a dash (space-hyphen-space), but a
' semicolon or colon may be found instead. Add the dash if the other punctuation is not
' found, but replace the dash with a semicolon if that option has been chosen.

              For i = p - 1 To 1 Step -1
                TestChar$ = Mid$( FieldContents$, i, 1 )
                Select Case TestChar$
                  Case " "
                  Case "-"
                    If SubfieldG_Action% = CHANGE_DASH Then
                        FieldContents$ = Left$( FieldContents$, i - 2 ) & ";" & Mid$( FieldContents$, p + 2 )
                      Else
                        FieldContents$ = Left$( FieldContents$, i ) & Mid$( FieldContents$, p + 2 )
                    End If
                    Exit For
                  Case ";", ":"
                    FieldContents$ = Left$( FieldContents$, i ) & Mid$( FieldContents$, p + 2 )
                    Exit For
                  Case Else
                    FieldContents$ = Left$( FieldContents$, i ) & " -- " & Mid$( FieldContents$, p + 2 )
                    Exit For
                End Select
              Next i
          End If

' The statement of responsibility in subfield $r is normally preceded by a forward slash,
' but sometimes the subfield is surrounded by parentheses, as in the performer of a
' musical work. Make sure the slash appears before the subfield if no parentheses are
' found.

        Case "r"

          q = InStr( p + 1, FieldContents$, DELIMITER )
          If q = 0 Then
              SubfieldR_FieldContents$ = Mid$( FieldContents$, p + 2 )
              FieldContents$           = Left$( FieldContents$, p - 1 ) & Mid$( FieldContents$, p + 2 )
            Else
              SubfieldR_FieldContents$ = Mid$( FieldContents$, p + 2, ( q - p ) - 2 )
              FieldContents$           = Left$( FieldContents$, p - 1 ) & Mid$( FieldContents$, p + 2, ( q - p ) - 3 ) & Mid$( FieldContents$, q - 1 )
          End If
          If Left$( SubfieldR_FieldContents$, 1 ) <> "(" Then
              For i = p - 1 To 1 Step -1
                TestChar$ = Mid$( FieldContents$, i, 1 )
                Select Case TestChar$
                  Case " "
                  Case "/"
                    Exit For
                  Case Else
                    FieldContents$ = Left$( FieldContents$, i ) & " / " & Mid$( FieldContents$, p + 2 )
                    Exit For
                End Select
              Next i
          End If

        Case Else

          FieldContents$ = Left$( FieldContents$, p - 1 ) & Trim$( Mid$( FieldContents, p + 2 ) )
      End Select

  End If
Loop Until p = 0

FieldContents$ = Trim$( FieldContents$ )

' Remove double spaces.

Do
  p = InStr( FieldContents$, "  " )
  If p > 0 Then
      FieldContents$ = Left$( FieldContents, p ) & Mid$( FieldContents$, p + 2 )
  End If
Loop Until p = 0

FieldContents$ = "505" & Indicator1$ & " " & FieldContents$

' Check terminal punctuation.

TestChar$ = Right$( FieldContents$, 1 )
If TestChar$ <> "." Then
    If TestChar$ <> "!" And TestChar$ <> ")" Then
        FieldContents$ = FieldContents$ & "."
    End If
End If

' Add the unenhanced field following the original, enhanced one, so it can be compared
' for correctness.

If AddFieldByLine% > 0 Then
    If CS.SetFieldLine( AddFieldByLine%, FieldContents$ ) = FALSE Then
        MsgBox "Sorry, could not add the unenhanced contents note.", CRITICAL_MESSAGE, WaltsMacros$
    End If
  Else
    If CS.SetField( AddFieldBySequence%, FieldContents$ ) = FALSE Then
        MsgBox "Sorry, could not add the unenhanced contents note.", CRITICAL_MESSAGE, WaltsMacros$
    End If
End If

End Sub

'****************************************************************************************

Function Dialog1ControlFunction( Id$, Action%, SValue& )

Const INITIALIZE     As Integer = 1
Const CONTROL_CHANGE As Integer = 2
Const CHECKED        As Integer = 1
Const DISABLED       As Integer = 0
Const ENABLED        As Integer = 1
Const UNCHECKED      As Integer = 0

Select Case Action%

  Case INITIALIZE

    DlgEnable "CheckBox1", DISABLED
    DlgEnable "TextLine2", DISABLED
    DlgValue  "CheckBox1", 0


  Case CONTROL_CHANGE

    If DlgValue( "OptionGroup1" ) = 0 Then
        DlgEnable "CheckBox1", DISABLED
        DlgValue  "CheckBox1", UNCHECKED
        DlgEnable "TextLine2", DISABLED
      Else
        DlgEnable "CheckBox1", ENABLED
        DlgEnable "TextLine2", ENABLED
    End If

End Select

End Function
'48019667

' MacroName:Check33X.2025.01
' MacroDescription:Adds/changes RDA 336-338 fields in a bibliographic record.
'
' This macro was written by Walter F. Nickeson and last updated 2 May 2025.
' It was developed in Connexion client 3.1 running in Windows 11 Enterprise and 64-bit
' Windows 10 Pro.
' Walt's macros for the Connexion client: https://github.com/wnickeson/WaltsMacros
' wfnickeson@zohomail.com
'
' Copyright 2025 Walter F. Nickeson.
'
' Permission is hereby granted, free of charge, to any person obtaining a copy of this
' software and associated documentation files (the "Software"), to deal in the Software
' without restriction, including without limitation the rights to use, copy, modify,
' merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
' permit persons to whom the Software is furnished to do so, subject to the following
' conditions:
'
' The above copyright notice and this permission notice shall be included in all copies
' or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
' INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
' PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
' HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
' THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'***************************************************************************************#
' How it works: Run the macro while viewing a bibliographic record cataloged in English
' (040 subfield $b = "eng" or no 040 subfield $b is present). The macro displays content,
' media, and carrier information it has determined is appropriate for that record. If
' this information differs from what is in any of the 33X fields already in the record,
' the macro shows what the new fields look like. You may select different terms to
' describe the material from drop-down lists, choose whether the fields should contain
' terms, codes, or terms and codes, and add a term or phrase to specify which materials
' are being described. Click the button to add the fields or to replace the existing
' fields.

' The default option for whether codes or terms should appear in the fields the macro
' creates can be set on line 82 below.
'
' The terms displayed in the drop-down list boxes when the macro opens are generated by
' information in the record's fixed field and 007 fields, analyzed in this order: "Type",
' 007 fields, "Form", and "TMat". The 336 field (content type) corresponds to "Type".
' The macro chooses the term for the 337 field (media type) from information in the other
' sources; this term constrains those available for the 338 field (carrier type). If
' there is a contradiction in the sources--for example, if "Form" has a value of
' "[blank]" but a 007 field describes an online resource--a warning message is displayed,
' and the default terms, which are based primarily on the 007 field, are flagged in the
' macro's dialog box with a question mark to show they need attention. If information is
' lacking to supply a default term, no suggestions are offered for that field, and an
' explicit selection must be made from the drop-down lists.
'
' The macro ignores existing 336-338 fields in presenting its suggestions. It does,
' however, check those fields to see if they match either the fields it has calculated
' are appropriate for that record, or the fields you have constructed by selecting values
' from the lists. Matching is based on content rather than form, so existing fields
' containing only a code, only a term, or both a term and a code, may all be considered
' equivalent to a suggested or constructed field when testing the match. Existing fields
' whose form differs from the preferred form selected on line 69 below are replaced only
' if the checkbox to "Replace" is checked; otherwise the difference is ignored. Any
' materials specified in existing fields are also ignored for purposes of determining a
' match.
'
' Multiple 33X fields can be added by re-running the macro and selecting different terms
' from the lists each time. Sets of fields may be distinguished by adding terms for
' "materials specified" (e.g., labeling one set "book" and the other "DVD" for a disc
' acccompanying a book). The macro adds each 33X field in its proper order by tag.
'
' The macro will not add duplicate fields, for example, the same carrier for different
' media types. In such a case, again, the macro considers content, not form, so two
' fields need not be identical to be considered duplicates. Marking the checkbox for that
' field will force a replacement.
'****************************************************************************************

Option Explicit

'########################################################################################
' Set the default choice for adding codes, terms, or both here:                        '#
                                                                                       '#
Global Const TERM_OR_CODE_CHOICE As Integer = 3                                        '#
                                                                                       '#
' 3 = Default choice is adding both codes and terms.                                   '#
' 2 = Default choice is adding codes only.                                             '#
' 1 = Default choice is adding terms only.                                             '#
'########################################################################################

Type FieldInfo
 tComparison As Integer
 tContent    As String
 tLine       As Integer
End Type

Declare Sub CompareFields( CalcString$, Tag$ )
Declare Sub FillArrays
Declare Sub SetDialogBoxControls

Declare Function AddAndReplace       ( Replace%, Tag$, TagCount%, FieldToAdd$ ) As Integer
Declare Function AddOrReplaceCheckbox( WhichBox$, WhichField$, CheckBoxValue% ) As Integer
Declare Function ConstructField      ( InString$, ButtonChoice% )               As String
Declare Function FindFieldLine       ( InString$, FirstOrLast%, Ignore% )       As Integer
Declare Function FixDelimiter        ( InString$ )                              As String

Declare Function Dialog1ControlFunction( Id$, Action%, SVal& )

Global CS As Object

' Values for "Comparison" field:

Global Const ABSENT      As Integer = 4
Global Const DIFFERENT   As Integer = 0
Global Const IDENTICAL   As Integer = 2
Global Const REPLACEABLE As Integer = 1

Global Const SPACER      As Integer = 128 'Gets around the limitation of having to use an array of only one dimension in a
                                         ' dialog box list box control by adding information so far away on the line from the
                                         ' displayed information that it can never be visible.

' Dialog box constants:

Global Const CHECKED     As Integer = 1
Global Const DISABLED    As Integer = 0
Global Const ENABLED     As Integer = 1
Global Const INVISIBLE   As Integer = 0
Global Const UNCHECKED   As Integer = 0
Global Const VISIBLE     As Integer = 1

Global DELIMITER As String*1

Global CarrierDefault%
Global ContentDefault%
Global Count336%
Global Count337%
Global Count338%
Global Count33X%
Global ExistingField As FieldInfo
Global Field336Constructed$
Global Field336Finished$
Global Field337Constructed$
Global Field337Finished$
Global Field338Constructed$
Global Field338Finished$
Global Form007Mismatch$
Global MaterialsSpecified$
Global MediaDefault%
Global NewField1$
Global NewField2$
Global NewField3$
Global WaltsMacros$

Global CarrierAudio        (  8 ) As String
Global CarrierComputer     (  9 ) As String
Global CarrierMicroform    ( 10 ) As String
Global CarrierMicroscopic  (  2 ) As String
Global CarrierOther        (  0 ) As String
Global CarrierProjected    ( 10 ) As String
Global CarrierStereographic(  3 ) As String
Global CarrierTypes        ()     As String
Global CarrierUnmediated   (  7 ) As String
Global CarrierVideo        (  5 ) As String
Global ContentTypes        ( 25 ) As String
Global MediaTypes          ( 10 ) As String

Global aExisting33X        ()     As FieldInfo

'****************************************************************************************

Sub Main

On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

FillArrays

Const CRITICAL_MESSAGE        As Integer = 16
Const DIALOG_BUTTON_CANCEL    As Integer = 0
Const DIALOG_BUTTON_OK        As Integer = -1
Const DISPLAY_FF_AT_TOP       As Integer = 1
Const INFORMATION_MESSAGE     As Integer = 64
Const WARNING_MESSAGE         As Integer = 48

Const FIRST_FIELD             As Integer = 0
Const LAST_FIELD              As Integer = 1

' MediaTypes
Const AUDIO                   As Integer = 1
Const COMPUTER                As Integer = 2
Const MICROFORM               As Integer = 3
Const MICROSCOPIC             As Integer = 4
Const OTHERmed                As Integer = 9
Const PROJECTED               As Integer = 5
Const UNMEDIATED              As Integer = 7
Const UNSPECIFIEDmed          As Integer = 10
Const VIDEO                   As Integer = 8

' CarrierUnmediated
Const CARD                    As Integer = 1
Const OBJECT                  AS Integer = 3
Const OTHERunm                As Integer = 7
Const SHEET                   As Integer = 5
Const VOLUME                  As Integer = 6

' CarrierComputer
Const COMPUTER_CARD           As Integer = 1
Const COMPUTER_CHIP_CARTRIDGE As Integer = 2
Const COMPUTER_DISC           As Integer = 3
Const COMPUTER_DISC_CARTRIDGE As Integer = 4
Const COMPUTER_TAPE_CARTRIDGE As Integer = 5
Const COMPUTER_TAPE_CASSETTE  As Integer = 6
Const COMPUTER_TAPE_REEL      As Integer = 7
Const ONLINE_RESOURCE         As Integer = 8
Const OTHERcom                As Integer = 9

' CarrierProjected
Const FILMSLIP                As Integer = 5
Const FILMSTRIP               As Integer = 6
Const FILMSTRIP_CARTRIDGE     As Integer = 7
Const OTHERpro                As Integer = 10
Const OVERHEAD_TRANSPARENCY   As Integer = 8
Const SLIDE                   As Integer = 9

' CarrierMicroform
Const APERTURE_CARD           As Integer = 1
Const MICROFICHE              As Integer = 2
Const MICROFICHE_CASSETTE     As Integer = 3
Const MICROFILM_CARTRIDGE     As Integer = 4
Const MICROFILM_CASSETTE      As Integer = 5
Const MICROFILM_REEL          As Integer = 6
Const MICROFILM_ROLL          As Integer = 7
Const MICROFILM_SLIP          As Integer = 8
Const MICROOPAQUE             As Integer = 9
Const OTHERmic                As Integer = 10

' CarrierProjected
Const FILM_CARTRIDGE          As Integer = 1
Const FILM_CASSETTE           As Integer = 2
Const FILM_REEL               As Integer = 3
Const FILM_ROLL               As Integer = 4

' CarrierAudio
Const AUDIOCASSETTE           As Integer = 5
Const AUDIOTAPE_REEL          As Integer = 6
Const AUDIO_CARTRIDGE         As Integer = 1
Const AUDIO_CYLINDER          As Integer = 2
Const AUDIO_DISC              As Integer = 3
Const AUDIO_ROLL              As Integer = 4
Const OTHERaud                As Integer = 8
Const SOUNDTRACK_REEL         As Integer = 7

' CarrierVideo
Const OTHERvid                As Integer = 5
Const VIDEOCASSETTE           As Integer = 2
Const VIDEODISC               As Integer = 3
Const VIDEOTAPE_REEL          As Integer = 4
Const VIDEO_CARTRIDGE         As Integer = 1

Const UNSPECIFIED_CARRIER     As Integer = 0

Dim DOUBLE_QUOTE As String*1 : DOUBLE_QUOTE = Chr$( 034 )
Dim SINGLE_QUOTE As String*1 : SINGLE_QUOTE = Chr$( 039 )

Dim CarrierLine$
Dim Field007$
Dim FieldData$
Dim FieldToAdd$
Dim First007$
Dim FoundField
Dim LineCount%
Dim MARCCarrier$
Dim MARCForm$
Dim MARCMedia$
Dim MARCTMat$
Dim MARCType$
Dim MissingFields%
Dim NotAdded$
Dim PosFF%
Dim ReplaceVal%
Dim Tag$
Dim TagCount%
Dim TempString$
Dim UBaExisting33X%
Dim Window%

Dim i As Integer, p As Integer

CarrierDefault% = 99
DELIMITER       = Chr$( 223 )
WaltsMacros$    = "[Walt's macros] Essentials:Check33X"

' First, make sure a bibliographic record is displayed.

Window% = CS.ItemType
Select Case Window%
  Case -1, 3 To 16, 18, 20 To 26
    MsgBox "Sorry, this macro works only in a bibliographic record!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End Select

' Then verify the record is English-language cataloging.

If CS.GetField( "040", 1, FieldData$ ) Then
    p = InStr( FieldData$, DELIMITER & "b" )
    If p <> 0 And Mid$( FieldData$, p + 3, 3 ) <> "eng" Then
        MsgBox "Sorry, this macro works only in English-language records!", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If
End If

' If everything is OK to proceed, continue by building an array of existing 336-338 fields.

LineCount% = 1
Do
  FoundField = CS.GetField( "...", LineCount%, FieldData$ )
  If FoundField Then
      Tag$ = Left$( FieldData$, 3 )
      If Tag$ Like "33[678]" Then
          ExistingField.tContent     = FieldData$
          ExistingField.tComparison  = DIFFERENT
          ExistingField.tLine        = LineCount%
          ReDim Preserve aExisting33X( Count33X% )
          aExisting33X( Count33X% ) = ExistingField
          Count33X%                 = Count33X% + 1
      End If
      LineCount% = LineCount% + 1
  End If
Loop Until FoundField = FALSE

' Get some values from the fixed field to be used to supply starting data in the list
' boxes. If "Form" appears to be blank it is actually a zero-length string, and so must
' be converted to a blank. If "TMat" doesn't appear at all (because of the Type of
' record) it also is returned as a zero-length string, but in this case that doesn't mean
' the value "blank" because that value is not valid for this element. For the fixed
' field, "NA" signals the element has no value.

PosFF% = CS.FixedFieldPosition
If PosFF% <> DISPLAY_FF_AT_TOP Then CS.FixedFieldPosition = DISPLAY_FF_AT_TOP
If CS.GetFixedField( "Type", MARCType$ ) = FALSE Then
    MARCType$ = "NA"
End If
If CS.GetFixedField( "Form", MARCForm$ ) Then
    If MARCForm$ = "" Then MARCForm$ = " "
End If
If CS.GetFixedField( "TMat", MARCTMat$ ) Then
    If MARCTMat$ = "" Then MARCTMat$ = "NA"
End If
CS.FixedFieldPosition = PosFF%

' MARC "Type" (Leader/06) generally corresponds to RDA Content Type.

Select Case MARCType$      'Type, Leader/06
  Case "NA"                 '"Type" code unavailable
    ContentDefault% = 0      'No content type suggested
  Case "a"                 'Language material
    ContentDefault% = 20     'ContentTypes = "text"
  Case "c"                 'Notated music
    ContentDefault% = 10     'ContentTypes = "notated music"
  Case "d"                 'Manuscript notated music
    ContentDefault% = 10     'ContentTypes = "notated music"
  Case "e"                 'Cartographic material
    ContentDefault% = 2      'ContentTypes = "cartographic image"
  Case "f"                 'Manuscript cartographic material
    ContentDefault% = 2      'ContentTypes = "cartographic image"
  Case "g"                 'Projected medium
    ContentDefault% = 23     'ContentTypes = "two-dimensional moving image"
  Case "i"                 'Nonmusical sound recording
    ContentDefault% = 13     'ContentTypes = "spoken word"
  Case "j"                 'Musical sound recording
    ContentDefault% = 11     'ContentTypes = "performed music"
  Case "k"                 'Two-dimensional nonprojectable graphic
    ContentDefault% = 14     'ContentTypes = "still image"
  Case "m"                 'Computer file
    ContentDefault% = 8      'ContentTypes = "computer program"
  Case "o"                 'Kit
    ContentDefault% = 24     'ContentTypes = "other"
  Case "p"                 'Mixed materials
    ContentDefault% = 24     'ContentTypes = "other"
  Case "r"                 'Three-dimensional artifact or naturally occurring object
    ContentDefault% = 21     'ContentTypes = "three-dimensional form"
  Case "t"                 'Manuscript language material
    ContentDefault% = 20     'ContentTypes = "text"
End Select

' Check for a 007 field to approximate RDA Media and Carrier Types, but do this in
' conjunction with the value of "Form" in the fixed field. If the category of material
' (007 $a) corresponds to "Form" (e.g., a microform 007 and "a" in "Form"), the macro
' proceeds. If the two pieces of information don't correspond, the macro goes on to check
' any subsequent 007 fields, continuing until it either finds a corresponding field or
' there are no more 007 fields to check. If no 007 field is found that corresponds to
' "Form", an error message is displayed, and the macro uses the first 007 field found as
' the basis for generating the 337 and 338 fields.

i = 1
Do
  FoundField = CS.GetField( "007", i, Field007$ )
  If FoundField Then
      MARCMedia$   = Mid$( Field007$, 6, 1 )
      MARCCarrier$ = MARCMedia$ & Mid$( Field007$, 11, 1 )
      Select Case MARCMedia$
        Case "c"
          If MARCForm$ Like "[oqs]"Then
              Form007Mismatch$ = ""
              First007$        = ""
              Exit Do
            Else
              Form007Mismatch$ = "This record contains a 007 field describing an electronic resource, but " & DOUBLE_QUOTE & "Form" & DOUBLE_QUOTE & " in the fixed field is not " & SINGLE_QUOTE & "o" & SINGLE_QUOTE & ", " & SINGLE_QUOTE & "q" & SINGLE_QUOTE & ", or " & SINGLE_QUOTE & "s" & SINGLE_QUOTE & "."
          End If
        Case "h"
          If MARCForm$ Like "[abc]" Then
              Form007Mismatch$ = ""
              First007$        = ""
              Exit Do
            Else
              Form007Mismatch$ = "This record contains a 007 field describing a microform, but " & DOUBLE_QUOTE & "Form" & DOUBLE_QUOTE & " in the fixed field is not " & SINGLE_QUOTE & "a" & SINGLE_QUOTE & ", " & SINGLE_QUOTE & "b" & SINGLE_QUOTE & ", or " & SINGLE_QUOTE & "c" & SINGLE_QUOTE & "."
          End If
        Case "f"
          If MARCForm$ = "f" Then
              Form007Mismatch$ = ""
              First007$        = ""
              Exit Do
            Else
              Form007Mismatch$ = "This record contains a 007 field describing tactile material, but " & DOUBLE_QUOTE & "Form" & DOUBLE_QUOTE & " in the fixed field is not " & SINGLE_QUOTE & "f" & SINGLE_QUOTE & "."
          End If
        Case "t"
          If MARCForm$ Like "[ dr]" Then
              Form007Mismatch$ = ""
              First007$        = ""
              Exit Do
            Else
              Form007Mismatch$ = "This record contains a 007 field describing text, but " & DOUBLE_QUOTE & "Form" & DOUBLE_QUOTE & " in the fixed field is not blank, " & SINGLE_QUOTE & "d" & SINGLE_QUOTE & ", or " & SINGLE_QUOTE & "r" & SINGLE_QUOTE & "."
          End If
      End Select
      If i = 1 Then
          First007$ = Field007$
      End If
      i = i + 1
  End If
Loop Until FoundField = FALSE
If First007$ <> "" Then
    MARCMedia$   = Mid$( First007$, 6, 1 )
    MARCCarrier$ = MARCMedia$ & Mid$( First007$, 11, 1 )
End If

If MarcMedia$ <> "" Then
    Select Case MARCMedia$   'Category of material, 007/00
      Case "a"                  'Map
        If MARCType$ Like "[ef]" Then
            MediaDefault% = UNMEDIATED
          Else
            GoTo No007:
        End If
      Case "c"                  'Electronic resource
        MediaDefault% = COMPUTER
      Case "d"                  'Globe
        If MARCType$ Like "[r]" Then
            MediaDefault% = UNMEDIATED
          Else
            GoTo No007:
        End If
      Case "f"                  'Tactile material
        If MARCType$ Like "[akr]" Then
            MediaDefault% = UNMEDIATED
            If MARCType$ Like "[a]" Then ContentDefault% = 18
          Else
            GoTo No007:
        End If
      Case "g"                  'Projected graphic
        If MARCType$ Like "[g]" Then
            MediaDefault% = PROJECTED
          Else
            GoTo No007:
        End If
      Case "h"                  'Microform
        If MARCType$ Like "[acdefkt]" Then
            MediaDefault% = MICROFORM
          Else
            GoTo No007:
        End If
      Case "k"                  'Nonprojected graphic
        If MARCType$ Like "[k]" Then
            MediaDefault% = UNMEDIATED
          Else
            GoTo No007:
        End If
      Case "m"                  'Motion picture
        If MARCType$ Like "[g]" Then
            MediaDefault% = PROJECTED
          Else
            GoTo No007:
        End If
      Case "o"                  'Kit
        If MARCType$ Like "[o]" Then
            MediaDefault% = UNMEDIATED
          Else
            GoTo No007:
        End If
      Case "q"                  'Notated music
        If MARCType$ Like "[cd]" Then
            MediaDefault% = UNMEDIATED
          Else
            GoTo No007:
        End If
      Case "r"                  'Remote-sensing image
        If MARCType$ Like "[e]" Then
            MediaDefault% = UNMEDIATED
          Else
            GoTo No007:
        End If
      Case "s"                  'Sound recording
        If MARCType$ Like "[ij]" Then
            MediaDefault% = AUDIO
          Else
            GoTo No007:
        End If
      Case "t"                  'Text
        If MARCType$ Like "[at]" Then
            MediaDefault% = UNMEDIATED
          Else
            GoTo No007:
        End If
      Case "v"                  'Videorecording
        If MARCType$ Like "[g]" Then
            MediaDefault% = VIDEO
          Else
            GoTo No007:
        End If
      Case "z"                  'Unspecified
        MediaDefault% = UNSPECIFIEDmed
    End Select

    Select Case MARCCarrier$    'Category of material + specific material designation, 007/00 + 007/01
      Case "ad"                 'Atlas
        CarrierDefault% = VOLUME
        CarrierLine$    = CarrierUnmediated( VOLUME )
      Case "ag"                 'Diagram
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "aj"                 'Map
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "ak"                 'Profile
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "aq"                 'Model
        CarrierDefault% = OBJECT
        CarrierLine$    = CarrierUnmediated( OBJECT )
      Case "ar"                 'Remote-sensing image
        CarrierDefault% = 0
      Case "as"                 'Section
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "au"                 'Unspecified [Map]
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "ay"                 'View
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "az"                 'Other [Map]
        CarrierDefault% = 0
      Case "ca"                 'Tape cartridge
        CarrierDefault% = COMPUTER_TAPE_CARTRIDGE
        CarrierLine$    = CarrierComputer( COMPUTER_TAPE_CARTRIDGE )
      Case "cb"                 'Chip cartridge
        CarrierDefault% = COMPUTER_CHIP_CARTRIDGE
        CarrierLine$    = CarrierComputer( COMPUTER_CHIP_CARTRIDGE )
      Case "cc"                 'Computer optical disc cartridge
        CarrierDefault% = COMPUTER_DISC_CARTRIDGE
        CarrierLine$    = CarrierComputer( COMPUTER_DISC_CARTRIDGE )
      Case "cd"                 'Computer disc, type unspecified
        CarrierDefault% = COMPUTER_DISC
        CarrierLine$    = CarrierComputer( COMPUTER_DISC )
      Case "ce"                 'Computer disc cartridge, type unspecified
        CarrierDefault% = COMPUTER_DISC_CARTRIDGE
        CarrierLine$    = CarrierComputer( COMPUTER_DISC_CARTRIDGE )
      Case "cf"                 'Tape cassette
        CarrierDefault% = COMPUTER_TAPE_CASSETTE
        CarrierLine$    = CarrierComputer( COMPUTER_TAPE_CASSETTE )
      Case "ch"                 'Tape reel
        CarrierDefault% = COMPUTER_TAPE_REEL
        CarrierLine$    = CarrierComputer( COMPUTER_TAPE_REEL )
      Case "cj"                 'Magnetic disk
        CarrierDefault% = COMPUTER_DISC
        CarrierLine$    = CarrierComputer( COMPUTER_DISC )
      Case "ck"                 'Computer card
        CarrierDefault% = COMPUTER_CARD
        CarrierLine$    = CarrierComputer( COMPUTER_CARD )
      Case "cm"                 'Magneto-optical disc
        CarrierDefault% = COMPUTER_DISC
        CarrierLine$    = CarrierComputer( COMPUTER_DISC )
      Case "co"                 'Optical disc
        CarrierDefault% = COMPUTER_DISC
        CarrierLine$    = CarrierComputer( COMPUTER_DISC )
      Case "cr"                 'Remote
        CarrierDefault% = ONLINE_RESOURCE
        CarrierLine$    = CarrierComputer( ONLINE_RESOURCE )
      Case "cu"                 'Unspecified [Electronic resource]
        CarrierDefault% = OTHERcom
        CarrierLine$    = CarrierComputer( OTHERcom )
      Case "cz"                 'Other [Electronic resource]
        CarrierDefault% = OTHERcom
        CarrierLine$    = CarrierComputer( OTHERcom )
      Case "da"                 'Celestial globe
        CarrierDefault% = OBJECT
        CarrierLine$    = CarrierUnmediated( OBJECT )
      Case "db"                 'Planetary or lunar globe
        CarrierDefault% = OBJECT
        CarrierLine$    = CarrierUnmediated( OBJECT )
      Case "dc"                 'Terrestrial globe
        CarrierDefault% = OBJECT
        CarrierLine$    = CarrierUnmediated( OBJECT )
      Case "de"                 'Earth moon globe
        CarrierDefault% = OBJECT
        CarrierLine$    = CarrierUnmediated( OBJECT )
      Case "du"                 'Unspecified [Globe]
        CarrierDefault% = OBJECT
        CarrierLine$    = CarrierUnmediated( OBJECT )
      Case "dz"                 'Other [Globe]
        CarrierDefault% = OBJECT
        CarrierLine$    = CarrierUnmediated( OBJECT )
      Case "fa"                 'Moon
        CarrierDefault% = VOLUME
        CarrierLine$    = CarrierUnmediated( VOLUME )
      Case "fb"                 'Braille
        CarrierDefault% = VOLUME
        CarrierLine$    = CarrierUnmediated( VOLUME )
      Case "fc"                 'Combination
        CarrierDefault% = VOLUME
        CarrierLine$    = CarrierUnmediated( VOLUME )
      Case "fd"                 'Tactile, with no writing system
        CarrierDefault% = VOLUME
        CarrierLine$    = CarrierUnmediated( VOLUME )
      Case "fu"                 'Unspecified [Tactile material]
        CarrierDefault% = VOLUME
        CarrierLine$    = CarrierUnmediated( VOLUME )
      Case "fz"                 'Other [Tactile material]
        CarrierDefault% = VOLUME
        CarrierLine$    = CarrierUnmediated( VOLUME )
      Case "gc"                 'Filmstrip cartridge
        CarrierDefault% = FILMSTRIP_CARTRIDGE
        CarrierLine$    = CarrierProjected( FILMSTRIP_CARTRIDGE )
      Case "gd"                 'Filmslip
        CarrierDefault% = FILMSLIP
        CarrierLine$    = CarrierProjected( FILMSLIP )
      Case "gf"                 'Filmstrip, type unspecified
        CarrierDefault% = FILMSTRIP
        CarrierLine$    = CarrierProjected( FILMSTRIP )
      Case "go"                 'Filmstrip roll
        CarrierDefault% = FILMSTRIP
        CarrierLine$    = CarrierProjected( FILMSTRIP )
      Case "gs"                 'Slide
        CarrierDefault% = SLIDE
        CarrierLine$    = CarrierProjected( SLIDE )
      Case "gt"                 'Transparency
        CarrierDefault% = OVERHEAD_TRANSPARENCY
        CarrierLine$    = CarrierProjected( OVERHEAD_TRANSPARENCY )
      Case "gu"                 'Unspecified [Projected graphic]
        CarrierDefault% = OTHERpro
        CarrierLine$    = CarrierProjected( OTHERpro )
      Case "gz"                 'Other [Projected graphic]
        CarrierDefault% = OTHERpro
        CarrierLine$    = CarrierProjected( OTHERpro )
      Case "ha"                 'Aperture card
        CarrierDefault% = APERTURE_CARD
        CarrierLine$    = CarrierMicroform( APERTURE_CARD )
      Case "hb"                 'Microfilm cartridge
        CarrierDefault% = MICROFILM_CARTRIDGE
        CarrierLine$    = CarrierMicroform( MICROFILM_CARTRIDGE )
      Case "hc"                 'Microfilm cassette
        CarrierDefault% = MICROFILM_CASSETTE
        CarrierLine$    = CarrierMicroform( MICROFILM_CASSETTE )
      Case "hd"                 'Microfilm reel
        CarrierDefault% = MICROFILM_REEL
        CarrierLine$    = CarrierMicroform( MICROFILM_REEL )
      Case "he"                 'Microfiche
        CarrierDefault% = MICROFICHE
        CarrierLine$    = CarrierMicroform( MICROFICHE )
      Case "hf"                 'Microfiche cassette
        CarrierDefault% = MICROFICHE_CASSETTE
        CarrierLine$    = CarrierMicroform( MICROFICHE_CASSETTE )
      Case "hg"                 'Microopaque
        CarrierDefault% = MICROOPAQUE
        CarrierLine$    = CarrierMicroform( MICROOPAQUE )
      Case "hh"                 'Microfilm slip
        CarrierDefault% = MICROFILM_SLIP
        CarrierLine$    = CarrierMicroform( MICROFILM_SLIP )
      Case "hj"                 'Microfilm roll
        CarrierDefault% = MICROFILM_ROLL
        CarrierLine$    = CarrierMicroform( MICROFILM_ROLL )
      Case "hu"                 'Unspecified [Microform]
        CarrierDefault% = OTHERmic
        CarrierLine$    = CarrierMicroform( OTHERmic )
      Case "hz"                 'Other [Microform]
        CarrierDefault% = OTHERmic
        CarrierLine$    = CarrierMicroform( OTHERmic )
      Case "ka"                 'Activity card
        CarrierDefault% = CARD
        CarrierLine$    = CarrierUnmediated( CARD )
      Case "kc"                 'Collage
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "kd"                 'Drawing
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "ke"                 'Painting
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "kf"                 'Photomechanical print
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "kg"                 'Photonegative
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "kh"                 'Photoprint
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "ki"                 'Picture
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "kj"                 'Print
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "kk"                 'Poster
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "kl"                 'Technical drawing
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "kn"                 'Chart
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "ko"                 'Flash card
        CarrierDefault% = CARD
        CarrierLine$    = CarrierUnmediated( CARD )
      Case "kp"                 'Postcard
        CarrierDefault% = CARD
        CarrierLine$    = CarrierUnmediated( CARD )
      Case "kq"                 'Icon
        CarrierDefault% = OTHERunm
        CarrierLine$    = CarrierUnmediated( OTHERunm )
      Case "kr"                 'Radiograph
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "ks"                 'Study print
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "ku"                 'Unspecified [Nonprojected graphic]
        CarrierDefault% = OTHERunm
        CarrierLine$    = CarrierUnmediated( OTHERunm )
      Case "kv"                 'Photograph, type unspecified
        CarrierDefault% = SHEET
        CarrierLine$    = CarrierUnmediated( SHEET )
      Case "kz"                 'Other [Nonprojected graphic]
        CarrierDefault% = OTHERunm
        CarrierLine$    = CarrierUnmediated( OTHERunm )
      Case "mc"                 'Film cartridge
        CarrierDefault% = FILM_CARTRIDGE
        CarrierLine$    = CarrierProjected( FILM_CARTRIDGE )
      Case "mf"                 'Film cassette
        CarrierDefault% = FILM_CASSETTE
        CarrierLine$    = CarrierProjected( FILM_CASSETTE )
      Case "mo"                 'Film roll
        CarrierDefault% = FILM_ROLL
        CarrierLine$    = CarrierProjected( FILM_ROLL )
      Case "mr"                 'Film reel
        CarrierDefault% = FILM_REEL
        CarrierLine$    = CarrierProjected( FILM_REEL )
      Case "mu"                 'Unspecified [Motion picture]
        CarrierDefault% = OTHERpro
        CarrierLine$    = CarrierProjected( OTHERpro )
      Case "mz"                 'Other [Motion picture]
        CarrierDefault% = OTHERpro
        CarrierLine$    = CarrierProjected( OTHERpro )
      Case "ou"                 'Unspecified [Kit]
        CarrierDefault% = 0
      Case "qu"                 'Unspecified [Notated music]
        CarrierDefault% = 0
      Case "ru"                 'Unspecified [Remote-sensing image]
        CarrierDefault% = 0
      Case "sd"                 'Sound disc
        CarrierDefault% = AUDIO_DISC
        CarrierLine$    = CarrierAudio( AUDIO_DISC )
      Case "se"                 'Cylinder
        CarrierDefault% = AUDIO_CYLINDER
        CarrierLine$    = CarrierAudio( AUDIO_CYLINDER )
      Case "sg"                 'Sound cartridge
        CarrierDefault% = AUDIO_CARTRIDGE
        CarrierLine$    = CarrierAudio( AUDIO_CARTRIDGE )
      Case "si"                 'Sound-track film
        CarrierDefault% = SOUNDTRACK_REEL
        CarrierLine$    = CarrierAudio( SOUNDTRACK_REEL )
      Case "sq"                 'Roll
        CarrierDefault% = AUDIO_ROLL
        CarrierLine$    = CarrierAudio( AUDIO_ROLL )
      Case "ss"                 'Sound cassette
        CarrierDefault% = AUDIOCASSETTE
        CarrierLine$    = CarrierAudio( AUDIOCASSETTE )
      Case "st"                 'Sound-tape reel
        CarrierDefault% = AUDIOTAPE_REEL
        CarrierLine$    = CarrierAudio( AUDIOTAPE_REEL )
      Case "su"                 'Unspecified [Sound recording]
        CarrierDefault% = OTHERaud
        CarrierLine$    = CarrierAudio( OTHERaud )
      Case "sw"                 'Wire recording
        CarrierDefault% = OTHERaud
        CarrierLine$    = CarrierAudio( OTHERaud )
      Case "sz"                 'Other [Sound recording]
        CarrierDefault% = OTHERaud
        CarrierLine$    = CarrierAudio( OTHERaud )
      Case "ta"                 'Regular print
        CarrierDefault% = VOLUME
        CarrierLine$    = CarrierUnmediated( VOLUME )
      Case "tb"                 'Large print
        CarrierDefault% = VOLUME
        CarrierLine$    = CarrierUnmediated( VOLUME )
      Case "tc"                 'Braille
        CarrierDefault% = VOLUME
        CarrierLine$    = CarrierUnmediated( VOLUME )
      Case "td"                 'Loose-leaf
        CarrierDefault% = VOLUME
        CarrierLine$    = CarrierUnmediated( VOLUME )
      Case "tu"                 'Unspecified [Text]
        CarrierDefault% = OTHERunm
        CarrierLine$    = CarrierUnmediated( OTHERunm )
      Case "tz"                 'Other [Text]
        CarrierDefault% = OTHERunm
        CarrierLine$    = CarrierUnmediated( OTHERunm )
      Case "vc"                 'Videocartridge
        CarrierDefault% = VIDEO_CARTRIDGE
        CarrierLine$    = CarrierVideo( VIDEO_CARTRIDGE )
      Case "vd"                 'Videodisc
        CarrierDefault% = VIDEODISC
        CarrierLine$    = CarrierVideo( VIDEODISC )
      Case "vf"                 'Videocassette
        CarrierDefault% = VIDEOCASSETTE
        CarrierLine$    = CarrierVideo( VIDEOCASSETTE )
      Case "vr"                 'Videoreel
        CarrierDefault% = VIDEOTAPE_REEL
        CarrierLine$    = CarrierVideo( VIDEOTAPE_REEL )
      Case "vu"                 'Unspecified [Videorecording]
        CarrierDefault% = OTHERvid
        CarrierLine$    = CarrierVideo( OTHERvid )
      Case "vz"                 'Other [Videorecording]
        CarrierDefault% = OTHERvid
        CarrierLine$    = CarrierVideo( OTHERvid )
      Case "zm"                 'Multiple physical forms
        CarrierDefault% = 0
      Case "zu"                 'Unspecified [Unspecified]
        CarrierDefault% = UNSPECIFIED_CARRIER
      Case "zz"                 'Other [Unspecified]
        CarrierDefault% = UNSPECIFIED_CARRIER
        CarrierLine$    = CarrierOther( UNSPECIFIED_CARRIER )
    End Select

  Else

' If no 007 is found, the codes found in "Form" and "TMat" may be used to offer default
' values, although those codes are less precise. Begin with "Form".

No007:

    Select Case MARCForm$
      Case "NA"                '"Form" code unavailable
        MediaDefault%    = 0     'No suggestions
        CarrierDefault%  = 0
      Case " ", "d", "r"      'printed language material
        MARCForm$        = " "
        MediaDefault%    = UNMEDIATED

' For textual materials, check the 300 field (if present) for the terms "sheet" and
' "card." If one of these terms is found it can be offered as an alternative to the
' default term "volume."

        If CS.GetField ( "300", 1, FieldData$ ) Then
            If InStr( FieldData$, "sheet" ) Then
                CarrierDefault% = SHEET
              ElseIf InStr( FieldData$, "card" ) Then
                CarrierDefault% = CARD
            End If
        End If
        If CarrierDefault% = 99 Then CarrierDefault% = VOLUME
        CarrierLine$     = CarrierUnmediated( VOLUME )
      Case "a"                 'Microfilm
        MediaDefault%    = MICROFORM
        CarrierDefault%  = MICROFILM_REEL
        CarrierLine$     = CarrierMicroform( MICROFILM_REEL )
        Form007Mismatch$ = "The fixed field element " & DOUBLE_QUOTE & "Form" & DOUBLE_QUOTE & " describes a microfilm, but there is no corresponding 007 field."
      Case "b"                'Microfiche
        MediaDefault%    = MICROFORM
        CarrierDefault%  = MICROFICHE
        CarrierLine$     = CarrierMicroform( MICROFICHE )
        Form007Mismatch$ = "The fixed field element " & DOUBLE_QUOTE & "Form" & DOUBLE_QUOTE & " describes a microfiche, but there is no corresponding 007 field."
      Case "c"                'Microopaque
        MediaDefault%    = MICROFORM
        CarrierDefault%  = MICROOPAQUE
        CarrierLine$     = CarrierMicroform( MICROOPAQUE )
        Form007Mismatch$ = "The fixed field element " & DOUBLE_QUOTE & "Form" & DOUBLE_QUOTE & " describes a microopaque, but there is no corresponding 007 field."
      Case "f"                'Braille
        MediaDefault%    = UNMEDIATED
        CarrierDefault%  = VOLUME
        CarrierLine$     = CarrierUnmediated( VOLUME )
        Form007Mismatch$ = "The fixed field element " & DOUBLE_QUOTE & "Form" & DOUBLE_QUOTE & " describes a braille item, but there is no corresponding 007 field."
      Case "o"                'Online
        MediaDefault%    = COMPUTER
        CarrierDefault%  = ONLINE_RESOURCE
        CarrierLine$     = CarrierComputer( ONLINE_RESOURCE )
        Form007Mismatch$ = "The fixed field element " & DOUBLE_QUOTE & "Form" & DOUBLE_QUOTE & " describes an electronic resource, but there is no corresponding 007 field."
      Case "q", "s"           'Direct electronic
        MediaDefault%    = COMPUTER
        CarrierDefault%  = 0     'User selection
        Form007Mismatch$ = "The fixed field element " & DOUBLE_QUOTE & "Form" & DOUBLE_QUOTE & " describes an electronic resource, but there is no corresponding 007 field."
    End Select

' If the Form of Item is electronic, then it doesn't matter what the Type of Visual
' Material is being described, the Media Type is always "computer," and the user must
' choose the appropriate carrier for resources not online. Otherwise, the code in "TMat"
' provides suggestions for the default display. Although it is not fine-grained enough to
' adequately describe what RDA wants to know, it provides more detail than "Form."

    If MARCForm$ Like "[!oqs]" And MARCTMat$ <> "NA" Then
        Select Case MARCTMat$
          Case "p"                'Microscope slide
            MediaDefault%   = MICROSCOPIC
            CarrierDefault% = 1     'CarrierMicroscopic = "Microscope slide"
            CarrierLine$    = CarrierMicroscopic( 1 )
          Case "m"                'Motion picture
            MediaDefault%   = PROJECTED
            CarrierDefault% = FILM_REEL ' Could also be a cartridge, cassette, or roll
            CarrierLine$    = CarrierProjected( FILM_REEL )
          Case "f"                'Filmstrip
            MediaDefault%   = PROJECTED
            CarrierDefault% = FILMSTRIP
            CarrierLine$    = CarrierProjected( FILMSTRIP )
          Case "t"                'Transparency
            MediaDefault%   = PROJECTED
            CarrierDefault% = OVERHEAD_TRANSPARENCY
            CarrierLine$    = CarrierProjected( OVERHEAD_TRANSPARENCY )
          Case "s"                'Slide
            MediaDefault%   = PROJECTED
            CarrierDefault% = SLIDE
            CarrierLine$    = CarrierProjected( SLIDE )
          Case "o"                'Flash card
            MediaDefault%   = UNMEDIATED
            CarrierDefault% = CARD
            CarrierLine$    = CarrierUnmediated( CARD )
          Case "a", "b", "c", "d", "g", "k", "q", "r", "w"   'a - Art original, b - Kit, c - Art reproduction, d - Diorama,
                                                             'g - Game, k - Graphic, q - Model, r - Realia, w - Toy
            MediaDefault%   = UNMEDIATED
            CarrierDefault% = OBJECT
            CarrierLine$    = CarrierUnmediated( OBJECT )
          Case "i", "l", "n"      'i - Picture, l - Technical drawing, n - Chart
            MediaDefault%   = UNMEDIATED
            CarrierDefault% = SHEET
            CarrierLine$    = CarrierUnmediated( SHEET )
          Case "v"                'Videorecording
            MediaDefault%   = VIDEO
            CarrierDefault% = 0     'User selection : Could be tape or disc
          Case "z"                'Other
            MediaDefault%   = OTHERmed
            CarrierDefault% = 0     'User selection
          Case ""                 'No attempt to code
            MediaDefault%   = UNSPECIFIEDmed
            CarrierDefault% = 0     'User selection
        End Select
    End If
End If

' If no specific default value for the list of carrier types is available, set the
' default value to 0 so no type is suggested in the dialog box, forcing the manual
' selection of a type.

If CarrierDefault% = 99 Then
    CarrierDefault% = 0
End If

' Finally, compare any existing 336-338 fields with the 33X fields constructed according
' to information obtained from the record, above. An existing field identical to a
' calculated field needs nothing done to it. If the content of the two fields is the
' same, but the form is different (e.g., one has codes, the other has terms), the
' existing field need be replaced only to match the form chosen by the
' TERM_OR_CODE_CHOICE variable selected above. An existing field entirely different from
' a calculated field will be replaced only if that option is selected in the dialog box,
' as when a new record has been derived for a different format, and the 336-338 fields no
' longer correspond to reality.

If Count33X% > 0 Then
    For i = 0 To UBound( aExisting33X )
      Tag$ = Left$( aExisting33X( i ).tContent, 3 )
      Select Case Tag$
        Case "336"
          Call CompareFields( ContentTypes( ContentDefault% ), "336" )
          Count336% = Count336% + 1
        Case "337"
          Call CompareFields( MediaTypes( MediaDefault%), "337" )
          Count337% = Count337% + 1
        Case "338"
          Call CompareFields( CarrierLine$, "338" )
          Count338% = Count338% + 1
      End Select
    Next i

' The macro wants records to have all three 336-338 fields, so if some fields are absent,
' the missing ones are temporarily supplied by means of dummy fields. The dummy fields
' are of course different from any calculated or constructed field--their content is
' solely a tag--and they are assigned line numbers according to where they would be in
' the record if they existed. These numbers are calculated according to their position
' relative to the first or last line number recorded for an existing adjacent field of a
' different tag. Once a field is populated from the drop-down lists, the dummy value is
' replaced by the selected value.

    If Count336% = 0 Then MissingFields% = MissingFields% + 1
    If Count337% = 0 Then MissingFields% = MissingFields% + 2
    If Count338% = 0 Then MissingFields% = MissingFields% + 4

    Select Case MissingFields%

      Case 1
        UBaExisting33X% = UBound( aExisting33X ) + 1
        ReDim Preserve aExisting33X( UBaExisting33X% )
        aExisting33X( UBaExisting33X% ).tContent        = "336"
        aExisting33X( UBaExisting33X% ).tComparison     = ABSENT
        aExisting33X( UBaExisting33X% ).tLine           = FindFieldLine( "337", FIRST_FIELD, 1 )

      Case 2
        UBaExisting33X% = UBound( aExisting33X ) + 1
        ReDim Preserve aExisting33X( UBaExisting33X% )
        aExisting33X( UBaExisting33X% ).tContent        = "337"
        aExisting33X( UBaExisting33X% ).tComparison     = ABSENT
        aExisting33X( UBaExisting33X% ).tLine           = FindFieldLine( "336", LAST_FIELD, 1 ) + 1

      Case 3
        UBaExisting33X% = UBound( aExisting33X ) + 2
        ReDim Preserve aExisting33X( UBaExisting33X% )
        aExisting33X( UBaExisting33X% - 1 ).tContent    = "336"
        aExisting33X( UBaExisting33X% - 1 ).tComparison = ABSENT
        aExisting33X( UBaExisting33X% - 1 ).tLine       = FindFieldLine( "338", FIRST_FIELD, 1 )
        aExisting33X( UBaExisting33X% ).tContent        = "337"
        aExisting33X( UBaExisting33X% ).tComparison     = ABSENT
        aExisting33X( UBaExisting33X% ).tLine           = FindFieldLine( "338", FIRST_FIELD, 1 ) + 1

      Case 4
        UBaExisting33X% = UBound( aExisting33X ) + 1
        ReDim Preserve aExisting33X( UBaExisting33X% )
        aExisting33X( UBaExisting33X% ).tContent        = "338"
        aExisting33X( UBaExisting33X% ).tComparison     = ABSENT
        aExisting33X( UBaExisting33X% ).tLine           = FindFieldLine( "337", LAST_FIELD, 1 ) + 1

      Case 5
        UBaExisting33X% = UBound( aExisting33X ) + 2
        ReDim Preserve aExisting33X( UBaExisting33X% )
        aExisting33X( UBaExisting33X% - 1 ).tContent    = "336"
        aExisting33X( UBaExisting33X% - 1 ).tComparison = ABSENT
        aExisting33X( UBaExisting33X% - 1 ).tLine       = FindFieldLine( "337", FIRST_FIELD, 1 )
        aExisting33X( UBaExisting33X% ).tContent        = "338"
        aExisting33X( UBaExisting33X% ).tComparison     = ABSENT
        aExisting33X( UBaExisting33X% ).tLine           = FindFieldLine( "337", LAST_FIELD, 1 ) + 1

      Case 6
        UBaExisting33X% = UBound( aExisting33X ) + 2
        ReDim Preserve aExisting33X( UBaExisting33X% )
        aExisting33X( UBaExisting33X% - 1 ).tContent    = "337"
        aExisting33X( UBaExisting33X% - 1 ).tComparison = ABSENT
        aExisting33X( UBaExisting33X% - 1 ).tLine       = FindFieldLine( "336", LAST_FIELD, 1 )
        aExisting33X( UBaExisting33X% ).tContent        = "338"
        aExisting33X( UBaExisting33X% ).tComparison     = ABSENT
        aExisting33X( UBaExisting33X% ).tLine           = FindFieldLine( "336", LAST_FIELD, 1 ) + 1

    End Select

' If all fields are absent, the array is pretty skimpy.

  Else
    ReDim aExisting33X( 2 )
    aExisting33X( 0 ).tContent    = "336"
    aExisting33X( 0 ).tComparison = ABSENT
    aExisting33X( 1 ).tContent    = "337"
    aExisting33X( 1 ).tComparison = ABSENT
    aExisting33X( 2 ).tContent    = "338"
    aExisting33X( 2 ).tComparison = ABSENT

End If

' There is enough information now to display the dialog box with some default suggestions
' and appropriate options. But first, show a message warning about a problem with
' mismatching data on the record.

If Form007Mismatch$ <> "" Then
    MsgBox "Warning! " & Form007Mismatch$, WARNING_MESSAGE, WaltsMacros$
End If

Begin Dialog Dialog1Definition  332, 168, WaltsMacros$, .Dialog1ControlFunction
  OKButton       210, 144,  52,  14
  CancelButton   270, 144,  52,  14
  DropListBox     60,  28, 160, 128, ContentTypes(),                                       .Content
  DropListBox     60,  48, 160, 108, MediaTypes(),                                         .Media
  DropListBox     60,  68, 160, 108, CarrierTypes(),                                       .Carrier
  CheckBox        18,  96,  12,  12, "",                                                   .Field_1_CheckBox
  CheckBox        18, 108,  12,  12, "",                                                   .Field_2_CheckBox
  CheckBox        18, 120,  12,  12, "",                                                   .Field_3_CheckBox
  Text            30,  98, 280,  12, "",                                                   .Field_1_Text
  Text            30, 110, 280,  12, "",                                                   .Field_2_Text
  Text            30, 122, 280,  12, "",                                                   .Field_3_Text
  TextBox        108,  10, 112,  12,                                                       .Materials
  OptionGroup                                                                              .TermOrCodeChoice
   OptionButton  240,  39,  70,  12, "Codes and terms",                                    .OptionButton1
   OptionButton  240,  51,  52,  12, "Terms only",                                         .OptionButton2
   OptionButton  240,  63,  52,  12, "Codes only",                                         .OptionButton3
   PushButton    230,   8,  60,  14, "&Update display",                                    .Update
  GroupBox       230,  28,  92,  52, "Codes or terms?"
  Text            10,  10,  96,   8, "Materials specified (optional):"
  Text            10,  30,  48,   8, "Content Type:"
  Text            10,  50,  48,   8, "Media Type:"
  Text            10,  70,  48,   8, "Carrier Type:"
  Text            52,  50,   8,   8, "?",                                                  .Q337
  Text            52,  70,   8,   8, "?",                                                  .Q338
  Text            60,  86, 160,  24, "",                                                   .InfoMessage
  GroupBox        10,  86, 312,  50, "",                                                   .FieldBox
  Text            10, 140, 160,   8, "Mark a checkbox to replace the field (if present).", .CheckboxMark
  Text            10, 148, 160,   8, "Clear the checkbox to add the field.",               .CheckboxClear
End Dialog

Dim Dialog1 as Dialog1Definition

Select Case Dialog( Dialog1 )

  Case DIALOG_BUTTON_OK

' When "OK" is clicked, go through the fields presented in order to add them or replace
' the record's existing fields. Not all fields will be present, of course, so the first
' field may not be a 336, and the last may not be a 338; but in any case, there are only
' three fields to consider.

    For i = 0 To 2

      Select Case i

        Case 0
          If NewField1$ <> "" Then
              ReplaceVal% = Dialog1.Field_1_CheckBox
              Select Case Left$( NewField1$, 3 )
                Case "336"
                  Tag$        = "336"
                  TagCount%   = Count336%
                  FieldToAdd$ = FixDelimiter( Field336Finished$ )
                Case "337"
                  Tag$        = "337"
                  TagCount%   = Count337%
                  FieldToAdd$ = FixDelimiter( Field337Finished$ )
                Case "338"
                  Tag$        = "338"
                  TagCount%   = Count338%
                  FieldToAdd$ = FixDelimiter( Field338Finished$ )
              End Select
              If AddAndReplace( ReplaceVal%, Tag$, TagCount%, FieldToAdd$ ) = 0 Then GoTo AddFail:
          End If

        Case 1
          If NewField2$ <> "" Then
              ReplaceVal% = Dialog1.Field_2_CheckBox
              Select Case Left$( NewField2$, 3 )
                Case "337"
                  Tag$        = "337"
                  TagCount%   = Count337%
                  FieldToAdd$ = FixDelimiter( Field337Finished$ )
                Case "338"
                  Tag$        = "338"
                  TagCount%   = Count338%
                  FieldToAdd$ = FixDelimiter( Field338Finished$ )
              End Select
              If AddAndReplace( ReplaceVal%, Tag$, TagCount%, FieldToAdd$ ) = 0 Then GoTo AddFail:
          End If

        Case 2
          If NewField3$ <> "" Then
              ReplaceVal% = Dialog1.Field_3_CheckBox
              Tag$        = "338"
              TagCount%   = Count338%
              FieldToAdd$ = FixDelimiter( Field338Finished$ )
              If AddAndReplace( ReplaceVal%, Tag$, TagCount%, FieldToAdd$ ) = 0 Then GoTo AddFail:
          End If

      End Select

    Next i

  Case DIALOG_BUTTON_CANCEL

    Exit Sub

End Select

Done:

If NotAdded$ <> "" Then
    MsgBox NotAdded$, INFORMATION_MESSAGE, WaltsMacros$
End If

If Form007Mismatch$ <> "" Then
    MsgBox "33X fields were added, but this record contains contradictory information. " & Form007Mismatch$, WARNING_MESSAGE, WaltsMacros$
End If
Exit Sub

AddFail:

MsgBox "Sorry, this macro could not add 33X fields!", CRITICAL_MESSAGE, WaltsMacros$

End Sub

'****************************************************************************************

Sub CompareFields( CalcString$, Tag$ )

' When a new 336-338 field has been calculated (from an analysis of various parts of the
' record) or constructed (from selection of terms from the drop-down lists), it must be
' compared to any existing 33X fields, which are then flagged to indicate the nature of
' the comparison. There are three possibilities: The new field and an existing 33X field
' are exactly the same; the two fields have the same content, but are different in form;
' or they have different content. An existing field that is different from the new field
' will be replaced by the new field only if the field's checkbox is checked; otherwise,
' the new field is added. An existing field that matches the new field will be ignored.
' If an existing field has the same content as a new field, the latter will replace the
' former only if the checkbox is checked.

Const CODE_ONLY     As Integer = 2
Const TERM_AND_CODE As Integer = 3
Const TERM_ONLY     As Integer = 1

Dim CalculatedCode$
Dim CalculatedCombination%
Dim CalculatedTerm$
Dim ComparisonResult%
Dim ExistingCode$
Dim ExistingCombination%
Dim ExistingMaterialType$
Dim ExistingTerm$
Dim Start%
Dim Subfield$
Dim SubfieldCode$
Dim TempString$

Dim FoundField               : FoundField = FALSE

Dim i As Integer, j As Integer, p As Integer, q As Integer

For i = 0 To UBound( aExisting33X )
  If aExisting33X( i ).tComparison = ABSENT Then Exit Sub
  TempString$ = aExisting33X( i ).tContent
  If Left$( TempString$, 3 ) = Tag$ Then
      TempString$ = Mid$( TempString$, 6 )
      If Left$( TempString$, 1 ) <> DELIMITER Then
          TempString$ = DELIMITER & "a " & TempString$
      End If
      Start% = 1

' Start by isolating the different subfields in the field.

      Do
        p = InStr( Start%, TempString$, DELIMITER )
        If p <> 0 Then
            SubfieldCode$ = Mid$( TempString$, p + 1, 1 )
            q = InStr( p + 1, TempString$, DELIMITER )
            If q <> 0 Then
                Subfield$ = Trim$( Mid$( TempString$, p + 2, q - p - 3 ) )
              Else
                Subfield$ = Trim$( Mid$( TempString$, p + 2 ) )
            End If
            Select Case SubfieldCode$
              Case "a"
                ExistingTerm$ = Subfield$
              Case "b"
                ExistingCode$ = Subfield$

' If the source of the term or codes is not simple "rda..." the existing field is
' different and the sub has done its duty.

              Case "2"
                Select Case Subfield$
                  Case "rdacontent", "rdamedia", "rdacarrier"
                  Case Else
                    aExisting33X( i ).tComparison = ComparisonResult%
                    Exit Sub
                End Select

' Keep track of any materials specified. It won't affect the match but will affect
' display.

              Case "3"
                ExistingMaterialType$ = Subfield$
            End Select

        End If
        Start% = p + 1
      Loop Until p = 0

      If ExistingTerm$ <> "" Then
          If ExistingCode$ = "" Then
              ExistingCombination% = TERM_ONLY
            Else
              ExistingCombination% = TERM_AND_CODE
          End If
        Else
          ExistingCombination% = CODE_ONLY
      End If

      CalculatedTerm$ = Trim$( Left$ ( CalcString$, 128 ) )
      CalculatedCode$ = Trim$( Right$( CalcString$, 128 ) )

' Compare content--by term, if present, otherwise by code.

      If ExistingTerm$ <> "" Then
          If ExistingTerm$ = CalculatedTerm$ Then
              If ExistingCombination% = TERM_OR_CODE_CHOICE Then
                  ComparisonResult% = IDENTICAL
                Else
                  ComparisonResult% = REPLACEABLE
              End If
            Else
              ComparisonResult% = DIFFERENT
          End If
        Else
          If ExistingCode$ = CalculatedCode$ Then
              If ExistingCombination% = TERM_OR_CODE_CHOICE Then
                  ComparisonResult% = IDENTICAL
                Else
                  ComparisonResult% = REPLACEABLE
              End If
            Else
              ComparisonResult% = DIFFERENT
          End If
      End If

      If ExistingMaterialType$ <> MaterialsSpecified$ Then
          If ComparisonResult% = IDENTICAL Then
              ComparisonResult% = REPLACEABLE
            Else
              ComparisonResult% = DIFFERENT
          End If
      End If

      aExisting33X( i ).tComparison = ComparisonResult%

  End If
Next i

End Sub

'****************************************************************************************

Sub FillArrays

' Fill the arrays with the values to display.

CarrierAudio( 0 )         = "[Select a carrier type]"
CarrierAudio( 1 )         = "audio cartridge"                             & Space$( SPACER ) & "sg"
CarrierAudio( 2 )         = "audio cylinder"                              & Space$( SPACER ) & "se"
CarrierAudio( 3 )         = "audio disc"                                  & Space$( SPACER ) & "sd"
CarrierAudio( 4 )         = "audio roll"                                  & Space$( SPACER ) & "sq"
CarrierAudio( 5 )         = "audiocassette"                               & Space$( SPACER ) & "ss"
CarrierAudio( 6 )         = "audiotape reel"                              & Space$( SPACER ) & "st"
CarrierAudio( 7 )         = "sound-track reel"                            & Space$( SPACER ) & "si"
CarrierAudio( 8 )         = "other"                                       & Space$( SPACER ) & "sz"

CarrierComputer( 0 )      = "[Select a carrier type]"
CarrierComputer( 1 )      = "computer card"                               & Space$( SPACER ) & "ck"
CarrierComputer( 2 )      = "computer chip cartridge"                     & Space$( SPACER ) & "cb"
CarrierComputer( 3 )      = "computer disc"                               & Space$( SPACER ) & "cd"
CarrierComputer( 4 )      = "computer disc cartridge"                     & Space$( SPACER ) & "ce"
CarrierComputer( 5 )      = "computer tape cartridge"                     & Space$( SPACER ) & "ca"
CarrierComputer( 6 )      = "computer tape cassette"                      & Space$( SPACER ) & "cf"
CarrierComputer( 7 )      = "computer tape reel"                          & Space$( SPACER ) & "ch"
CarrierComputer( 8 )      = "online resource"                             & Space$( SPACER ) & "cr"
CarrierComputer( 9 )      = "other"                                       & Space$( SPACER ) & "cz"

CarrierMicroform( 0 )     = "[Select a carrier type]"
CarrierMicroform( 1 )     = "aperture card"                               & Space$( SPACER ) & "ha"
CarrierMicroform( 2 )     = "microfiche"                                  & Space$( SPACER ) & "he"
CarrierMicroform( 3 )     = "microfiche cassette"                         & Space$( SPACER ) & "hf"
CarrierMicroform( 4 )     = "microfilm cartridge"                         & Space$( SPACER ) & "hb"
CarrierMicroform( 5 )     = "microfilm cassette"                          & Space$( SPACER ) & "hc"
CarrierMicroform( 6 )     = "microfilm reel"                              & Space$( SPACER ) & "hd"
CarrierMicroform( 7 )     = "microfilm roll"                              & Space$( SPACER ) & "hj"
CarrierMicroform( 8 )     = "microfilm slip"                              & Space$( SPACER ) & "hh"
CarrierMicroform( 9 )     = "microopaque"                                 & Space$( SPACER ) & "hg"
CarrierMicroform( 10 )    = "other"                                       & Space$( SPACER ) & "hz"

CarrierMicroscopic( 0 )   = "[Select a carrier type]"
CarrierMicroscopic( 1 )   = "microscope slide"                            & Space$( SPACER ) & "pp"
CarrierMicroscopic( 2 )   = "other"                                       & Space$( SPACER ) & "pz"

CarrierOther( 0 )         = "unspecified"                                 & Space$( SPACER ) & "zu"

CarrierProjected( 0 )     = "[Select a carrier type]"
CarrierProjected( 1 )     = "film cartridge"                              & Space$( SPACER ) & "mc"
CarrierProjected( 2 )     = "film cassette"                               & Space$( SPACER ) & "mf"
CarrierProjected( 3 )     = "film reel"                                   & Space$( SPACER ) & "mr"
CarrierProjected( 4 )     = "film roll"                                   & Space$( SPACER ) & "mo"
CarrierProjected( 5 )     = "filmslip"                                    & Space$( SPACER ) & "gd"
CarrierProjected( 6 )     = "filmstrip"                                   & Space$( SPACER ) & "gf"
CarrierProjected( 7 )     = "filmstrip cartridge"                         & Space$( SPACER ) & "gc"
CarrierProjected( 8 )     = "overhead transparency"                       & Space$( SPACER ) & "gt"
CarrierProjected( 9 )     = "slide"                                       & Space$( SPACER ) & "gs"
CarrierProjected( 10 )    = "other"                                       & Space$( SPACER ) & "mz"

CarrierStereographic( 0 ) = "[Select a carrier type]"
CarrierStereographic( 1 ) = "stereograph card"                            & Space$( SPACER ) & "eh"
CarrierStereographic( 2 ) = "stereograph disc"                            & Space$( SPACER ) & "es"
CarrierStereographic( 3 ) = "other"                                       & Space$( SPACER ) & "ez"

ReDim CarrierTypes( 0 )
CarrierTypes( 0 )         = "[Then select a carrier type]"

CarrierUnmediated( 0 )    = "[Select a carrier type]"
CarrierUnmediated( 1 )    = "card"                                        & Space$( SPACER ) & "no"
CarrierUnmediated( 2 )    = "flipchart"                                   & Space$( SPACER ) & "nn"
CarrierUnmediated( 3 )    = "object"                                      & Space$( SPACER ) & "nr"
CarrierUnmediated( 4 )    = "roll"                                        & Space$( SPACER ) & "na"
CarrierUnmediated( 5 )    = "sheet"                                       & Space$( SPACER ) & "nb"
CarrierUnmediated( 6 )    = "volume"                                      & Space$( SPACER ) & "nc"
CarrierUnmediated( 7 )    = "other"                                       & Space$( SPACER ) & "nz"

CarrierVideo( 0 )         = "[Select a carrier type]"
CarrierVideo( 1 )         = "video cartridge"                             & Space$( SPACER ) & "vc"
CarrierVideo( 2 )         = "videocassette"                               & Space$( SPACER ) & "vf"
CarrierVideo( 3 )         = "videodisc"                                   & Space$( SPACER ) & "vd"
CarrierVideo( 4 )         = "videotape reel"                              & Space$( SPACER ) & "vr"
CarrierVideo( 5 )         = "other"                                       & Space$( SPACER ) & "vz"

ContentTypes( 0 )         = "[Select a content type]"
ContentTypes( 1 )         = "cartographic dataset"                        & Space$( SPACER ) & "crd"
ContentTypes( 2 )         = "cartographic image"                          & Space$( SPACER ) & "cri"
ContentTypes( 3 )         = "cartographic moving image"                   & Space$( SPACER ) & "crm"
ContentTypes( 4 )         = "cartographic tactile image"                  & Space$( SPACER ) & "crt"
ContentTypes( 5 )         = "cartographic tactile three-dimensional form" & Space$( SPACER ) & "crn"
ContentTypes( 6 )         = "cartographic three-dimensional form"         & Space$( SPACER ) & "crf"
ContentTypes( 7 )         = "computer dataset"                            & Space$( SPACER ) & "cod"
ContentTypes( 8 )         = "computer program"                            & Space$( SPACER ) & "cop"
ContentTypes( 9 )         = "notated movement"                            & Space$( SPACER ) & "ntv"
ContentTypes( 10 )        = "notated music"                               & Space$( SPACER ) & "ntm"
ContentTypes( 11 )        = "performed music"                             & Space$( SPACER ) & "prm"
ContentTypes( 12 )        = "sounds"                                      & Space$( SPACER ) & "snd"
ContentTypes( 13 )        = "spoken word"                                 & Space$( SPACER ) & "spw"
ContentTypes( 14 )        = "still image"                                 & Space$( SPACER ) & "sti"
ContentTypes( 15 )        = "tactile image"                               & Space$( SPACER ) & "tci"
ContentTypes( 16 )        = "tactile notated music"                       & Space$( SPACER ) & "tcm"
ContentTypes( 17 )        = "tactile notated movement"                    & Space$( SPACER ) & "tcn"
ContentTypes( 18 )        = "tactile text"                                & Space$( SPACER ) & "tct"
ContentTypes( 19 )        = "tactile three-dimensional form"              & Space$( SPACER ) & "tcf"
ContentTypes( 20 )        = "text"                                        & Space$( SPACER ) & "txt"
ContentTypes( 21 )        = "three-dimensional form"                      & Space$( SPACER ) & "tdf"
ContentTypes( 22 )        = "three-dimensional moving image"              & Space$( SPACER ) & "tdm"
ContentTypes( 23 )        = "two-dimensional moving image"                & Space$( SPACER ) & "tdi"
ContentTypes( 24 )        = "other"                                       & Space$( SPACER ) & "xxx"
ContentTypes( 25 )        = "unspecified"                                 & Space$( SPACER ) & "zzz"

MediaTypes( 0 )           = "[Select a media type]"
MediaTypes( 1 )           = "audio"                                       & Space$( SPACER ) & "s"
MediaTypes( 2 )           = "computer"                                    & Space$( SPACER ) & "c"
MediaTypes( 3 )           = "microform"                                   & Space$( SPACER ) & "h"
MediaTypes( 4 )           = "microscopic"                                 & Space$( SPACER ) & "p"
MediaTypes( 5 )           = "projected"                                   & Space$( SPACER ) & "g"
MediaTypes( 6 )           = "stereographic"                               & Space$( SPACER ) & "e"
MediaTypes( 7 )           = "unmediated"                                  & Space$( SPACER ) & "n"
MediaTypes( 8 )           = "video"                                       & Space$( SPACER ) & "v"
MediaTypes( 9 )           = "other"                                       & Space$( SPACER ) & "x"
MediaTypes( 10 )          = "unspecified"                                 & Space$( SPACER ) & "z"

End Sub

'****************************************************************************************

Sub SetDialogBoxControls

' After new fields have been constructed from selections in the dialog box, re-calculate
' the replaceability value of each fields so as to present logical options in the dialog
' box. This sub examines all the fields of each tag and, depending on what is found,
' adjusts the text, visibility, and availability of the dialog box controls.

Dim CompareVal%
Dim ControlsSettings$
Dim FieldAddOrReplace$
Dim FieldCount$
Dim New33XCount%
Dim PrevControlsSettings$
Dim PrevTag$
Dim Tag$
Dim UBaExisting33X%

Dim AddField

Dim i As Integer, j As Integer, TextSettings%

UBaExisting33X% = UBound( aExisting33X )
For i = 0 To 2
  Select Case i
    Case 0
      Tag$ = "336"
    Case 1
      Tag$ = "337"
    Case 2
      Tag$ = "338"
  End Select
  For j = 0 To UBaExisting33X%
    If Left$( aExisting33X( j ).tContent, 3 ) = Tag$ Then
        If Tag$ = PrevTag$ Then
            GoTo Increment:
          Else
            PrevTag$ = Tag$
        End If
        CompareVal% = aExisting33X( j ).tComparison

        Select Case CompareVal%

          Case DIFFERENT, ABSENT

            If CompareVal% = DIFFERENT Then
                ControlsSettings$ = "1"
              Else
                ControlsSettings$ = "8"
            End If

            Select Case Tag$

              Case "336"
                If Field336Finished$ <> "" Then
                    DlgText         "Field_1_Text",     Field336Finished$
                    DlgValue        "Field_1_CheckBox", UNCHECKED

' A checkbox can be enabled (meaning the new field will replace the existing) only if the
' field actually exists in the record and is different in content from the new field.
' Otherwise, there is nothing to replace--whether because there is no field with that
' tag, or because the existing field is the same as the new field.

                    If CompareVal% = ABSENT Or Count336% = 0 Then
                        DlgEnable       "Field_1_CheckBox", DISABLED
                      Else
                        DlgEnable       "Field_1_CheckBox", ENABLED
                    End If
                    AddField = TRUE
                  Else
                    AddField = FALSE
                End If

' If no new field has been created, because of lack of information, then the check box
' and the text box both are hidden.

              Case "337"
                If Field337Finished$ <> "" Then
                    If New33XCount% = 0 Then
                        DlgText         "Field_1_Text",     Field337Finished$
                        DlgValue        "Field_1_CheckBox", UNCHECKED
                        If CompareVal% = ABSENT Or Count337% = 0 Then
                            DlgEnable       "Field_1_CheckBox", DISABLED
                          Else
                            DlgEnable       "Field_1_CheckBox", ENABLED
                        End If
                      Else
                        DlgText         "Field_2_Text",     Field337Finished$
                        DlgValue        "Field_2_CheckBox", UNCHECKED
                        If CompareVal% = ABSENT Or Count337% = 0 Then
                            DlgEnable       "Field_2_CheckBox", DISABLED
                          Else
                            DlgEnable       "Field_2_CheckBox", ENABLED
                        End If
                    End If
                    AddField = TRUE
                  Else
                    AddField = FALSE
                End If

              Case "338"
                If Field338Finished$ <> "" Then
                    Select Case New33XCount%
                      Case 0
                        DlgText         "Field_1_Text",     Field338Finished$
                        DlgValue        "Field_1_CheckBox", UNCHECKED
                        If CompareVal% = ABSENT Or Count338% = 0 Then
                            DlgEnable       "Field_1_CheckBox", DISABLED
                          Else
                            DlgEnable       "Field_1_CheckBox", ENABLED
                        End If
                      Case 1
                        DlgText         "Field_2_Text",     Field338Finished$
                        DlgValue        "Field_2_CheckBox", UNCHECKED
                        If CompareVal% = ABSENT Or Count338% = 0 Then
                            DlgEnable       "Field_2_CheckBox", DISABLED
                          Else
                            DlgEnable       "Field_2_CheckBox", ENABLED
                        End If
                      Case 2
                        DlgText         "Field_3_Text",     Field338Finished$
                        DlgValue        "Field_3_CheckBox", UNCHECKED
                        If CompareVal% = ABSENT Or Count338% = 0 Then
                            DlgEnable       "Field_3_CheckBox", DISABLED
                          Else
                            DlgEnable       "Field_3_CheckBox", ENABLED
                        End If
                    End Select
                    AddField = TRUE
                  Else
                    AddField = FALSE
                End If

            End Select

            If AddField Then
                New33XCount% = New33XCount% + 1
            End If

          Case REPLACEABLE

            ControlsSettings$ = "2"

            Select Case Tag$

              Case "336"
                DlgText         "Field_1_Text",     Field336Finished$
                DlgValue        "Field_1_CheckBox", CHECKED

              Case "337"
                If New33XCount% = 0 Then
                    DlgText         "Field_1_Text",     Field337Finished$
                    DlgValue        "Field_1_CheckBox", CHECKED
                  Else
                    DlgText         "Field_2_Text",     Field337Finished$
                    DlgValue        "Field_2_CheckBox", CHECKED
                End If

              Case "338"
                Select Case New33XCount%
                  Case 0
                    DlgText         "Field_1_Text",     Field338Finished$
                    DlgValue        "Field_1_CheckBox", CHECKED
                  Case 1
                    DlgText         "Field_2_Text",     Field338Finished$
                    DlgValue        "Field_2_CheckBox", CHECKED
                  Case 2
                    DlgText         "Field_3_Text",     Field338Finished$
                    DlgValue        "Field_3_CheckBox", CHECKED
                End Select

            End Select

            New33XCount% = New33XCount% + 1

          Case IDENTICAL
            ControlsSettings$ = "4"
            Exit For

        End Select

    End If

Increment:

  Next j

  If InStr( PrevControlsSettings$, ControlsSettings$ ) = 0 Then
      PrevControlsSettings$ = PrevControlsSettings$ & ControlsSettings$
  End If

' The number of new fields added determines what is visible in the dialog box; only new
' fields get a visible checkbox. The number also determines grammatical number in the
' dialog box labels.

  Select Case New33XCount%

    Case 0
      DlgVisible      "Field_1_CheckBox", INVISIBLE
      DlgVisible      "Field_1_Text",     INVISIBLE
      DlgVisible      "Field_2_CheckBox", INVISIBLE
      DlgVisible      "Field_2_Text",     INVISIBLE
      DlgVisible      "Field_3_CheckBox", INVISIBLE
      DlgVisible      "Field_3_Text",     INVISIBLE
    Case 1
      DlgVisible      "Field_1_CheckBox", VISIBLE
      DlgVisible      "Field_1_Text",     VISIBLE
      DlgVisible      "Field_2_CheckBox", INVISIBLE
      DlgVisible      "Field_2_Text",     INVISIBLE
      DlgVisible      "Field_3_CheckBox", INVISIBLE
      DlgVisible      "Field_3_Text",     INVISIBLE
    Case 2
      DlgVisible      "Field_1_CheckBox", VISIBLE
      DlgVisible      "Field_1_Text",     VISIBLE
      DlgVisible      "Field_2_CheckBox", VISIBLE
      DlgVisible      "Field_2_Text",     VISIBLE
      DlgVisible      "Field_3_CheckBox", INVISIBLE
      DlgVisible      "Field_3_Text",     INVISIBLE
    Case 3
      DlgVisible      "Field_1_CheckBox", VISIBLE
      DlgVisible      "Field_1_Text",     VISIBLE
      DlgVisible      "Field_2_CheckBox", VISIBLE
      DlgVisible      "Field_2_Text",     VISIBLE
      DlgVisible      "Field_3_CheckBox", VISIBLE
      DlgVisible      "Field_3_Text",     VISIBLE

  End Select

Next i

Select Case New33XCount%

  Case 1
    FieldCount$ = "one field"
    FieldAddOrReplace$ = "field"
  Case 2
    FieldCount$ = "two fields"
    FieldAddOrReplace$ = "fields"
  Case 3
    FieldCount$ = "three fields"
    FieldAddOrReplace$ = "fields"

End Select

For i = 1 To Len( PrevControlsSettings$ )
  TextSettings% = TextSettings% + Val( Mid$( PrevControlsSettings$, i, 1 ) )
Next i

' When determining which other controls are visible and enabled, and how labels are
' worded, "same" and "matching" have these meanings:
'
' + existing fields that are "the same" as the calculated or constructed ("new") fields
'   are identical in form and content, and will be ignored.
' + existing fields that "match" new fields have the same content but not the same form,
'   and the new field(s) may, if the checkbox is checked, replace the existing field(s)).
'
' The meaning of the different values of ControlsSettings%:
'
'  1  No 336-338 fields (hereafter, "33X") match the calculated or constructed ("new")
'     fields, which will be added.
'  2  All 33X fields match the new fields.
'  3  At least one 33X field does not match any new field, which will be added; the
'     remaining 33X fields match the new fields.
'  4  All 33X fields are the same as the new fields (no action will be taken).
'  5  At least one 33X field does not match any new field, which will be added or will
'     replace the corresponding existing field(s); the remaining fields are the same.
'  6  Some 33X fields match some of the new fields; the remaining 33X fields are the same
'     as the remaining new fields.
'  7  At least one 33X field does not match any new field, which will be added or will
'     replace the corresponding existing field(s); some other 33X fields are the same as
'     some of the new fields and will be ignored; the remaining 33X fields may be
'     replaced.
'  8  No 33X fields exist; the new fields will be added.
'  9  At least one of the three 33X fields does not exist, and its new counterpart will
'     be added; at least one new field does not match any 33X field and will be added or
'     will replace the corresponding existing field(s).
' 10  At least one of the three 33X fields does not exist, and its new counterpart will
'     be added; the remaining 33X field(s) match the new field(s).
' 12  At least one of the three 33X fields does not exist, and its new counterpart will
'     be added; the remaining 33X field(s) are the same as the new field(s).

If TextSettings% = 4 Then
    DlgVisible      "CheckboxClear",    INVISIBLE
    DlgVisible      "CheckboxMark",     INVISIBLE
    DlgVisible      "FieldBox",         INVISIBLE
    DlgText         "InfoMessage",      "Fields with these values are already in the record. Select different values to add new fields or to replace the existing fields."
    DlgVisible      "InfoMessage",      VISIBLE
    DlgEnable       "OK",               DISABLED
  Else
    If New33XCount% = 0 Then
        DlgVisible      "FieldBox",         INVISIBLE
        DlgVisible      "InfoMessage",      VISIBLE
        DlgEnable       "OK",               DISABLED
      Else
        DlgVisible      "CheckboxClear",    VISIBLE
        DlgVisible      "CheckboxMark",     VISIBLE
        DlgVisible      "FieldBox",         VISIBLE
        DlgVisible      "InfoMessage",      INVISIBLE
        DlgEnable       "OK",               ENABLED
    End If
End If

Select Case TextSettings%

  Case 1, 5, 8, 12
    DlgText         "FieldBox",         "Add " & FieldCount$ & " to the record:"

  Case 2, 6
    DlgText         "FieldBox",         "Replace " & FieldCount$ & " in the record:"

  Case 3, 7, 9, 10
    DlgText         "FieldBox",         "Add/replace " & FieldCount$ & " in the record:"

  Case 4
    DlgFocus        "Content"

End Select

End Sub

'****************************************************************************************

Function AddAndReplace( Replace%, Tag$, TagCount%, FieldSelect$ )

' This function adds new fields in the appropriate place in the record using the OML
' command "AddFieldLine". If the checkbox has been checked to replace an existing field
' of the same tag, the "SetFieldLine" command is used.

Dim LineNumber%
Dim NewLine%

Dim Replaced                 : Replaced = FALSE

Dim i As Integer, j As Integer

If Replace% = CHECKED Then
    For i = 0 To UBound( aExisting33X )
      If Left$( aExisting33X( i ).tContent, 3 ) = Tag$ Then
          If aExisting33X( i ).tComparison < IDENTICAL Then
              If Replaced = FALSE Then
                  If CS.SetFieldLine( aExisting33X( i ).tLine, FieldSelect$ ) Then
                      Replaced = TRUE
                    Else
                      AddAndReplace = 0
                      Exit Function
                  End If
                Else
                  If CS.DeleteField( Tag$, 2 ) = FALSE Then
                      AddAndReplace = 0
                      Exit Function
                  End If
              End If
          End If
      End If
    Next i

  Else

    If TagCount% = 0 Then
        If CS.AddField( 1, FieldSelect$ ) Then
            AddAndReplace = -1
          Else
            AddAndReplace = 0
        End If
        Exit Function
      Else
        For i = 0 To UBound( aExisting33X )
          If Left$( aExisting33X( i ).tContent, 3 ) = Tag$ Then
              If aExisting33X( i ).tComparison = IDENTICAL Then
                  GoTo Increment:
              End If
          End If
        Next i
        For i = 0 To UBound( aExisting33X )
          If Left$( aExisting33X( i ).tContent, 3 ) = Tag$ Then
              If aExisting33X( i ).tComparison = REPLACEABLE Then
                  If CS.SetFieldLine( aExisting33X( i ).tLine, FieldSelect$ ) Then
                      Exit For
                    Else
                      AddAndReplace = 0
                      Exit Function
                  End If
                ElseIf aExisting33X( i ).tComparison = DIFFERENT Then
                  If Len( aExisting33X( i ).tContent ) = 3 Then
                      NewLine% = aExisting33X( i ).tLine
                    Else
                      NewLine% = aExisting33X( i ).tLine + 1
                  End If
                  If CS.AddFieldLine( NewLine%, FieldSelect$ ) Then

' When a new field is added to the record, all subsequent line numbers in the array of
' existing 336-338 fields need to be incremented so they may be replaced properly, or provide
' the right anchor for adding other new fields.

                      For j = 0 To UBound( aExisting33X )
                        LineNumber% = aExisting33X( j ).tLine
                        If LineNumber% >= NewLine% Then
                            aExisting33X( j ).tLine = LineNumber% + 1
                        End If
                      Next j
                      Exit For
                    Else
                      AddAndReplace = 0
                      Exit Function
                  End If
              End If
          End If
Increment:
        Next i
    End If
End If

AddAndReplace = -1

End Function

'****************************************************************************************

Function AddOrReplaceCheckbox( WhichBox$, WhichField$, CheckBoxValue% ) As Integer

' This function adjusts the wording in the dialog box to reflect the number of fields
' being added or replaced. It also displays a warning if more than one occurrence of a
' tag is to be replaced.

Const MSGBOX_RETURN_CANCEL            As Integer = 2
Const MSGBOX_RETURN_NO                As Integer = 7
Const MSGBOX_SETBUTTONS_YES_NO_CANCEL As Integer = 3
Const WARNING_QUERY                   As Integer = 32

Dim DigitAsWord$
Dim MsgBoxReturn%
Dim ReplaceWarning$
Dim Tag$
Dim TagCount%
Dim TickedCheckboxes%
Dim VisibleCheckboxes%

Tag$ = Left$( WhichField$, 3 )

Select Case Tag$
  Case "336"
    TagCount% = Count336%
  Case "337"
    TagCount% = Count337%
  Case "338"
    TagCount% = Count338%
End Select

If TagCount% > 1 Then

    Select Case TagCount%
      Case 2
        DigitAsWord$ = "two"
      Case 3
        DigitAsWord$ = "three"
      Case 4
        DigitAsWord$ = "four"
      Case 5
        DigitAsWord$ = "five"
      Case 6
        DigitAsWord$ = "six"
      Case 7
        DigitAsWord$ = "seven"
      Case 8
        DigitAsWord$ = "eight"
      Case 9
        DigitAsWord$ = "nine"
      Case Else
        DigitAsWord$ = Trim$( Str$( TagCount% ) )
    End Select

    ReplaceWarning$ = "This will replace " & DigitAsWord & " " & Tag$ & " fields! Proceed anyway?"

End If

If CheckBoxValue% = CHECKED Then

' If the checkbox is checked--to replace the existing fields--display a warning if more
' than one field is available to be replaced, as replacing all the fields may not be the
' desirect action. Otherwise, the text to display in the dialog box is "replace".

    If TagCount% > 1 Then
        MsgBoxReturn% = MsgBox( ReplaceWarning$, WARNING_QUERY + MSGBOX_SETBUTTONS_YES_NO_CANCEL, WaltsMacros$ )

        Select Case MsgBoxReturn%

          Case MSGBOX_RETURN_CANCEL  'Close the macro.
            AddOrReplaceCheckbox = 0
            Exit Function

          Case MSGBOX_RETURN_NO      'Return to the dialog box with the checkbox unchecked.
            DlgValue        WhichBox$,          UNCHECKED
            AddOrReplaceCheckbox = -1
            Exit Function

        End Select

    End If

End If

' Compare the number of visible checkboxes with the number that have been checked, and
' adjust the dialog box's feedback message accordingly.

If DlgVisible( "Field_1_CheckBox" ) Then
    If DlgVisible( "Field_2_CheckBox" ) Then
        If DlgVisible( "Field_3_CheckBox" ) Then
            VisibleCheckboxes% = 3
          Else
            VisibleCheckboxes% = 2
        End If
      Else
        VisibleCheckboxes% = 1
    End If
End If

If DlgValue( "Field_1_CheckBox" ) = CHECKED Then
    TickedCheckboxes% = TickedCheckboxes% + 1
End If
If DlgValue( "Field_2_CheckBox" ) = CHECKED Then
    TickedCheckboxes% = TickedCheckboxes% + 1
End If
If DlgValue( "Field_3_CheckBox" ) = CHECKED Then
    TickedCheckboxes% = TickedCheckboxes% + 1
End If

Select Case VisibleCheckboxes%

  Case 1
    If TickedCheckboxes% = 0 Then
        DlgText         "FieldBox",         "Add one field to the record:"
      Else
        DlgText         "FieldBox",         "Replace one field in the record:"
    End If

  Case 2
    If TickedCheckboxes% = 0 Then
        DlgText         "FieldBox",         "Add two fields to the record:"
      ElseIf TickedCheckboxes% = 1 Then
        DlgText         "FieldBox",         "Add one field and replace one field:"
      Else
        DlgText         "FieldBox",         "Replace two fields in the record:"
    End If

  Case 3
    If TickedCheckboxes% = 0 Then
        DlgText         "FieldBox",         "Add three fields to the record:"
      ElseIf TickedCheckboxes% = 1 Then
        DlgText         "FieldBox",         "Add two fields and replace one field:"
      ElseIf TickedCheckboxes% = 2 Then
        DlgText         "FieldBox",         "Add one field and replace two fields:"
      Else
        DlgText         "FieldBox",         "Replace three fields in the record:"
    End If

End Select

AddOrReplaceCheckbox = -1

End Function

'****************************************************************************************

Function ConstructField( InString$, ButtonChoice% ) As String

' This function takes the full string of term, code, and source, with possibly a term for
' materials specified as the last subfield, and returns a string for display. Depending
' upon the option button selected, the string will contain both the term and its code,
' only the term, or only the code. For display, the dollar sign is used for the subfield
' delimiter.

Dim Materials$
Dim TempString$

Dim p As Integer

TempString$ = InString$

' If subfield $3 for materials specified appears at the end, temporarily remove it for
' processing.

p = InStr( InString$, "$3" )
If p <> 0 Then
    Materials$  = " " & Mid$( TempString$, p )
    TempString$ = Trim$( Left$( TempString$, p - 1 ) )
End If

If Left$( TempString$, 1 ) <> "[" Then
    Select Case ButtonChoice%

      Case 0       'Both terms and codes: Just shrink the intervening space.
        TempString$ = Trim$( Left$( TempString$, SPACER ) ) & " $b " & LTrim$( Right$( TempString$, SPACER ) )

      Case 1       'Terms only: Just lop off the characters following the term.
        TempString$ = Trim$( Left$( TempString$, SPACER ) )

      Case 2       'Codes only: Excise the term and intervening spaces.
        p = InStr( TempString$, "$" )
        If p > 1 Then
            TempString$ = Left$( TempString$, p - 1 ) & "$b " & LTrim$( Right$( TempString$, SPACER ) )
          Else
            TempString$ = "$b " & LTrim$( Right$( TempString$, SPACER ) )
        End If

    End Select
End If

ConstructField = TempString$ & " " & Materials$

End Function

'****************************************************************************************

Function FindFieldLine( Tag$, FirstOrLast%, Ignore% ) As Integer

' This function returns a line number of a field of a specific tag. The number can be the
' first or last occurrence, depending on the second parameter. The third parameter,
' Ignore%, has to do with whether or not to pay attention to the type of match:
'
'  0 = Pay attention to the type of match, so the function gets the line number of only
'      the non-identical fields (because an identical field will not get replaced).
'  1 = Ignore the type of match, because we want a line number in order to add a field in
'      its proper place following the previous tag, regardless of how it compares to the
'      new field.
'
' The final parameter, FirstOrLast%, returns either the first occurrence of the tag
' (value 0) or the last (value 1).

Dim TempVal%

Dim i As Integer

For i = 0 To UBound( aExisting33X )
  If Left$( aExisting33X( i ).tContent, 3 ) = Tag$ Then
      If Ignore% = 0 Then
          If aExisting33X( i ).tComparison <> IDENTICAL Then
              TempVal% = aExisting33X( i ).tLine
              If FirstOrLast% = 0 Then Exit For
          End If
        Else
          TempVal% = aExisting33X( i ).tLine
          If FirstOrLast% = 0 Then Exit For
      End If
  End If
Next i

FindFieldLine = TempVal%

End Function

'****************************************************************************************

Function FixDelimiter( InString$ ) As String

' This function replaces the dollar sign used as a substitute for the delimiter in the
' dialog box with the normal OCLC delimiter character for pasting.

Dim TempString$

Dim p As Integer

TempString$ = InString$

Do
  p = InStr( TempString$, "$" )
  If p <> 0 Then
      TempString$ = Left$( TempString$, p - 1 ) & Chr$( 223 ) & Mid$( TempString$, p + 1 )
  End If
Loop Until p = 0

FixDelimiter = TempString$

End Function

'****************************************************************************************

Function Dialog1ControlFunction( Id$, Action%, SVal& )

' The dialog box function.

Const CONTROL_CHANGE As Integer = 2
Const INITIALIZE     As Integer = 1
Const KEEP_DLG_OPEN  As Integer = -1
Const TEXTBOX_CHANGE As Integer = 3

Dim Materials$
Dim Tag$
Dim TempString$
Dim TermsAndCodes%

Dim i As Integer

If TERM_OR_CODE_CHOICE = 3 Then
    TermsAndCodes% = 0
End If

Select Case Action%

  Case INITIALIZE

    If MaterialsSpecified$ = "" Then
        DlgText         "Materials",        ""
      Else
        DlgText         "Materials",        MaterialsSpecified$
        Materials$ = " $3 " & MaterialsSpecified$
    End If
    DlgValue        "TermOrCodeChoice", TermsAndCodes%
    If Form007Mismatch$ = "" Then
        DlgVisible      "Q337",             INVISIBLE
        DlgVisible      "Q338",             INVISIBLE
      Else
        DlgVisible      "Q337",             VISIBLE
        DlgVisible      "Q338",             VISIBLE
    End If
    DlgValue        "Carrier",          0
    DlgVisible      "CheckboxClear",    INVISIBLE
    DlgVisible      "CheckboxMark",     INVISIBLE
    DlgValue        "Content",          ContentDefault%
    DlgVisible      "Field_1_CheckBox", INVISIBLE
    DlgVisible      "Field_1_Text",     INVISIBLE
    DlgVisible      "Field_2_CheckBox", INVISIBLE
    DlgVisible      "Field_2_Text",     INVISIBLE
    DlgVisible      "Field_3_CheckBox", INVISIBLE
    DlgVisible      "Field_3_Text",     INVISIBLE
    DlgValue        "Media",            MediaDefault%

' If information in the record allows some terms to be displayed as initial suggestions,
' set the appropriate values in the dialog box arrays.

    If ContentDefault% > 0 Then
        Field336Constructed$ = DlgText( "Content" )
        Field336Finished$    = "336  " & ConstructField( Field336Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdacontent" & Materials$
    End If
    If MediaDefault% > 0 Then

' The choice of Media Type determines which array will be set for Carrier Type.

        Select Case MediaDefault%
          Case 1
            DlgListBoxArray "Carrier",          CarrierAudio()
          Case 2
            DlgListBoxArray "Carrier",          CarrierComputer()
          Case 3
            DlgListBoxArray "Carrier",          CarrierMicroform()
          Case 4
            DlgListBoxArray "Carrier",          CarrierMicroscopic()
          Case 5
            DlgListBoxArray "Carrier",          CarrierProjected()
          Case 6
            DlgListBoxArray "Carrier",          CarrierStereographic()
          Case 7
            DlgListBoxArray "Carrier",          CarrierUnmediated()
          Case 8
            DlgListBoxArray "Carrier",          CarrierVideo()
          Case Else
            DlgListBoxArray "Carrier",          CarrierOther()
        End Select
        Field337Constructed$ = DlgText( "Media" )
        Field337Finished$    = "337  " & ConstructField( DlgText( "Media" ), DlgValue( "TermOrCodeChoice" ) ) & "$2 rdamedia" & Materials$
        DlgValue        "Carrier",          0
    End If

'    If CarrierDefault% > 0 Then
        DlgValue        "Carrier",          CarrierDefault%
        Field338Constructed$ = DlgText( "Carrier" )
        Field338Finished$    = "338  " & ConstructField( DlgText( "Carrier" ), DlgValue( "TermOrCodeChoice" ) ) & "$2 rdacarrier" & Materials$
        DlgFocus        "Carrier"
'    End If

' Set the focus for the dialog box on either the first list box with no value selected,
' or the list box for the carrier. If too little information has been gleaned from the
' record to offer default choices for all three fields, then the list box which has no
' value selected should have the focus and the "OK" button disabled, requiring a value
' to be selected before the fields can be added. But even if default values can be
' supplied for all three fields, the list box for the carrier type should have the focus,
' as there may be several appropriate carrier types for any specific content/media
' combination, and any default suggestion requires confirmation. In this case, the "OK"
' button can be enabled--although without having the focus--so whatever value appears in
' the box can be easily added without further fuss.

    If ContentDefault% * MediaDefault% * CarrierDefault% = 0 Then
        DlgEnable       "OK",               DISABLED
        If Left$( DlgText( "Content" ), 1 ) = "[" Then
            DlgFocus        "Content"
          ElseIf Left$( DlgText( "Media" ), 1 ) = "[" Then
            DlgFocus        "Media"
          ElseIf Left$( DlgText( "Carrier" ), 1 ) = "[" Then
            DlgFocus        "Carrier"
        End If
    End If

    For i = 0 To UBound( aExisting33X )
      Tag$ = Left$( aExisting33X( i ).tContent, 3 )
      Select Case Tag$
        Case "336"
          Call CompareFields( Field336Constructed$, "336" )
        Case "337"
          Call CompareFields( Field337Constructed$, "337" )
        Case "338"
          Call CompareFields( Field338Constructed$, "338" )
      End Select
    Next i
    SetDialogBoxControls


  Case CONTROL_CHANGE

' As soon as any control is changed, check for text in the "materials specified" text
' box.

    Materials$ = Trim$( DlgText( "Materials" ) )
    If Materials$ <> "" Then
        Materials$ = " $3 " & Materials$
    End If

' Then determine which control was changed.

    Select Case Id$

      Case "OK"
        If Instr( Field336Finished$, Mid$( Materials$, 4 ) ) = 0 Then
            Field336Finished$ = Field336Finished$ & Materials$
        End If
        If Instr( Field337Finished$, Mid$( Materials$, 4 ) ) = 0 Then
            Field337Finished$ = Field337Finished$ & Materials$
        End If
        If Instr( Field338Finished$, Mid$( Materials$, 4 ) ) = 0 Then
            Field338Finished$ = Field338Finished$ & Materials$
        End If
            NewField1$ = DlgText( "Field_1_Text" )
            NewField2$ = DlgText( "Field_2_Text" )
            NewField3$ = DlgText( "Field_3_Text" )

      Case "Carrier"
        DlgVisible      "Q338",             INVISIBLE
        Field338Constructed$ = DlgText( "Carrier" )
        If Left$( Field338Constructed$, 1 ) = "[" Then
            Field338Finished$ = "338  " & Field338Constructed$
            DlgFocus        "Carrier"
          Else
            Field338Finished$ = "338  " & ConstructField( Field338Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdacarrier" & Materials$
        End If
        Call CompareFields( Field338Constructed$, "338" )
        SetDialogBoxControls

      Case "Content"
        Field336Constructed$ = DlgText( "Content" )
        If Left$( Field336Constructed$, 1 ) = "[" Then
            Field336Finished$ = "336  "         & Field336Constructed$
            DlgFocus        "Content"
          Else
            Field336Finished$ = "336  "         & ConstructField( DlgText( "Content" ), DlgValue( "TermOrCodeChoice" ) ) & "$2 rdacontent" & Materials$
            DlgFocus        "Media"
        End If
        Call CompareFields( Field336Constructed$, "336" )
        SetDialogBoxControls

      Case "Media"
        DlgVisible      "Q337",             INVISIBLE
        Select Case DlgValue( "Media" )
          Case 0
            Field337Constructed$ = DlgText( "Media" )
            Field337Finished$    = "337  "         & Field337Constructed$
            DlgFocus        "Media"
          Case 1
            DlgListBoxArray "Carrier",          CarrierAudio()
            Field337Constructed$ = "audio"         & Space$( SPACER ) & "s"
            Field337Finished$    = "337  "         & ConstructField( Field337Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdamedia" & Materials$
          Case 2
            DlgListBoxArray "Carrier",          CarrierComputer()
            Field337Constructed$ = "computer"      & Space$( SPACER ) & "c"
            Field337Finished$    = "337  "         & ConstructField( Field337Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdamedia" & Materials$
          Case 3
            DlgListBoxArray "Carrier",          CarrierMicroform()
            Field337Constructed$ = "microform"     & Space$( SPACER ) & "h"
            Field337Finished$    = "337  "         & ConstructField( Field337Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdamedia" & Materials$
          Case 4
            DlgListBoxArray "Carrier",          CarrierMicroscopic()
            Field337Constructed$ = "microscopic"   & Space$( SPACER ) & "p"
            Field337Finished$    = "337  "         & ConstructField( Field337Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdamedia" & Materials$
          Case 5
            DlgListBoxArray "Carrier",          CarrierProjected()
            Field337Constructed$ = "projected"     & Space$( SPACER ) & "g"
            Field337Finished$    = "337  "         & ConstructField( Field337Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdamedia" & Materials$
          Case 6
            DlgListBoxArray "Carrier",          CarrierStereographic()
            Field337Constructed$ = "stereographic" & Space$( SPACER ) & "e"
            Field337Finished$    = "337  "         & ConstructField( Field337Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdamedia" & Materials$
            CarrierDefault% = 0
          Case 7
            DlgListBoxArray "Carrier",          CarrierUnmediated()
            Field337Constructed$ = "unmediated"    & Space$( SPACER ) & "n"
            Field337Finished$    = "337  "         & ConstructField( Field337Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdamedia" & Materials$
          Case 8
            DlgListBoxArray "Carrier",          CarrierVideo()
            Field337Constructed$ = "video"         & Space$( SPACER ) & "v"
            Field337Finished$    = "337  "         & ConstructField( Field337Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdamedia" & Materials$
          Case 9
            DlgListBoxArray "Carrier",          CarrierOther()
            DlgValue        "Carrier",          0
            Field337Constructed$ = "other"         & Space$( SPACER ) & "x"
            Field337Finished$    = "337  "         & ConstructField( Field337Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdamedia" & Materials$

            Field338Constructed$ = DlgText( "Carrier" )
            Field338Finished$    = "338  "         & ConstructField( Field338Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdacarrier" & Materials$
          Case 10
            DlgListBoxArray "Carrier",          CarrierOther()
            DlgValue        "Carrier",          0
            Field337Constructed$ = "unspecified"   & Space$( SPACER ) & "z"
            Field337Finished$    = "337  "         & ConstructField( Field337Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdamedia" & Materials$

            Field338Constructed$ = DlgText( "Carrier" )
            Field338Finished$    = "338  "         & ConstructField( Field338Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdacarrier" & Materials$
        End Select
        CarrierDefault% = 0
        DlgValue        "Carrier",          CarrierDefault%
        If CarrierDefault% <> 0 Then
            Field338Constructed$ = DlgText( "Carrier" )
            Field338Finished$    = "338  "         & ConstructField( Field338Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdacarrier" & Materials$
          Else
            Field338Constructed$ = ""
            Field338Finished$    = ""
        End If

        Call CompareFields( Field337Constructed$, "337" )
        Call CompareFields( Field338Constructed$, "338" )
        SetDialogBoxControls

        If DlgListBoxArray( "Carrier" ) = 1 Then
            DlgFocus        "OK"
          Else
            DlgFocus        "Carrier"
        End If

      Case "OptionButton1", "OptionButton2", "OptionButton3"
        If Left$( Field336Constructed$, 1 ) <> "[" Then Field336Finished$ = "336  " & ConstructField( Field336Constructed$, DlgValue( "TermOrCodeChoice" ) ) & " $2 rdacontent" & Materials$
        If Left$( Field337Constructed$, 1 ) <> "[" Then Field337Finished$ = "337  " & ConstructField( Field337Constructed$, DlgValue( "TermOrCodeChoice" ) ) & " $2 rdamedia" & Materials$
        If Left$( Field338Constructed$, 1 ) <> "[" Then Field338Finished$ = "338  " & ConstructField( Field338Constructed$, DlgValue( "TermOrCodeChoice" ) ) & " $2 rdacarrier" & Materials$

      Case "Update"

' This button exists only to accommodate OML's problem with handling text boxes, which is
' that a change in a text box is not recognized until the text box loses focus. Clicking
' this button achieves that change of focus.

        Dialog1ControlFunction = KEEP_DLG_OPEN

      Case "Field_1_CheckBox"
        If AddOrReplaceCheckbox( "Field_1_CheckBox", DlgText( "Field_1_Text" ), DlgValue( "Field_1_CheckBox" ) ) = FALSE Then
            DlgEnd 0
        End If

      Case "Field_2_CheckBox"
        If AddOrReplaceCheckbox( "Field_2_CheckBox", DlgText( "Field_2_Text" ), DlgValue( "Field_2_CheckBox" ) ) = FALSE Then
            DlgEnd 0
        End If

      Case "Field_3_CheckBox"
        If AddOrReplaceCheckbox( "Field_3_CheckBox", DlgText( "Field_3_Text" ), DlgValue( "Field_3_CheckBox" ) ) = FALSE Then
            DlgEnd 0
        End If

    End Select

' Only after all three fields have values chosen is the button to add the fields enabled;
' the test is if the string begins with something other than a left bracket.

    If Left$( DlgText( "Content" ), 1 ) = "[" Or Left$( DlgText( "Media" ), 1 ) = "[" Or Left$( DlgText( "Carrier" ), 1 ) = "[" Then
        DlgEnable       "OK",               DISABLED
    End If


  Case TEXTBOX_CHANGE

' If a change is detected in the "Materials specified" textbox, put that change into the
' fields.

    Materials$ = Trim$( DlgText( "Materials" ) )
    If Materials$ <> "" Then
        MaterialsSpecified$ = Materials$
        Materials$ = " $3 " & Materials$
    End If
    Field336Constructed$ = DlgText( "Content" )
    Field336Finished$    = "336  " & ConstructField( Field336Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdacontent" & Materials$
    Field337Constructed$ = DlgText( "Media" )
    Field337Finished$    = "337  " & ConstructField( Field337Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdamedia"   & Materials$
    Field338Constructed$ = DlgText( "Carrier" )
    Field338Finished$    = "338  " & ConstructField( Field338Constructed$, DlgValue( "TermOrCodeChoice" ) ) & "$2 rdacarrier" & Materials$

    If Count33X% > 0 Then
        For i = 0 To UBound( aExisting33X )
          Tag$ = Left$( aExisting33X( i ).tContent, 3 )
          Select Case Tag$
            Case "336"
              Call CompareFields( Field336Constructed$, "336" )
            Case "337"
              Call CompareFields( Field337Constructed$, "337" )
            Case "338"
              Call CompareFields( Field338Constructed$, "338" )
          End Select
        Next i
    End If

' Set the replacement variable for the existing fields with respect to the new or altered
' fields selected, and adjust visibility and text of the dialog box controls.

    SetDialogBoxControls

End Select

End Function
'2483109530

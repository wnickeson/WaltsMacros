'MacroName:AddRelatorTo100.2024.18
'MacroDescription:Automatically adds a relator term in subfield $e to the 100 field of a
' bibliographic record, according to the Type of record.
'
' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
' https://orcid.org/0000-0003-0484-6938
'
' Last updated: 11 February 2024.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 3.1 and Windows 11 Enterprise & 64-bit
' Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works: Run the macro in a bibliographic record (cursor position is irrelevant)
' to instantly add an appropriate relator term to the 100 field. The term added is
' determined by the type of record, as identified in the fixed field:
'
'  Language material (Type "a", "t", "i"): "author"
'  Music (Type "j", "c", "d"): "composer"
'  2D non-projected graphic (Type "k"): "artist"
'  Cartographic material (Type "e", "f"): "cartographer"
'
' For any other type of material, the macro won't attempt to add a relator term to the
' 100 field. If a different relator term is present, the macro asks whether to replace it
' with the term is has determined is appropriate or to keep it, inserting its own term
' before the existing term. Codes in subfield $4 that don't match the term the macro adds
' are deleted.
'
' The macro adds a comma to the end of the name string, preceding the relator term,
' unless that string ends with a hyphen (as for an open date). The macro adds a period,
' or full stop, at the end of the relator term.
'****************************************************************************************

Option Explicit

'****************************************************************************************

Sub Main

Dim CS As Object
On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Const CRITICAL_MESSAGE     As Integer = 16
Const DELETE_OTHER_TERM    As Integer = 1  'DELETE can be replace if adding term or delete if term already present
Const DISPLAY_FF_AT_TOP    As Integer = 1
Const DLG_STATEMENT_CANCEL As Integer = 102
Const KEEP_OTHER_TERM      As Integer = 1  'KEEP always means keeping original
Const REPLACE_OTHER_TERM   As Integer = 0

Dim DELIMITER As String*1    : DELIMITER     = Chr$( 223 )
Dim DOUBLE_QUOTE As String*1 : DOUBLE_QUOTE  = Chr$( 034 )

Dim Button1Text$
Dim Button2Text$
Dim ControlSubfields$
Dim CountOfOtherTerms%
Dim DialogActionQuestion%
Dim DialogBoxQuestion$
Dim FieldData$
Dim OtherCode$
Dim OtherTerm$
Dim PosFF%
Dim RecType$
Dim RelatorCode$
Dim RelatorCodeQ$
Dim RelatorTerm$
Dim SubfieldCode$
Dim SubfieldContent$
Dim TempString$
Dim TermCount$
Dim TypeOfWindow%
Dim WaltsMacros$             : WaltsMacros$  = "[Walt's macros] Extras2:AddRelatorTo100"

Dim i As Integer

Dim ChangedFFView            : ChangedFFView = FALSE
Dim CursorMove
Dim RelatorTermPresent

' First, make sure a bibliographic record is open.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case -1, 3 To 16, 18, 20 To 26
    MsgBox "Sorry, this macro works only in a bibliographic record!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End Select

' Then, check that the record is English-language cataloging.

If CS.GetField( "040", 1, FieldData$ ) Then
    If InStr( FieldData$, DELIMITER & "b eng" ) = 0 Then
        MsgBox "Sorry, this macro works only in English-language records.", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If
End If

' Get the value of the fixed field element "Type" to determine the relator term and code.
' The macro can't figure out an appropriate relator term for records for computer files,
' projected media, kits, mixed materials, and realia.

PosFF% = CS.FixedFieldPosition
If PosFF% <> DISPLAY_FF_AT_TOP Then
    CS.FixedFieldPosition = DISPLAY_FF_AT_TOP
    ChangedFFView         = TRUE
    End If
    If CS.GetFixedField( "Type", RecType$ ) Then
        Select Case RecType$
          Case "a", "t", "i"
            RelatorTerm$ = "author"
            RelatorCode$ = "aut"
          Case "e", "f"
            RelatorTerm$ = "cartographer"
            RelatorCode$ = "ctg"
          Case "j", "c", "d"
            RelatorTerm$ = "composer"
            RelatorCode$ = "cmp"
          Case "k"
            RelatorTerm$ = "artist"
            RelatorCode$ = "art"
          Case Else
            RelatorTerm$ = "NONE"
        End Select
End If

If ChangedFFView Then CS.FixedFieldPosition = PosFF%

' Get the 100 field and check for the presence of relator terms and codes. If the
' selected term is already in the field, the macro quits. But the macro will add what it
' thinks the term ought to be before a different term in the field.

If CS.GetField( "100", 1, FieldData$ ) Then
    If FieldData$ = "Data contains non-latin script" Then
        MsgBox "Sorry, this macro can't edit the 100 field.", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
      ElseIf RelatorTerm$ = "NONE" Then
        MsgBox "Sorry, this macro can't automatically add a term to this heading.", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If

' If the corresponding code is present in subfield $4, ask whether to keep it when adding
' the term. Its position determines where to cut the field or insert the term in subfield
' $e. The macro assumes subfield $4 precedes control subfields $0-$3 and $5, which are
' treated as a single string.

    i = 1
    Do
      SubfieldContent$ = GetField$( FieldData$, i, DELIMITER )
      If i = 1 Then
          TempString$ = SubfieldContent$
        Else
          If SubfieldContent$ <> "" Then
              SubfieldCode$ = Left$( SubfieldContent$, 1 )
              Select Case SubfieldCode$
                Case "a" To "d", "g", "j", "q", "u"
                  TempString$ = TempString$ & DELIMITER & SubfieldContent$
                Case Else
                  Select Case SubfieldCode$

                    Case "e"
                      If InStr( SubfieldContent$, RelatorTerm$ ) = 0 Then
                          If RelatorTermPresent = FALSE Then
                          End If
                          OtherTerm$         = OtherTerm$ & DELIMITER & SubfieldContent$
                          If Right$( OtherTerm$, 1 ) Like "[.,]" Then
                              OtherTerm$ = Left$( OtherTerm$, Len( OtherTerm$ ) - 1 )
                          End If
                          CountOfOtherTerms% = CountOfOtherTerms% + 1
                        Else
                          RelatorTermPresent = TRUE
                      End If

                    Case "4"
                      RelatorCodeQ$ = Trim$( Mid$( SubfieldContent$, 3 ) )
                      If RelatorCodeQ$ = RelatorCode$ Then
                          OtherCode$ = RelatorCode$
                        Else
                          OtherCode$ = ""
                      End If

                    Case "0" To "5"
                      ControlSubfields$ = ControlSubfields$ & DELIMITER & SubfieldContent$

                  End Select
              End Select
          End If
      End If
      i = i + 1
    Loop Until SubfieldContent$ = ""

    If RelatorTermPresent Then
        If CountOfOtherTerms% = 0 Then
            MsgBox "The relator term " & DOUBLE_QUOTE & RelatorTerm$ & DOUBLE_QUOTE & " is already present in this 100 field.", CRITICAL_MESSAGE, WaltsMacros$
            Exit Sub
          Else
            DialogActionQuestion% = DELETE_OTHER_TERM
        End If
      Else
        If CountOfOtherTerms% = 0 Then
            GoTo AddTerm:
          Else
            DialogActionQuestion% = REPLACE_OTHER_TERM
        End If
    End If
    Select Case CountOfOtherTerms%
      Case 1
        TermCount$ = " term"
      Case 2
        TermCount$ = " terms"
      Case Else
        RelatorTerm$ = Trim$( Str$( CountOfOtherTerms% ) ) & " other relator terms."
    End Select

    If DialogActionQuestion% = REPLACE_OTHER_TERM Then
        DialogBoxQuestion$ = "Replace the existing relator" & TermCount$ & " in the 100 field with " & DOUBLE_QUOTE & RelatorTerm$ & DOUBLE_QUOTE & "?"
        Button1Text$       = "&Yes, replace the existing" & TermCount$
        Button2Text$       = "&No, keep the existing" & TermCount$
      Else
        DialogBoxQuestion$ = "The relator term " & DOUBLE_QUOTE & RelatorTerm$ & DOUBLE_QUOTE & " is already in the 100 field. Delete the other relator" & TermCount$ & " present?"
        Button1Text$       = "&Yes, delete the other" & TermCount$
        Button2Text$       = "&No, keep the other" & TermCount$
    End If

    Begin Dialog Dialog1Definition  192,  84, WaltsMacros$
      OKButton        70,  60,  52,  14
      CancelButton   130,  60,  52,  14
      OptionGroup                                            .OptionGroup
       OptionButton   16,  26, 112,  12, Button1Text$,       .OptionButton1
       OptionButton   16,  40, 112,  12, Button2Text$,       .OptionButton2
      Text            10,   6, 172,  16, DialogBoxQuestion$
    End Dialog
    Dim Dialog1 As Dialog1Definition
    On Error Resume Next
    Dialog Dialog1
    If Err = DLG_STATEMENT_CANCEL Then Exit Sub

    Select Case Dialog1.OptionGroup
      Case REPLACE_OTHER_TERM
        OtherTerm$ = ""
      Case KEEP_OTHER_TERM
        If DialogActionQuestion% <> REPLACE_OTHER_TERM Then
            Exit Sub
        End If
    End Select

AddTerm:

    TempString$ = Trim$( TempString$ )
    If Right$( TempString$, 2 ) Like "[!A-Z]." Then
        TempString$ = Left$( TempString$, Len( TempString$ ) - 1 ) & ","
      ElseIf Right$( TempString$, 1 ) <> "," Then
        If Right$( TempString$, 1 ) <> "-" Then
            TempString$ = TempString$ & ","
        End If
    End If

    TempString$ = TempString$ & " " & DELIMITER & "e " & RelatorTerm$
    If OtherTerm$ = "" Then
        TempString$ = TempString$ & "."
      Else
        TempString$ = TempString$ & ", " & OtherTerm$ & "."
    End If
    If OtherCode$ <> "" Then
        TempString$ = TempString$ & " " & DELIMITER & "4 " & OtherCode$
    End If
    TempString$ = TempString$ & " " & ControlSubfields$

' Replace the field. If the heading is controlled, the "SetField" command only appears to
' replace the field; the data cell remains blue. However, the hyperlink underline has
' been removed. Oddly, the name is still linked to the authority record, so clicking on
' the heading with the mouse displays its record. But a reformat of the bibliographic
' record reverts the heading to its original state, restoring the hyperlink underline.
' Adding the command to uncontrol the heading removes the blue shading in the cell as
' well as the hyperlink. Uncontrolling the heading earlier in the macro would work, of
' course, but finding the row number for the heading adds to the coding. The "SetField"
' command used here moves the cursor to the 100 field as it replaces it, allowing the
' "UncontrolHeading" statement to be used without any further lines of code necessary.

    If CS.SetField( 1, TempString$ ) = FALSE Then
        MsgBox "Sorry, the macro failed.", CRITICAL_MESSAGE, WaltsMacros$
      Else
        If CS.UncontrolHeading Then
        End If
    End If

' Position the cursor in the 100 field for easy controlling.

    CursorMove = CS.GetField( "100", 1, FieldData$ )

  Else
    MsgBox "Sorry, this macro works only with personal names in the 100 field.", CRITICAL_MESSAGE, WaltsMacros$

End If

End Sub
'30512033

'MacroName:DashIt.2023.54
'MacroDescription:Helps replace hyphens with dashes in a field in a bibliographic record.
'
' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
'
' Last updated: 23 July 2023.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 3.1 and Windows 11 Enterprise & 64-bit
' Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works: Place the cursor in a field in a bibliographic record and run the macro
' to change hyphens in the field to dashes. (The cursor position is irrelevant, as the
' macro always works on the whole field.) The macro follows OCLC policy and the Chicago
' Manual of Style in considering a dash to be two hyphens without any spaces before,
' between, or after--like this. Hyphens incorrectly used as dashes, whether they look
' like this - or this- or this -can be changed. Dashes with spaces around them -- like
' these -- may also be cleaned up. (However, since that is correct formatting in a
' contents note, the macro won't run at all in a 505 field.) All hyphens are displayed
' for review because a mass change is likely to result in some edits having been made
' incorrectly.
'
' Starting at the beginning of the field in which the cursor is placed, the macro looks
' for the first hyphen, asks what to do with it, and finds the next hyphen. Hyphens that
' are part of a normal dash are ignored. It repeats this search until it has reached the
' end of the field. For each hyphen found, the macro analyzes the immediately surrounding
' characters to determine how the field needs to be changed to substitute that character
' string with a dash. It displays the hyphen with some surrounding words from the field
' for context, to help make a decision about treatment of the hyphen. If changes are
' made, the field doesn't get replaced until the macro has dealt with every hyphen in the
' field, unless the "Stop" button is clicked. In that case, the field will be replaced
' with changes approved up to that point.
'
' When it's finished, the dialog box that reports the actions taken by the macro closes
' itself in five seconds.
'
' Although all Unicode characters are available in OCLC records, which might suggest that
' use of the true em dash character (U+2014) is appropriate, section 2.7 of Bibliographic
' Formats and Standards, "Character set," explicitly instructs using two hyphens instead.
'
' This macro works best, of course, in an English-language record with English-language
' text, and will probably be most useful in a lengthy summary note that contains many
' amplifying or explanatory phrases, or text scanned in with OCR, in which some
' typographical formatting may be lost.
'****************************************************************************************

Option Explicit

Declare Function ConvertTo8859( InputString$ ) As String
Declare Function EvaluateHyphen()              As String

Declare Function Dialog1ControlFunction( Id$, Action%, SValue& )
Declare Function Dialog2ControlFunction( Id$, Action%, SValue& )

Global Const INITIALIZE As Integer = 1
Global Const NO_BUTTON  As Integer = 1
Global Const YES_BUTTON As Integer = 2

Global ActionAsked%
Global ActionQuestion$
Global ChangeCount%
Global HyphenPos%
Global LeftOffset%
Global RightOffset%
Global WaltsMacros$
Global WorkString$

Global PreDialogHyphenTest

'****************************************************************************************

Sub Main

Const CRITICAL_MESSAGE     As Integer = 16
Const DIALOG_BUTTON_CANCEL As Integer = 0
Const FIXED_FIELD          As Integer = 0
Const INFORMATION_MESSAGE  As Integer = 64
Const STOP_BUTTON          As Integer = 3

Dim CS As Object
On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Dim ActionAction%
Dim ChangeText$
Dim Col%
Dim Dummy$
Dim FieldData$
Dim Row%
Dim Tag$
Dim TypeOfWindow%

Dim MacroStopped             : MacroStopped = FALSE

PreDialogHyphenTest = TRUE
WaltsMacros$        = "[Walt's macros] Extras3:DashIt"

' First, make sure a bibliographic record is displayed.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case -1, 3 To 16, 18, 20 To 26
    MsgBox "Sorry, this macro works only in a bibliographic record!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End Select

' Quit if the cursor is in the fixed field.

Col% = CS.CursorColumn
If Col% = FIXED_FIELD Then
    MsgBox "Please put the cursor in a variable field!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End If

' Then get the row in which the cursor is located. If the field contains non-Latin
' script, stop. Otherwise, make sure the field is not a contents field, because the
' dashes there should have spaces. If the field passes these two preliminary checks, find
' the first hyphen. Run the function to determine whether it is actually part of a
' regular dash. If it is, find the next dash and repeat. Keep searching until a hyphen is
' found that isn't part of a normal dash. Then display the dialog box for user input, and
' evaluate the remainder of the field from within it.

Row% = CS.CursorRow
If CS.GetFieldLine( Row%, FieldData$ ) Then
    If FieldData$ = "Data contains non-latin script" Then
        MsgBox "Sorry, this macro only works in fields with Latin script.", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
      Else
        Tag$ = Left$( FieldData$, 5 )
        If Left$( Tag$, 3 ) = "505" Then
            MsgBox "Sorry, this macro won't work in a contents field.", CRITICAL_MESSAGE, WaltsMacros$
            Exit Sub
          Else
            WorkString$ = Mid$( FieldData$, 6 )
        End If
    End If
    Col% = 1

    Do

      HyphenPos% = InStr( Col%, WorkString$, "-" )
      If HyphenPos% = 0 Then

' If the hyphen position is zero, either the macro found no hyphens at all in the field,
' or it finished going through the field and has dealt with at least one hyphen. If the
' cursor is still in its initial position, the field contains no hyphens. Otherwise, the
' macro is done, and so prepares a report on actions taken.

          If PreDialogHyphenTest Then
              MsgBox "There seem to be no hyphens in this field!", INFORMATION_MESSAGE, WaltsMacros$
              Exit Sub

            Else

Summary:

              Select Case ChangeCount%
                Case 0
                  If ActionAsked% = 0 Then
                      ChangeText$ = "There seem to be no hyphens in this field!"
                  Else
                      ChangeText$ = "No changes were made to this field."
                  End If
                Case 1
                  ChangeText$ = "One change was made to this field."
                Case 2
                  ChangeText$ = "Two changes were made to this field."
                Case 3
                  ChangeText$ = "Three changes were made to this field."
                Case 4
                  ChangeText$ = "Four changes were made to this field."
                Case 5
                  ChangeText$ = "Five changes were made to this field."
                Case 6
                  ChangeText$ = "Six changes were made to this field."
                Case 7
                  ChangeText$ = "Seven changes were made to this field."
                Case 8
                  ChangeText$ = "Eight changes were made to this field."
                Case 9
                  ChangeText$ = "Nine changes were made to this field."
                Case Else
                  ChangeText$ = Trim$( Str$( ChangeCount% ) ) & " changes were made to this field."
              End Select

              If MacroStopped Then
                  ChangeText$ = "Macro stopped. " & ChangeText$
                Else
                  If ActionAsked% > 0 Then
                      ChangeText$ = "All done. " & ChangeText$
                  End If
              End If

              Begin Dialog Dialog1Definition  192,  48, WaltsMacros$, .Dialog1ControlFunction
                OKButton       40,  24,  52,  14
                CancelButton  102,  24,  52,  14
                Text           10,   6, 172,   8, ChangeText$
              End Dialog
              Dim Dialog1 As Dialog1Definition
              On Error Resume Next
              Dialog Dialog1

              Exit Sub
          End If

        Else

' Don't show the dialog box until it's been determined that the hyphen found is one that
' might need to be acted upon. That means calling the function in order to generate the
' variable ActionQuestion$. A normal dash will leave the variable empty; any other hyphen
' raises the question of what to do with the hyphen. As soon as ActionQuestion$ has
' content, the dialog box can be invoked, and it will remain open until the whole field
' has been analyzed.

          PreDialogHyphenTest = TRUE
          Dummy$              = EvaluateHyphen()
          If ActionQuestion$ <> "" Then

              Begin Dialog Dialog2Definition  236,  64, WaltsMacros$, .Dialog2ControlFunction
                PushButton     10,  40,  48,  14, "&No",           .NoButton
                PushButton     66,  40,  48,  14, "&Yes",          .YesButton
                PushButton    122,  40,  48,  14, "&Stop",         .StopButton
                CancelButton  178,  40,  48,  14
                Text           62,   6, 112,   8, ActionQuestion$, .Question
                Text           10,  20, 216,   8, "",              .Snippet
              End Dialog

              Dim Dialog2 As Dialog2Definition
              ActionAction% = Dialog( Dialog2 )

              Select Case ActionAction%

                Case DIALOG_BUTTON_CANCEL

                  Exit Sub

                Case NO_BUTTON, YES_BUTTON

                  If ChangeCount% > 0 Then
                      If CS.SetFieldLine( Row%, Tag$ & WorkString$ ) = FALSE Then
                          MsgBox "Sorry, the macro failed.", CRITICAL_MESSAGE, WaltsMacros$
                      End If
                  End If
                  If ActionAction% = STOP_BUTTON Then
                      MacroStopped = TRUE
                  End If
                  GoTo Summary:

              End Select

          End If
          Col% = HyphenPos% + 2
      End If

    Loop Until ActionQuestion <> ""

End If

End Sub

'****************************************************************************************

Function ConvertTo8859( InputString$ ) As String

' This function converts the MARC21 string to ISO/IEC 8859-1 encoding, to make it
' possibly easier to read in the dialog box.

Dim Character$               : Character$ = " "
Dim CharNext%
Dim CharRead%
Dim TempString$

Dim i As Integer

InputString$ = InputString$ & Character$
For i = 1 To Len( InputString$ ) - 1
  CharRead% = Asc( Mid$( InputString$, i, 1 ) )
  CharNext% = Asc( Mid$( InputString$, i + 1, 1 ) )

  Select Case CharRead%

    Case 32 To 64
      Character$ = Chr$( CharRead% )

' OCLC-MARC modified characters are turned into precomposed characters, when possible.

    Case 32 To 64, 66, 68, 70 To 72, 74 To 77, 80 To 82, 84, 86 To 88, 91 To 96
      Character$ = Chr$( CharRead% )

    Case 98, 100, 102 To 104, 106 To 109, 112 To 114, 116, 118 To 120, 123 To 128
      Character$ = Chr$( CharRead% )

    Case 65, 97   'A, a
      Select Case CharNext%
        Case 225  'grave
          Character$ = Chr$( CharRead% + 127 ) : i = i + 1
        Case 226  'acute
          Character$ = Chr$( CharRead% + 128 ) : i = i + 1
        Case 227  'circumflex
          Character$ = Chr$( CharRead% + 129 ) : i = i + 1
        Case 228  'tilde
          Character$ = Chr$( CharRead% + 130 ) : i = i + 1
        Case 232  'diaeresis
          Character$ = Chr$( CharRead% + 131 ) : i = i + 1
        Case 234  'ring
          Character$ = Chr$( CharRead% + 132 ) : i = i + 1
        Case 224, 229 To 231, 233, 235 To 251
          Character$ = Chr$( CharRead% ) : i = i + 1
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 67, 99   'C, c
      Select Case CharNext%
        Case 240  'cedilla
          Character$ = Chr$( CharRead% + 132 ) : i = i + 1
        Case 224 To 239, 241 To 251
          Character$ = Chr$( CharRead% ) : i = i + 1
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 69, 101  'E, e
      Select Case CharNext%
        Case 225  'grave
          Character$ = Chr$( CharRead% + 131 ) : i = i + 1
        Case 226  'acute
          Character$ = Chr$( CharRead% + 132 ) : i = i + 1
        Case 227  'circumflex
          Character$ = Chr$( CharRead% + 133 ) : i = i + 1
        Case 232  'diaeresis
          Character$ = Chr$( CharRead% + 134 ) : i = i + 1
        Case 224, 228 To 231, 233 To 251
          Character$ = Chr$( CharRead% ) : i = i + 1
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 73, 105  'I, i
      Select Case CharNext%
        Case 225  'grave
          Character$ = Chr$( CharRead% + 131 ) : i = i + 1
        Case 226  'acute
          Character$ = Chr$( CharRead% + 132 ) : i = i + 1
        Case 227  'circumflex
          Character$ = Chr$( CharRead% + 133 ) : i = i + 1
        Case 232  'diaeresis
          Character$ = Chr$( CharRead% + 134 ) : i = i + 1
        Case 224, 228 To 231, 233 To 251
          Character$ = Chr$( CharRead% ) : i = i + 1
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 78, 110  'N, n
      Select Case CharNext%
        Case 228  'tilde
          Character$ = Chr$( CharRead% + 131 ) : i = i + 1
        Case 224 To 227, 229 To 251
          Character$ = Chr$( CharRead% ) : i = i + 1
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 79, 111  'O, o
      Select Case CharNext%
        Case 225  'grave
          Character$ = Chr$( CharRead% + 131 ) : i = i + 1
        Case 226  'acute
          Character$ = Chr$( CharRead% + 132 ) : i = i + 1
        Case 227  'circumflex
          Character$ = Chr$( CharRead% + 133 ) : i = i + 1
        Case 228  'tilde
          Character$ = Chr$( CharRead% + 134 ) : i = i + 1
        Case 232  'diaeresis
          Character$ = Chr$( CharRead% + 135 ) : i = i + 1
        Case 224, 229 To 231, 233 To 251
          Character$ = Chr$( CharRead% ) : i = i + 1
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 83, 115  'S, s
      Select Case CharNext%
        Case 224 To 251
          Character$ = Chr$( CharRead% ) : i = i + 1
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 85, 117  'U, u
      Select Case CharNext%
        Case 225  'grave
          Character$ = Chr$( CharRead% + 132 ) : i = i + 1
        Case 226  'acute
          Character$ = Chr$( CharRead% + 133 ) : i = i + 1
        Case 227  'circumflex
          Character$ = Chr$( CharRead% + 134 ) : i = i + 1
        Case 232  'diaeresis
          Character$ = Chr$( CharRead% + 135 ) : i = i + 1
        Case 224, 228 To 231, 233 To 251
          Character$ = Chr$( CharRead% ) : i = i + 1
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 89, 121  'Y, y
      Select Case CharNext%
        Case 226  'acute
          Character$ = Chr$( CharRead% + 132 ) : i = i + 1
        Case 232  'diaeresis
          If CharRead% = 121 Then
              Character$ = Chr$( 255 )
            Else
              Character$ = Chr$( CharRead% )
          End If
          i = i + 1
        Case 224 To 225, 227 To 231, 233 To 251
          Character$ = Chr$( CharRead% ) : i = i + 1
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 90, 122  'Z, z
      Select Case CharNext%
        Case 224 To 251
          Character$ = Chr$( CharRead% ) : i = i + 1
        Case Else
          Character$ = Chr$( CharRead% )
      End Select

    Case 158   'Degree sign
      Character$ = Chr$( 176 )
    Case 160   'Euro
      Character$ = Chr$( 128 )
    Case 162   'Crossed O
      Character$ = Chr$( 216 )
    Case 163   'Eth
      Character$ = Chr$( 208 )
    Case 164   'Thorn
      Character$ = Chr$( 222 )
    Case 165   'AE Ligature
      Character$ = Chr$( 198 )
    Case 166   'OE Ligature
      Character$ = "Oe"
    Case 169   'Musical flat: does not copy
      Character$ = Chr$( 129 )
    Case 170   'registered
      Character$ = Chr$( 174 )
    Case 171   'Plus-minus
      Character$ = Chr$( 177 )
    Case 178   'crossed o
      Character$ = Chr$( 248 )
    Case 179   'eth
      Character$ = Chr$( 240 )
    Case 180   'thorn
      Character$ = Chr$( 254 )
    Case 181   'ae ligature
      Character$ = Chr$( 230 )
    Case 182   'oe ligature
      Character$ = "oe"
    Case 185   'Pound
      Character$ = Chr$( 163 )
    Case 202   'Copyright
      Character$ = Chr$( 169 )
    Case 203   'Sound recording copyright: does not copy
      Character$ = "p"
    Case 204   'Musical sharp: does not copy
      Character$ = "#"
    Case 223   'Delimiter
      If Character$ = " " And Mid$( InputString$, i + 1, 2 ) Like "[a-z0-9] " Then
          Character$ = "$"
        Else
          Character$ = Chr$( 223 )
      End If
    Case Else
      Character$ = Chr$( CharRead% )

  End Select

  TempString$ = TempString$ & Character$

Next i

ConvertTo8859 = TempString$

End Function

'****************************************************************************************

Function EvaluateHyphen() As String

' This function generates the question about the action to be taken, extracts context
' from the hyphen found, and calculates how the field needs to be altered if the hyphen
' is changed.

Const MIN_LEN_HALF_SNIPPET As Integer = 20  'The minimum length of context to display on either side of a hyphen, except if
                                            ' another hyphen is found.
Dim CharacterCount%
Dim Col%
Dim DELIMITER As String*1    : DELIMITER = Chr$( 223 )
Dim LenField%
Dim Snippet$
Dim SnippetEnd%
Dim SnippetStart%
Dim TestChar$
Dim TestString$

Dim i As Integer

' If a hyphen is found, begin by getting paragraph context. Look forward and backward in
' the field from the hyphen until at least the number of characters specified in the
' constant MIN_LEN_HALF_SNIPPET have been found in each direction. Continue searching
' until the next space is encountered. Display the string from that position, before the
' hyphen, to the appropriate space after the hyphen. However, if another hyphen is found
' within the MIN_LEN_HALF_SNIPPET-character string, exit the stepthrough, so the snippet
' displayed includes only one hyphen.

Do

  CharacterCount% = 0
  For i = HyphenPos% - 1 To 1 Step -1
    TestChar$ = Mid$( WorkString$, i, 1 )
    If TestChar$ = " " Then
        If CharacterCount% > MIN_LEN_HALF_SNIPPET Then
            SnippetStart% = i
            Exit For
          Else
            CharacterCount% = CharacterCount% + 1
        End If
      ElseIf TestChar$ = "-" Then
        SnippetStart%   = i + 1
        Exit For
      Else
        CharacterCount% = CharacterCount% + 1
    End If
  Next i
  If i = 0 Then SnippetStart% = 1

  LenField%       = Len( WorkString$ )
  SnippetEnd%     = 0
  CharacterCount% = 0
  For i = HyphenPos% + 1 To LenField%
    TestChar$ = Mid$( WorkString$, i, 1 )
    If TestChar$ = " " Then
        If CharacterCount% > MIN_LEN_HALF_SNIPPET Then
            Snippet$        = Trim$( Mid$( WorkString$, SnippetStart%, i - SnippetStart% ) )
            SnippetEnd%     = i
            Exit For
          Else
            CharacterCount% = CharacterCount% + 1
        End If

'   If the character immediately following a hyphen is another hyphen, keep searching.

      ElseIf TestChar$ = "-" Then
        If i = HyphenPos% + 1 Then
            CharacterCount% = CharacterCount% + 1
          Else
            Snippet$        = Trim$( Mid$( WorkString$, SnippetStart%, i - SnippetStart% ) )
            Exit For
        End If
      Else
        CharacterCount% = CharacterCount% + 1
    End If
  Next i
  If i < LenField% Then
      SnippetEnd% = i
    Else
      Snippet$    = Trim$( Mid$( WorkString$, SnippetStart% ) )
  End If

' If the beginning of the extract is not the beginning of the field, add an ellipsis to
' indicate an omission, and similarly at the end.

   If SnippetStart% > 1 Then Snippet$ = "... " & Snippet$
   If SnippetEnd%   > 0 Then Snippet$ = Snippet$ & " ..."

' Convert characters to make a nice display in the dialog box.

  EvaluateHyphen = ConvertTo8859( Snippet$ )

' Starting with the character immediately before the hyphen, or to its left, examine the
' next few characters, checking for spaces, word characters, or other hyphens. If that
' character string matches one of the patterns below, the text of the question to ask in
' the dialog box is set, as well as what part of the field will change to accommodate the
' dash if conversion is selected. For a regular hyphen, surrounded by anything other than
' a space, the default action will be to leave it alone. If a space is found next to the
' hyphen, the default action is assumed to be to make it into a dash.

  TestString$ = Mid$( WorkString$, HyphenPos% - 1, 3 )
  If TestString$ Like "[!- ]-[!- ]" Then
      ActionQuestion$ = "Change this hyphen to a dash?"
      LeftOffset%     = 1
      RightOffset%    = 1
    ElseIf TestString$ = " - " Then
      ActionQuestion$ = "Change this hyphen to a dash?"
      LeftOffset%     = 2
      RightOffset%    = 2
    ElseIf TestString$ Like "[!- ]- " Then
      ActionQuestion$ = "Change this hyphen to a dash?"
      LeftOffset%     = 1
      RightOffset%    = 2
    ElseIf TestString$ Like " -[!- ]" Then
      ActionQuestion$ = "Change this hyphen to a dash?"
      LeftOffset%     = 2
      RightOffset%    = 1
    Else
      TestString$ = Mid$( WorkString$, HyphenPos% - 1, 4 )
      If TestString$ Like "[! ]--[! ]" Then
          ActionQuestion$ = ""
        ElseIf TestString$ Like "[! ]-- " Then
          If Mid$( WorkString$, HyphenPos% + 3, 1 ) <> DELIMITER Then
              ActionQuestion$ = "Clean up this dash?"
              LeftOffset%     = 1
              RightOffset%    = 3
            Else
              ActionQuestion$ = ""
          End If
        ElseIf TestString$ Like " --[! ]" Then
          If Mid$( WorkString$, HyphenPos% - 3, 1 ) <> DELIMITER Then
              ActionQuestion$ = "Clean up this dash?"
              LeftOffset%     = 2
              RightOffset%    = 2
            Else
              ActionQuestion$ = ""
          End If
        ElseIf TestString$ = " -- " Then
          ActionQuestion$ = "Clean up this dash?"
          LeftOffset%     = 2
          RightOffset%    = 3
      End If
  End If

  If ActionQuestion = "" Then
      If PreDialogHyphenTest Then
          Exit Do
        Else
          HyphenPos% = InStr( HyphenPos% + 2, WorkString$, "-" )
          If HyphenPos% = 0 Then
              Exit Function
          End If
      End If
  End If

Loop Until ActionQuestion <> ""

End Function

'****************************************************************************************

Function Dialog1ControlFunction( Id$, Action%, SValue& )

' This dialog control function simply closes the summary dialog box five seconds after
' the macro has finished.

Const IDLE_STATE    As Integer = 5
Const KEEP_DLG_OPEN As Integer = -1

Const COUNTDOWN     As Integer = 5   'The number of seconds the dialog box is to remain open.

Static PreviousSecondsRemaining%
Static StartTimer&

Dim ElapsedSeconds%
Dim SecondsRemaining%
Dim SecondsWord$

Select Case Action%

  Case INITIALIZE

    StartTimer& = Timer


  Case IDLE_STATE

    ElapsedSeconds%   = Timer - StartTimer&
    SecondsRemaining% = COUNTDOWN - ElapsedSeconds%
    If SecondsRemaining% <= 0 Then
        DlgEnd 0
    End If
    PreviousSecondsRemaining% = SecondsRemaining%
    Dialog1ControlFunction    = KEEP_DLG_OPEN

End Select

End Function

'****************************************************************************************

Function Dialog2ControlFunction( Id$, Action%, SVal& )

' This function keeps the dialog box open until the macro has evaluated all the hyphens
' in the field, or until the "Stop" or "Cancel" buttons are clicked.

Const CONTROL_CHANGE       As Integer = 2
Const DIALOG_BUTTON_CANCEL As Integer = 0
Const DISABLED             As Integer = 0
Const ENABLED              As Integer = 1
Const KEEP_DLG_OPEN        As Integer = -1

Dim ActionStop%
Dim CancelMessage$
Dim ReplaceMessage$

Select Case Action%

  Case INITIALIZE

    DlgText   "Snippet",    EvaluateHyphen()
    DlgEnable "StopButton", DISABLED
    ActionAsked%        = ActionAsked% + 1
    PreDialogHyphenTest = FALSE


  Case CONTROL_CHANGE

    ActionAsked% = ActionAsked% + 1

    Select Case Id$

      Case "NoButton", "YesButton"

        If Id$ = "YesButton" Then
            WorkString$  = Left$( WorkString$, HyphenPos% - LeftOffset% ) & "--" & Mid$( WorkString$, HyphenPos% + RightOffset% )
            ChangeCount% = ChangeCount% + 1
        End If
        HyphenPos% = InStr( HyphenPos% + 2, WorkString$, "-" )
        If HyphenPos% > 0 Then
            DlgText   "Snippet",    EvaluateHyphen()
            DlgText   "Question",   ActionQuestion$
        End If
        Dialog2ControlFunction = KEEP_DLG_OPEN

      Case "StopButton"

' The Stop button has three meanings. It could have its standard meaning in the context
' of the dialog box: I want to back out of here and return to where I came from (the main
' dialog box), where I may consider whether to continue the macro. Or it could mean: Halt
' the macro, set the field with the changes I've made so far, and then exit. Finally, it
' could mean: Stop the macro, don't do anything more, I want to exit the macro
' immediately. Therefore, clicking the Stop button presents these choices as push buttons
' by which the appropriate meaning of "Stop" may be chosen.

        Select Case ChangeCount%
          Case 1
            ReplaceMessage$ = "&Replace field with the single change made so far, then quit"
          Case Else
            ReplaceMessage$ = "&Replace field with the " & Trim$( Str$( ChangeCount% ) ) & " changes made so far, then quit"
        End Select

        CancelMessage$ = "&Close this dialog box and return to the main macro window"

        Begin Dialog Dialog3Definition  208, 88, WaltsMacros$
          CancelButton   16,  20,  52,  14
          PushButton     16,  42,  52,  14, "&Replace"
          PushButton     16,  64,  52,  14, "&Quit"
          Text           16,   6,  64,   8, "Stop and do what?"
          Text           76,  19, 128,  16, CancelMessage$
          Text           76,  41, 128,  16, ReplaceMessage$
          Text           76,  66, 128,   8, "Stop everything and exit macro"
        End Dialog
        Dim Dialog3 As Dialog3Definition

        ActionStop% = Dialog( Dialog3 )

        Select Case ActionStop%
          Case 0
            Dialog2ControlFunction = KEEP_DLG_OPEN
          Case 1
            DlgEnd YES_BUTTON
          Case 2
            DlgEnd DIALOG_BUTTON_CANCEL
        End Select

    End Select

    If HyphenPos% = 0 Then
        DlgEnd YES_BUTTON
    End If
    If ChangeCount% > 0 Then
        DlgEnable "StopButton", ENABLED
    End If

End Select

End Function
'79728404
'
'Macro name: DashIt
'Macro book: C:\Users\wnickeson.UR\AppData\Roaming\OCLC\Connex\Macros\Extras3.mbk
'Saved: 8/22/2023 10:03:10 AM using "MacroBookInspector" macro by Walter F. Nickeson.

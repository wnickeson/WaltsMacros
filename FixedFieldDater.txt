' MacroName:FixedFieldDater.2025.01
' MacroDescription:Fills in the fixed field date elements from a bibliographic record's
' 26X fields.
'
' This macro was written by Walter F. Nickeson and last updated 2 May 2025.
' It was developed in Connexion client 3.1 running in Windows 11 Enterprise and 64-bit
' Windows 10 Pro.
' Walt's macros for the Connexion client: https://github.com/wnickeson/WaltsMacros
' wfnickeson@zohomail.com
'
' Copyright 2025 Walter F. Nickeson.
'
' Permission is hereby granted, free of charge, to any person obtaining a copy of this
' software and associated documentation files (the "Software"), to deal in the Software
' without restriction, including without limitation the rights to use, copy, modify,
' merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
' permit persons to whom the Software is furnished to do so, subject to the following
' conditions:
'
' The above copyright notice and this permission notice shall be included in all copies
' or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
' INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
' PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
' HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
' THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'
'****************************************************************************************
' How it works: Enter dates in a 260 or 264 field in a bibliographic record, and run the
' macro to appropriately copy those dates into the fixed field, as well as correctly code
' "DtSt" (Type of date). Or, run the macro in an existing record to help verify that the
' fixed field correctly reflects the dates in the 26X fields. In the 264 fields, the
' macro takes into account only those containing publication (second indicator "1") and
' copyright (second indicator "4") information. Dates in other 264 fields, and dates in
' field 245 (as for archival materials) or 3XX fields (for serials), are ignored.
'
' The 26X fields alone don't carry enough information for the macro to decide whether
' something is a reprint, so if it finds DtSt "r" in the fixed field it accepts that code
' and quits. The macro can code DtSt "e" for a detailed publication date (year and month
' or year, month, and day) only if the month name is in English, whether it is the whole
' word or the standard abbreviation. Month names in other languages, or months recorded
' as numbers, are simply ignored. The macro can handle ordinal number suffixes, as in
' "July 4th, 1776," which produces "1776,0704" as "Dates" in the fixed field. ("4 July
' 1776" in the 264 field produces the same result.)
'
' This macro is designed to work with RDA but can generally accommodate pre-RDA records.
' It can't get a date from a field in a non-Latin script, and may not work well with
' records cataloged in a language other than English.
'****************************************************************************************

Option Explicit

Declare Function ChangeHyphenTo_u( InString$ ) As String
Declare Function GetMonthDay     ( InString$ ) As String

'****************************************************************************************

Sub Main

Dim CS As Object
On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Const CRITICAL_MESSAGE     As Integer = 16
Const DATE_1               As Integer = 1
Const DATE_2               As Integer = 2
Const DISPLAY_AT_TOP       As Integer = 1
Const INFORMATION_MESSAGE  As Integer = 64
Const MSGBOX_RETURN_CANCEL As Integer = 2
Const MSGBOX_RETURN_NO     As Integer = 7
Const WARNING_MESSAGE      As Integer = 48

Dim DELIMITER As String*1    : DELIMITER     = Chr$( 223 )

Dim BibLevel$
Dim CopyrightStatement$
Dim Date1_26X$
Dim Date1_FF$
Dim Date2_26X$
Dim Date2_FF$
Dim FieldData$
Dim FindYear%
Dim LenC%
Dim MonthAndDay$
Dim MsgBoxAnswer%
Dim PosFF%
Dim PotentialDate$
Dim PrecChar$
Dim PublicationStatement$
Dim Relation$
Dim Start%
Dim SubfieldC$
Dim Tag$
Dim TypeOfDate$
Dim TypeOfWindow%
Dim WaltsMacros$             : WaltsMacros$  = "[Walt's macros] Extras1:FixedFieldDater"

Dim Changed                  : Changed       = FALSE
Dim ChangedFFView            : ChangedFFView = FALSE
Dim FoundField               : FoundField    = FALSE
Dim NonLatin                 : NonLatin      = FALSE
Dim Serial

Dim i As Integer, p As Integer

' First, make sure that a bibliographic record is open.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case -1, 3 To 16, 18, 20 To 26
    MsgBox "Sorry, this macro only works in bibliographic records!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End Select

' Get the appropriate elements from the fixed field.

PosFF% = CS.FixedFieldPosition
If PosFF% <> DISPLAY_AT_TOP Then
    CS.FixedFieldPosition = DISPLAY_AT_TOP
    ChangedFFView         = TRUE
End If

If CS.GetFixedField( "DtSt", TypeOfDate$ ) = FALSE Or _
   CS.GetFixedField( "Dates", Date1_FF$ )  = FALSE Or _
   CS.GetFixedField( ",", Date2_FF$ )      = FALSE Then
    GoTo Failure:
End If

' Whether or not something is a reprint is beyond the pay grade of this macro to
' determine, so if "r" is found in "DtSt," exit.

If TypeOfDate$ = "r" Then
    MsgBox "Sorry, this macro can't confirm that the record represents a reprint.", WARNING_MESSAGE, WaltsMacros$
    Exit Sub
End IF

If CS.GetFixedField( "BLvl", BibLevel$ ) Then
    If BibLevel$ = "s" Then
        Serial = TRUE
      Else
        Serial = FALSE
    End If
  Else
    GoTo Failure:
End If

If ChangedFFView Then CS.FixedFieldPosition = PosFF%

' Go through all the 26X fields on the record, looking for a publication statement in
' 264 1 and an existing notice of copyright in 264 4. Only keep the first one found in
' either case.

i = 1
Do
  FoundField = CS.GetField( "26.", i, FieldData$ )
  If FoundField Then
      If Left$( FieldData$, 3 ) = "264" Then
          Tag$ = "264"
          Select Case Mid$( FieldData$, 3, 1 )
            Case "0"
              If PublicationStatement$ = "" Then
                  PublicationStatement$ = FieldData$
              End If
            Case "4"
              Select Case Mid$( FieldData$, 5, 1 )
                Case "1"
                  If PublicationStatement$ = "" Then
                      PublicationStatement$ = FieldData$
                  End If
                Case "4"
                  If CopyrightStatement$ = "" Then
                      CopyrightStatement$ = FieldData$
                  End If
              End Select
          End Select
        ElseIf Left$( FieldData$, 3 ) = "260" Then
          Tag$ = "260"
          If InStr( FieldData$, DELIMITER & "c" ) Then
              If PublicationStatement$ = "" Then
                  PublicationStatement$ = FieldData$
              End If
          End If
        ElseIf FieldData$ = "Data contains non-latin script" Then
          NonLatin = TRUE
      End If
  End If
  i = i + 1
Loop Until FoundField = FALSE

' If neither a 260 nor a 264 field are found, or if either field contains non-Latin
' scripts or lacks a date, the macro can't proceed.

If PublicationStatement$ = "" And CopyrightStatement$ = "" Then
    If NonLatin Then
        MsgBox "This macro can't extract a publication date from the 26X field.", CRITICAL_MESSAGE, WaltsMacros$
      Else
        If Tag$ = "" Then
            MsgBox "This record doesn't contain a publication date.", CRITICAL_MESSAGE, WaltsMacros$
          Else
            MsgBox "This record doesn't contain a publication date in field " & Tag$ & ".", CRITICAL_MESSAGE, WaltsMacros$
        End If
    End If
    Exit Sub
End If

' Get one or two 4-digit date(s) from subfield $c of the publication statement, and
' collect information to determine the relationship between those dates and any other
' dates present.

p = InStr( PublicationStatement$, DELIMITER & "c" )
If p > 0 Then
    SubfieldC$ = Trim$( Mid$( PublicationStatement$, p + 2 ) )
    If Right$( SubfieldC$, 1 ) = "." Then
        SubfieldC$ = Left$( SubfieldC$, Len( SubfieldC$ ) - 1 )
    End If
    If StrComp( SubfieldC$, "[date of publication not identified]", 1 ) = 0 Then
        Date1_26X$ = "nnnn"
        Date2_26X$ = "nnnn"
      Else

' There may be subfields following subfield $c (e.g., in AACR2, production information in
' subfields $e, $f, or $g). Trim them.

        p = InStr( SubfieldC$, DELIMITER )
        If p > 0 Then
            SubfieldC$ = Left$( SubfieldC$, p - 1 )
        End If
        LenC%  = Len( SubfieldC$ )
        Start% = 1
        For FindYear% = DATE_1 To DATE_2
          For i = Start% To LenC% - 3
            PotentialDate$ = Mid$( SubfieldC$, i, 4 )
            If PotentialDate$ Like "[12][0-9][0-9][0-9]" Or _
               PotentialDate$ Like "[12][0-9][0-9][-]" Or _
               PotentialDate$ Like "[12][0-9][-][-]" Then
                If FindYear% = DATE_1 Then

' What precedes the first date? Check for copyright and hyphen, then check for month and
' day.

                    Date1_26X$ = PotentialDate$
                    If i > 1 Then
                        PrecChar$ = Mid$( SubfieldC$, i - 1, 1 )
                        Select Case PrecChar$
                          Case "c", Chr$( 202 )
                            Relation$ = "t"
                          Case "-"
                            Relation$ = "q" 'Or possibly pre-RDA m, says BF&S
                        End Select
                    End If
                    If i > 3 Then
                        MonthAndDay$ = GetMonthDay( Left$( SubfieldC$, i - 1 ) )
                    End If

' What follows the first date? A hyphen always means multiple dates. Detailed date
' information could also follow a year.

                    If i + 4 <= LenC% Then
                        If Mid$( SubfieldC$, i + 4, 1 ) = "-" Then
                            If Not Serial Then
                                Relation$ = "m"
                            End If
                        End If
                        If i + 8 < LenC% Then
                            MonthAndDay$ = GetMonthDay( Mid$( SubfieldC$, i + 4 ) )
                        End If
                    End If
                    Start% = i + 4
                    If MonthAndDay$ <> "" Then
                        Date2_26X$ = MonthAndDay$
                        Relation$ = "e"
                    End If
                    Date1_26X$ = ChangeHyphenTo_u( Date1_26X$ )
                    Exit For

                  Else
                    Date2_26X$ = PotentialDate$
                    PrecChar$ = Mid$( SubfieldC$, i - 1, 1 )
                    Select Case PrecChar$
                      Case "c", Chr$( 202 )
                        Relation$ = "t"
                      Case "["
                      Case "-"
                        If i = Start% + 1 Then
                            i = i
                        End If
                    End Select
                    Date2_26X$ = ChangeHyphenTo_u( Date2_26X$ )
                End If
                If i + 3 < Len( SubfieldC$ ) And Right$( PotentialDate$, 1 ) Like "[0-9]" Then
                    If Mid$( SubfieldC$, i + 4, 1 ) Like "[0-9]" Then
'                        GetDate = ""
                    End If
                End If
            End If
          Next i
          If Start% + 4 > Len( SubfieldC$ ) Then
              Exit For
          End If
        Next FindYear%
    End If

    If Date1_26X$ = "" Then
        MsgBox "No date could be extracted from the record's " & Left$( PublicationStatement$, 3 ) & " field.", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If

    If Date2_26X$ = "" And Relation$ = "m" Then
        Date2_26X$ = "9999"
    End If

  Else
    MsgBox "This record doesn't contain a publication date.", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End If

' Get the first 4-digit date from the copyright statement, unless the type of date is
' detailed or multiple--codes for both of which take precedence over coding for a
' copyright type of date.

If Relation$ = "" Or Relation$ Like "[!em]" Then
    If CopyrightStatement$ <> "" Then
        p = InStr( CopyrightStatement$, DELIMITER & "c" )
        If p > 0 Then
            SubfieldC$ = Trim$( Mid$( CopyrightStatement$, p + 2 ) )
            p = InStr( SubfieldC$, DELIMITER )
            If p > 0 Then
                SubfieldC$ = Left$( SubfieldC$, p - 1 )
            End If
            For i = 1 To Len( SubfieldC$ ) - 3
              PotentialDate$ = Mid$( SubfieldC$, i, 4 )
              If PotentialDate$ Like "[12][0-9][0-9][0-9]" Or _
                 PotentialDate$ Like "[12][0-9][0-9][-]" Or _
                 PotentialDate$ Like "[12][0-9][-][-]" Then
                  Date2_26X$ = PotentialDate$
                  Relation$  = "t"
                  Exit For
              End If
            Next i
        End If
    End If
End If

' With the dates in hand, determine what "DtSt" ought to be.

If Serial Then
    If Date1_26X$ <> "" And Date2_26X$ = "" Then
        Relation$ = "c"
        Date2_26X$ = "9999"
      ElseIf Date1_26X$ <> "" And Date2_26X$ <> "" Then
        Relation$ = "d"
    End If
  Else
    If Instr( SubfieldC$, "not before " & Date1_26X$ ) Then
        Relation$  = "q"
        Date2_26X$ = "uuuu"
      ElseIf Instr( SubfieldC$, "not after " & Date1_26X$ ) Then
        Relation$  = "q"
        Date2_26X$ = Date1_26X$
        Date1_26X$ = "uuuu"
    End If
    If Date2_26X$ = "" Then
        Relation$ = "s"
      ElseIf Relation$ = "m" Then
        If BibLevel$ = "c" Then
            Relation$ = "i"
        End If
      ElseIf Relation$ = "t" Then 'DtSt code m takes precedence over code t.
        If TypeOfDate$ <> "t" Then
            MsgBoxAnswer% = MsgBox( "Add copyright date to fixed field?", 35, WaltsMacros$ )
            If MsgBoxAnswer% = MSGBOX_RETURN_CANCEL Then
                Exit Sub
              ElseIf MsgBoxAnswer% = MSGBOX_RETURN_NO Then
                Relation$  = TypeOfDate$
                Date2_26X$ = ""
            End If
        End If
      ElseIf InStr( SubfieldC$, "between " & Date1_26X$ ) Then
        Relation$ = "q"
      ElseIf Instr( SubfieldC$, Date1_26X & " or" ) Then
        Relation$ = "q"
      ElseIf Date2_26X$ <> "" And Relation$ = "s" Then
        MsgBox "Sorry, this macro doesn't know what to do with these dates.", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If
End If

' If the determined data matches the actual data, the macro quits, as there is nothing
' for it to do.

If Date1_26X$ = Date1_FF$ And Date2_26X$ = Date2_FF$ And Relation$ = TypeOfDate$ Then
    MsgBox "The fixed field looks like it's correctly coded!", INFORMATION_MESSAGE, WaltsMacros$
    Exit Sub
End If

' Otherwise, continue by setting the elements of the fixed field.

If Date1_26X$ <> Date1_FF$ Or Date2_26X$ <> Date2_FF$ Or Relation$ <> TypeOfDate$ Then
    PosFF% = CS.FixedFieldPosition
    If PosFF% <> DISPLAY_AT_TOP Then CS.FixedFieldPosition = DISPLAY_AT_TOP
    If CS.SetFixedField( "DtSt", Relation$ ) Then Changed = TRUE
    If CS.SetFixedField( "Dates", Date1_26X$ ) Then Changed = TRUE
    If Date2_26X$ = "" Then Date2_26X$ = "    "
    If CS.SetFixedField( ",", Date2_26X$ ) Then Changed = TRUE
End If
CS.FixedFieldPosition = PosFF%
If Changed = FALSE Then
    MsgBox "Sorry, the fixed field was not completely changed.", WARNING_MESSAGE, WaltsMacros$
End If

Failure:

End Sub

'****************************************************************************************

Function ChangeHyphenTo_u( InString$ ) As String

Dim TempString$

Dim p As Integer

TempString$ = InString$

Do
  p = InStr( TempString$, "-" )
  If p > 0 Then
      Mid$( TempString$, p, 1 ) = "u"
  End If
Loop Until p = 0

ChangeHyphenTo_u = TempString$

End Function

'****************************************************************************************

Function GetMonthDay( InString$ ) As String

' This function looks for the English names or abbreviations of months to try to get a
' numeric string for a detailed type of date. The abbreviations are the standard ones,
' with both "Sep." and "Sept." acceptable for the ninth month of the year.

Dim CharT$
Dim DayString$
Dim MonthString$
Dim TempString$
Dim TestMonth$

Dim i As Integer, j As Integer, p As Integer, z As Integer

Dim Months( 35 ) As String
Months( 0  ) = "January"
Months( 1  ) = "Jan."
Months( 2  ) = ""
Months( 3  ) = "February"
Months( 4  ) = "Feb."
Months( 5  ) = ""
Months( 6  ) = "March"
Months( 7  ) = "Mar."
Months( 8  ) = ""
Months( 9  ) = "April"
Months( 10 ) = "Apr."
Months( 11 ) = ""
Months( 12 ) = "May"
Months( 13 ) = "May"
Months( 14 ) = ""
Months( 15 ) = "June"
Months( 16 ) = "Jun."
Months( 17 ) = ""
Months( 18 ) = "July"
Months( 19 ) = "Jul."
Months( 20 ) = ""
Months( 21 ) = "August"
Months( 22 ) = "Aug."
Months( 23 ) = ""
Months( 24 ) = "September"
Months( 25 ) = "Sep."
Months( 26 ) = "Sept."
Months( 27 ) = "October"
Months( 28 ) = "Oct."
Months( 29 ) = ""
Months( 30 ) = "November"
Months( 31 ) = "Nov."
Months( 32 ) = ""
Months( 33 ) = "December"
Months( 34 ) = "Dec."
Months( 35 ) = ""

TempString$ = Trim( InString$ )
z           = Len( TempString$ )
For i = 0 To 35
  TestMonth$ = Months( i )
  If TestMonth$ <> "" Then
      p = InStr( TempString$, TestMonth$ )
      If p > 0 Then
          If p > 1 Then
              For j = 1 To p
                CharT$ = Mid$( TempString$, j, 1 )
                If CharT$ Like "[0-9]" Then
                    DayString$ = DayString$ & CharT$
                End If
              Next j
            Else
              If p + Len( TestMonth$ ) < z Then
                  If p < z Then
                      For j = ( p + Len( TestMonth$ ) ) To z
                        CharT$ = Mid$( TempString$, j, 1 )
                        If CharT$ Like "[0-9]" Then
                            DayString$ = DayString$ & CharT$
                        End If
                      Next j
                  End If
              End If
          End If
          Exit For
      End If
  End If
Next i
If i = 36 Then
    GetMonthDay = ""
    Exit Function
End If
MonthString$ = Trim$( Str$( Int( i / 3 ) + 1 ) )
If Len( MonthString$ ) = 1 Then
    MonthString$ = "0" & MonthString$
End If
If DayString$ <> "" Then
    If Len( DayString$ ) = 1 Then
        DayString$ = "0" & DayString$
    End If
  Else
    DayString$ = "  "
End If

GetMonthDay = MonthString$ & DayString$

End Function
'54419264

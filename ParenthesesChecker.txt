'MacroName:ParenthesesChecker.2023.02
'MacroDescription:Checks a bibliographic record for pairs of parentheses and brackets.
'
' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
'
' Last updated: 23 July 2023.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 3.1 and Windows 11 Enterprise & 64-bit
' Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works: Run the macro while viewing a bibliographic record (the cursor position
' is irrelevant). The macro checks for pairs of parentheses and square brackets in every
' field of the record. If one of those marks of punctuation lacks a partner, the macro
' identifies the position of the first unmatched mark, places the cursor in the field
' just before that position, and then stops. After fixing that problem, run the macro
' again to find the next solitary parenthesis or bracket.
'
' If non-Latin script fields are present, as identified by the presence of field 066, the
' macro will check only fields in Latin scripts.
'****************************************************************************************

Option Explicit

Declare Sub ShowProblem( ParenPos%, LeftOrRight%, WhichMark% )

Global Const MSGBOX_SETBUTTONS_OK_CANCEL As Integer = 1

Global Const aLEFT_CHAR  As Integer = 0
Global Const aRIGHT_CHAR As Integer = 1

Global LineNumber%
Global Tag$
Global WaltsMacros$

Global CharacterPositions() As Integer
Global Characters( 1, 1 )   As String

'****************************************************************************************

Sub Main

Dim CS As Object
On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Const CRITICAL_MESSAGE       As Integer = 16
Const INFORMATION_MESSAGE    As Integer = 64
Const MSGBOX_RETURN_CANCEL   As Integer = 2
Const SUBSCRIPT_OUT_OF_RANGE As Integer = 9

Dim BracketCount%
Dim CharactersIndex%
Dim CharT$
Dim Count%
Dim EndUp%
Dim FieldData$
Dim LEFT_CHARACTER
Dim ParenCount%
Dim RIGHT_CHARACTER
Dim TotalCount%
Dim TypeOfWindow%

Dim FoundField
Dim MacroFinished
Dim Matched

Characters( 0, 0 ) = "("
Characters( 1, 0 ) = ")"
Characters( 0, 1 ) = "["
Characters( 1, 1 ) = "]"

Dim i As Integer, j As Integer

WaltsMacros$ = "[Walt's macros] Extras3:ParenthesesChecker"

' First, make sure a bibliographic record is displayed.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case -1, 3 To 16, 18, 20 To 26
    MsgBox "Sorry, this macro works only in a bibliographic record!", MSGBOX_SETBUTTONS_OK_CANCEL + CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End Select

' Look for field 066 indicating the presence of non-Latin script characters. If found, it
' means the macro can't check the whole record, only those fields in Latin script.

If CS.GetField( "066", 1, FieldData$ ) Then
    If MsgBox( "This macro can check for paired punctuation only in the fields containing Latin script. Continue?", 33, WaltsMacros$ ) = MSGBOX_RETURN_CANCEL Then Exit Sub
End If

LineNumber% = 1

For CharactersIndex% = 0 To 1

  LEFT_CHARACTER  = Characters( aLEFT_CHAR, CharactersIndex% )
  RIGHT_CHARACTER = Characters( aRIGHT_CHAR, CharactersIndex% )

  Do
    Erase CharacterPositions
    FoundField = CS.GetFieldLine( LineNumber%, FieldData$ )
    If FoundField Then
        Count% = 0
        Tag$   = Left$( FieldData$, 3 )
        If Tag$ <> "066" And FieldData$ <> "Data contains non-latin script" Then
            FieldData$ = Mid$( FieldData$, 6 )

' Go through the field, character by character, looking for left and right parentheses
' and brackets.

            For i = 1 To Len( FieldData$ )

              Matched = FALSE
              CharT$  = Mid$( FieldData$, i, 1 )

              Select Case CharT$

' If a left mark of punctuation is found, record its position in the first dimension of
' the array. Keep going through the string, as the matching right mark may lie just
' ahead.

                Case LEFT_CHARACTER

                  ReDim Preserve CharacterPositions( 1, Count% )
                  CharacterPositions( aLEFT_CHAR, Count% ) = i
                  Count% = Count% + 1

' If a right mark of punctuation is found, immediately step back through the array,
' looking for a zero in the second dimension. This indicates a left mark without a match.
' If found, record the position of the right mark in the second dimension of the array.
' The two numbers at the index of the array indicate a pair of punctuation marks. If no
' empty entry in the array is found--that is, partners have been found for all the left
' marks--stop searching the field, and call the function to display the section of the
' field containing the solitary right mark.

                Case RIGHT_CHARACTER

                  On Error Resume Next
                  For j = UBound( CharacterPositions, 2 ) To 0 Step -1
                    If Err = SUBSCRIPT_OUT_OF_RANGE Then
                        Matched = FALSE
                        Exit For
                    End If
                    If CharacterPositions( aRIGHT_CHAR, j ) = 0 Then
                        CharacterPositions( aRIGHT_CHAR, j ) = i
                        Matched = TRUE
                        Exit For
                    End If
                  Next j
                  If Matched = FALSE Then
                      Call ShowProblem( i, aRIGHT_CHAR, CharactersIndex% )
                      MacroFinished = TRUE
                      EndUp%        = i
                      Exit For
                  End If

              End Select

            Next i

            If MacroFinished Then
                Exit Do
              Else
                MacroFinished = FALSE
            End If

            TotalCount% = TotalCount% + Count%

' The macro may have done its job before the entire string has been gone through if a
' right mark of punctuation was discovered to have no left mark to pair up with. A
' solitary left mark, on the other hand, can only be discovered after the whole string
' has been examined. It is found by going through the array from beginning to end,
' looking for the position of a left mark of punctuation in the first dimension that has
' no corresponding position for the matching right mark in the second dimension.

            If Count% > 0 Then
                For i = 0 To UBound( CharacterPositions, 2 )
                  If CharacterPositions( aRIGHT_CHAR, i ) = 0 Then
                      Call ShowProblem( CharacterPositions( aLEFT_CHAR, i ), aLEFT_CHAR, CharactersIndex% )
                      MacroFinished = TRUE
                      EndUp%        = CharacterPositions( aLEFT_CHAR , i )
                      Exit For
                  End If
                Next i
                If MacroFinished Then
                    Exit Do
                End If
            End If
        End If
    End If
    LineNumber% = LineNumber% + 1
  Loop Until FoundField = FALSE

  If MacroFinished Then
      CS.CursorRow    = LineNumber%
      CS.CursorColumn = EndUp% + 5
      Exit Sub
  End If

  LineNumber% = 1
  If CharactersIndex% = 0 Then
      ParenCount% = TotalCount%
    Else
      BracketCount% = TotalCount% - ParenCount%
  End If
Next CharactersIndex%

If CharactersIndex% = 2 Then
    If TotalCount% = 0 Then
        MsgBox "There are no parentheses or brackets in this record.", MSGBOX_SETBUTTONS_OK_CANCEL + INFORMATION_MESSAGE, WaltsMacros$
      Else
        If ParenCount% > 0 And BracketCount% = 0 Then
            MsgBox "All parentheses in this record seem to be paired!", MSGBOX_SETBUTTONS_OK_CANCEL + INFORMATION_MESSAGE, WaltsMacros$
          ElseIf ParenCount% = 0 And BracketCount% > 0 Then
            MsgBox "All brackets in this record seem to be paired!", MSGBOX_SETBUTTONS_OK_CANCEL + INFORMATION_MESSAGE, WaltsMacros$
          ElseIf ParenCount% > 0 And BracketCount% > 0 Then
            MsgBox "All parentheses and brackets in this record seem to be paired!", MSGBOX_SETBUTTONS_OK_CANCEL + INFORMATION_MESSAGE, WaltsMacros$
        End If
    End If
End If

End Sub

'****************************************************************************************

Sub ShowProblem( ParenPos%, LeftOrRight%, WhichMark% )

Const WARNING_MESSAGE As Integer = 48

Dim CharacterName$
Dim LineNum$
Dim PositionMessage$
Dim Word1$
Dim Word2$

LineNum$ = Trim$( Str$( LineNumber% ) )

Select Case WhichMark%
  Case 0
    CharacterName$ = "parenthesis"
  Case 1
    CharacterName$ = "bracket"
End Select

' Adjust the wording.

If LeftOrRight% = aLEFT_CHAR Then
    Word1$ = "opening"
    Word2$ = "a closing"
  Else
    Word1$ = "closing"
    Word2$ = "an opening"
End If

PositionMessage$ = "The " & Word1$ & " " & CharacterName$ & " at position " & Trim$( Str$( ParenPos% ) ) & " in line "
PositionMessage$ = PositionMessage$ & LineNum$ & ", field " & Tag$ & ", lacks " & Word2$ & " " & CharacterName$ & "."

MsgBox PositionMessage$, MSGBOX_SETBUTTONS_OK_CANCEL + WARNING_MESSAGE, WaltsMacros$

End Sub
'2709574
'
'Macro name: ParenthesesChecker
'Macro book: C:\Users\wnickeson.UR\AppData\Roaming\OCLC\Connex\Macros\Extras3.mbk
'Saved: 8/22/2023 10:04:02 AM using "MacroBookInspector" macro by Walter F. Nickeson.

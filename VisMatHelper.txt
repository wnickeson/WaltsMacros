'MacroName:VisMatHelper.2023.03
'MacroDescription:Helps correct and add fixed field and 007 field values in bibliographic
' records for visual materials.
'
' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
'
' Last updated: 19 July 2023.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 3.1 and Windows 11 Enterprise & 64-bit
' Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works: Run the macro in a bibliographic record (the cursor position is
' irrelevant). If the record is in a Visual Materials format, the macro displays the
' relevant elements from the fixed field, and all visual materials 007 fields, for easy
' verification or editing. Changing some of the fixed field elements results in the
' automatic changing of other parts of the dialog box. Any existing 007 fields are
' displayed with descriptions of all the codes for easy editing. The macro helps in
' adding new 007 fields, supplying appropriate default values for mandatory subfields
' and blanks for other subfields. An existing 007 field can be cloned to add a similar
' field (such as when the resource contains both positive and negative aspects) without
' having to re-enter all the data.
'
' If the record is not in a Visual Materials format, the macro offers to change the
' format, with the option to make a new record. Inappropriate 007 fields, such as
' existing fields that don't belong when the Type value is changed, are automatically
' deleted. When changing or creating a record from a record in Books, Computer Files, or
' Mixed Materials format, the option to add an 006 field for the fixed field elements
' from the original record is offered.
'****************************************************************************************

Option Explicit

Declare Sub CategoryChange
Declare Sub CheckTransferredFields
Declare Sub FillArrays
Declare Sub Setup007( FieldNumber% )
Declare Sub SetupFixedField

Declare Function DigitsToWords( CountOfFields%, PositionOfString% ) As String
Declare Function GetActualRow ( FieldNumber% ) As Integer
Declare Function TransferredFieldsOptions      As String

Declare Function Dialog1ControlFunction( Id$, Action%, SVal& )

Global Const BLANK               As String  = " "
Global Const CANCEL              As Integer = 102
Global Const CHECKED             As Integer = 1
Global Const DISABLED            As Integer = 0
Global Const ENABLED             As Integer = 1
Global Const INFORMATION_MESSAGE As Integer = 64
Global Const INVISIBLE           As Integer = 0
Global Const UNCHECKED           As Integer = 0
Global Const VISIBLE             As Integer = 1
Global Const WARNING_MESSAGE     As Integer = 48

Global Const DELETED_FIELD       As String  = "X"  'Marks an 007 field to delete.
Global Const FIELD_ACTION        As Integer = 0
Global Const WHOLE_FIELD         As Integer = 1
Global Const SUBF_A              As Integer = 2
Global Const SUBF_B              As Integer = 3
Global Const SUBF_D              As Integer = 4
Global Const SUBF_E              As Integer = 5
Global Const SUBF_F              As Integer = 6
Global Const SUBF_G              As Integer = 7
Global Const SUBF_H              As Integer = 8
Global Const SUBF_I              As Integer = 9
Global Const SUBF_J              As Integer = 10
Global Const SUBF_K              As Integer = 11
Global Const SUBF_L              As Integer = 12
Global Const SUBF_M              As Integer = 13
Global Const SUBF_N              As Integer = 14
Global Const SUBF_O              As Integer = 15
Global Const SUBF_P              As Integer = 16
Global Const SUBF_Q              As Integer = 17
Global Const SUBF_R              As Integer = 18

Global Const KIT                 As String  = "o"
Global Const MOTION_PICTURE      As String  = "m"
Global Const VIDEORECORDING      As String  = "v"

Global Category$
Global CS As Object
Global DeletedFieldCount%
Global ffTech$
Global ffTime$
Global ffTMat$
Global ffType$
Global FieldCount%               'Total number of 007 fields.
Global FieldNumber%              'Which 007 field is displayed.
Global FieldsRowCount%           'Upper bound of array of 007 fields (1 less than total number).
Global FILL_CHAR As String*1
Global OriginalFieldCount%
Global OriginalMaterial$
Global OriginalTMat$
Global OriginalType$
Global WaltsMacros$

Global ChangeTech
Global ChangeTime
Global ChangeTMat
Global ChangeType
Global New007
Global NotCopied
Global Quit

Global aCategory  ( 4 )  As String
Global aFieldList ( )    As String
Global aFields    ( )    As String
Global aTech      ( 5 )  As String
Global aTMat_g    ( 6 )  As String
Global aTMat_k    ( 8 )  As String
Global aTMat_o    ( 2 )  As String
Global aTMat_r    ( 9 )  As String
Global aTMat_z    ( 1 )  As String
Global aType      ( 3 )  As String
Global aTypeChange( 4 )  As String

Global aSubfB_KT  ( 0 )  As String
Global aSubfB_MP  ( 5 )  As String
Global aSubfB_NP  ( 19 ) As String
Global aSubfB_PR  ( 7 )  As String
Global aSubfB_VR  ( 5 )  As String
Global aSubfD_MP  ( 6 )  As String
Global aSubfD_NP  ( 6 )  As String
Global aSubfD_PR  ( 7 )  As String
Global aSubfD_VR  ( 6 )  As String
Global aSubfE_MP  ( 8 )  As String
Global aSubfE_NP  ( 22 ) As String
Global aSubfE_PR  ( 8 )  As String
Global aSubfE_VR  ( 19 ) As String
Global aSubfF_MU  ( 3 )  As String 'Sound on medium same for MP, PR, VR
Global aSubfF_NP  ( 22 ) As String
Global aSubfG_MU  ( 11 ) As String 'Medium for sound same for MP, PR, VR
Global aSubfH_MP  ( 8 )  As String
Global aSubfH_PR  ( 16 ) As String
Global aSubfH_VR  ( 7 )  As String
Global aSubfI_MU  ( 7 )  As String 'Config. of playback channels same for MP, VR
Global aSubfI_PR  ( 9 )  As String
Global aSubfJ_MP  ( 9 )  As String
Global aSubfK_MP  ( 5 )  As String
Global aSubfL_MP  ( 6 )  As String
Global aSubfM_MP  ( 11 ) As String
Global aSubfN_MP  ( 22 ) As String
Global aSubfO_MP  ( 7 )  As String
Global aSubfP_MP  ( 11 ) As String
Global aSubfQ_MP  ( 4 )  As String

'****************************************************************************************

Sub Main

On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Const CRITICAL_MESSAGE     As Integer = 16
Const DISPLAY_FF_AT_TOP    As Integer = 1
Const INITIAL              As Integer = 0    'The value indicating the "O" in "One" begins the sentence.
Const MEDIAL               As Integer = 1    'The value indicating the "o" in "one" is in the middle of the sentence.
Const NEW_FIELD            As String  = "N"  'Marks a new 007 field to add if it is unique.
Const ORIGINAL_FIELD       As String  = "O"  'Marks an 007 field that was present on the original record.
Const TRANSFER_FIXED_FIELD As Integer = -1   'Preserves the fixed field when a new record is derived from the original.
Const VISUAL_MATERIALS     As Integer = 7    'The value to change the record's format to "Visual Materials".

Dim DELIMITER As String*1    : DELIMITER      = Chr$( 223 )

Dim ActionIndicator$
Dim Add007%
Dim Audn$
Dim Biog$
Dim BLvl$
Dim Change007%
Dim Conf$
Dim Cont$
Dim Ctrl$
Dim Ctry$
Dim CurrentRow%
Dim Dates1$
Dim Dates2$
Dim DtSt$
Dim Fest$
Dim ffBLvl$
Dim FieldData$
Dim File$
Dim Form$
Dim GPub$
Dim Ills$
Dim Indx$
Dim Lang$
Dim LitF$
Dim MRec$
Dim New006$
Dim PosFF%
Dim Start%
Dim SubfieldCodes$           : SubfieldCodes$ = " abdefghijklmnopqr"
Dim Summation$
Dim TempCode$
Dim TempString$
Dim TypeOfWindow%

Dim Add006                   : Add006         = FALSE
Dim ChangedFFView            : ChangedFFView  = FALSE
Dim FoundField               : FoundField     = FALSE
Dim GetFF
Dim NewRecord                : NewRecord      = FALSE
Dim SetFF

Dim i As Integer, j As Integer, k As Integer, p As Integer

FILL_CHAR    = Chr$( 130 )
WaltsMacros$ = "[Walt's macros] Extras1:VisMatHelper"
New007       = FALSE
NotCopied    = FALSE
Quit         = FALSE

Erase aFields()
FieldCount% = 0

' First, make sure a bibliographic record is open.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%

  Case -1, 3 To 16, 18, 20 To 26
    MsgBox "Sorry, this macro works only in a bibliographic record!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub

End Select

' Then get the fixed field value of "Type".

PosFF% = CS.FixedFieldPosition
If PosFF% <> DISPLAY_FF_AT_TOP Then
    CS.FixedFieldPosition = DISPLAY_FF_AT_TOP
    ChangedFFView         = TRUE
End If

If CS.GetFixedField( "Type", ffType$ ) = FALSE Then
    MsgBox "Sorry, the macro cannot proceed.", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
  Else
    If ffType$ = "" Then ffType$ = Chr$( 252 )
    OriginalType$ = ffType$
    If CS.GetFixedField( "TMat", ffTMat$ ) Then
        OriginalTMat$ = ffTMat$
    End If
    GetFF = CS.GetFixedField( "Tech", ffTech$ )
    GetFF = CS.GetFixedField( "Time", ffTime$ )
    If ffTime$ = Chr$( 252 ) & Chr$( 252 ) & Chr$( 252 ) Then
        ffTime$ = FILL_CHAR & FILL_CHAR & FILL_CHAR
    End If
    GetFF = CS.GetFixedField( "BLvl", ffBLvl$ )
    Select Case ffType$
      Case "a", "t"
        If ffBLvl$ Like "[!bis]" Then
            OriginalMaterial$ = "Books"
        End If
      Case "m"
        OriginalMaterial$ = "Computer files"
      Case "p"
        OriginalMaterial$ = "Mixed materials"
    End Select
End If

' If the original record was in Books, Computer Files, or Mixed Materials format, get
' some of its fixed field values for possible addition as an 006 field.

If ffType$ Like "[!gkor]" Then
    GetFF = CS.GetFixedField( "Audn", Audn$ )
    GetFF = CS.GetFixedField( "Biog", Biog$ )
    GetFF = CS.GetFixedField( "Conf", Conf$ )
    GetFF = CS.GetFixedField( "Cont", Cont$ )
    GetFF = CS.GetFixedField( "Fest", Fest$ )
    GetFF = CS.GetFixedField( "File", File$ )
    GetFF = CS.GetFixedField( "Form", Form$ )
    GetFF = CS.GetFixedField( "GPub", GPub$ )
    GetFF = CS.GetFixedField( "Ills", Ills$ )
    GetFF = CS.GetFixedField( "Indx", Indx$ )
    GetFF = CS.GetFixedField( "LitF", LitF$ )
End If

If ChangedFFView Then CS.FixedFieldPosition = PosFF%

' Get all the Visual Materials 007 fields. Parse each one and store it as an element of a
' two-dimensional array. For a new record, delete inappropriate 007 fields.

i = 1
Do
  FoundField = CS.GetField( "007", i, FieldData$ )
  If FoundField Then
      Category$  = Mid$( FieldData$, 6, 1 )
      If Category$ Like "[gkmov]" Then
          FieldCount% = FieldCount% + 1
          ReDim Preserve aFields( SUBF_R, FieldsRowCount% )
          aFields( FIELD_ACTION, FieldsRowCount% ) = ORIGINAL_FIELD
          aFields( WHOLE_FIELD,  FieldsRowCount% ) = Mid$( FieldData$, 6 )
          aFields( SUBF_A,       FieldsRowCount% ) = Category$
          Start% = 7
          Do
            p = InStr( Start%, FieldData$, DELIMITER )
            If p <> 0 Then

                Select Case Mid$( FieldData$, p + 1, 1 )

                  Case "b"
                    aFields( SUBF_B, FieldsRowCount% ) = Mid$( FieldData$, p + 3, 1 )
                  Case "d"
                    aFields( SUBF_D, FieldsRowCount% ) = Mid$( FieldData$, p + 3, 1 )
                  Case "e"
                    aFields( SUBF_E, FieldsRowCount% ) = Mid$( FieldData$, p + 3, 1 )
                  Case "f"
                    aFields( SUBF_F, FieldsRowCount% ) = Mid$( FieldData$, p + 3, 1 )
                  Case "g"
                    aFields( SUBF_G, FieldsRowCount% ) = Mid$( FieldData$, p + 3, 1 )
                  Case "h"
                    aFields( SUBF_H, FieldsRowCount% ) = Mid$( FieldData$, p + 3, 1 )
                  Case "i"
                    aFields( SUBF_I, FieldsRowCount% ) = Mid$( FieldData$, p + 3, 1 )
                  Case "j"
                    aFields( SUBF_J, FieldsRowCount% ) = Mid$( FieldData$, p + 3, 1 )
                  Case "k"
                    aFields( SUBF_K, FieldsRowCount% ) = Mid$( FieldData$, p + 3, 1 )
                  Case "l"
                    aFields( SUBF_L, FieldsRowCount% ) = Mid$( FieldData$, p + 3, 1 )
                  Case "m"
                    aFields( SUBF_M, FieldsRowCount% ) = Mid$( FieldData$, p + 3, 1 )
                  Case "n"
                    aFields( SUBF_N, FieldsRowCount% ) = Mid$( FieldData$, p + 3, 1 )
                  Case "o"
                    aFields( SUBF_O, FieldsRowCount% ) = Mid$( FieldData$, p + 3, 1 )
                  Case "p"
                    aFields( SUBF_P, FieldsRowCount% ) = Mid$( FieldData$, p + 3, 1 )
                  Case "q"
                    aFields( SUBF_Q, FieldsRowCount% ) = Mid$( FieldData$, p + 3, 1 )
                  Case "r"
                    aFields( SUBF_R, FieldsRowCount% ) = Mid$( FieldData$, p + 3 )

                End Select

                Start% = p + 1
            End If
          Loop Until p = 0
          ReDim Preserve aFieldList( FieldsRowCount% )
          aFieldList( FieldsRowCount% ) = Trim$( Str$( FieldsRowCount% + 1 ) )
          FieldsRowCount%               = FieldsRowCount% + 1
      End If
  End If
  i = i + 1
Loop Until FoundField = FALSE

' Set the display to the first 007 field, if more than one is found.

If FieldCount% > 0 Then
    Category$       = aFields( SUBF_A, 0 )
    FieldsRowCount% = FieldCount% - 1
End If

OriginalFieldCount% = FieldCount%

' If the record is not in Visual Materials format, check for the presence of an 006 field
' describing the visual materials aspect of the resource.

i = 1
Do
  FoundField = CS.GetField( "006", i, FieldData$ )
  If FoundField Then
      If Mid$( FieldData$, 6, 1 ) Like "[gkor]" Then
          ffType$ = Mid$( FieldData$, 6, 1 )
          ffTime$ = Mid$( FieldData$, 7, 3 )
          ffTMat$ = Mid$( FieldData$, 22, 1 )
          ffTech$ = Mid$( FieldData$, 23, 1 )
          Exit Do
        Else
          i = i + 1
      End If
  End If
Loop Until FoundField = FALSE

' Now fill the arrays for display.

FillArrays

' Run the main dialog box.

Begin Dialog Dialog1Definition  352, 452, WaltsMacros$, .Dialog1ControlFunction
  OkButton      230, 428,  52,  14
  CancelButton  290, 428,  52,  14
  DropListBox    40,  18, 208,  56, aType(),                             .DropListBox_Type
  Text           18,  20,  20,   8, "Type"
  CheckBox      254,  18,  72,  12, "Derive new record",                 .CheckBox_NewRec
  CheckBox      254,  32,  72,  12, "Add 006 for",                       .CheckBox_Add006
  Text          266,  43,  72,   8, "",                                  .TextFor_Add006
  DropListBox    40,  36, 112,  96, "",                                  .DropListBox_TMat
  Text           18,  38,  20,   8, "TMat"
  DropListBox    40,  54, 112,  72, aTech(),                             .DropListBox_Tech
  Text           18,  56,  20,   8, "Tech"
  TextBox       190,  54,  24,  12,                                      .TextBox_Time
  Text          166,  56,  20,   8, "Time"
  GroupBox       10,   6, 332,  68, "Fixed field",                       .GroupBox1
  GroupBox       10,  79, 332, 342, "007",                               .GroupBox2
  PushButton     20,  90,  64,  14, "",                                  .Add007Button
  Text          278,  92,  24,   8, "Field",                             .CountLegend
  CheckBox       92,  91,  64,  12, "Copy this field",                   .CheckBox_Copy007
  DropListBox   300,  90,  28,  80, aFieldList(),                        .DropListBox22
  DropListBox   154, 112, 176,  64, aCategory(),                         .DropListBox_Category
  Text           20, 114, 128,   8, "a / Category of material",          .TextForBox_Category
  DropListBox   154, 130, 176, 144, "",                                  .DropListBox_SMD
  Text           20, 132, 128,   8, "b / Specific material designation", .TextForBox_SMD
  DropListBox   154, 148, 176,  80, "",                                  .DropListBox_Color
  Text           20, 150, 128,   8, "d / Color",                         .TextForBox_Color
  DropListBox   154, 166, 176, 144, "",                                  .DropListBox7
  Text           20, 168, 128,   8, "",                                  .TextForBox7
  DropListBox   154, 184, 176, 144, "",                                  .DropListBox8
  Text           20, 186, 128,   8, "",                                  .TextForBox8
  DropListBox   154, 202, 176, 144, "",                                  .DropListBox9
  Text           20, 204, 128,   8, "",                                  .TextForBox9
  DropListBox   154, 220, 176, 144, "",                                  .DropListBox10
  Text           20, 222, 128,   8, "",                                  .TextForBox10
  DropListBox   154, 238, 176, 144, "",                                  .DropListBox11
  Text           20, 240, 128,   8, "",                                  .TextForBox11
  DropListBox   154, 256, 176, 144, aSubfJ_MP(),                         .DropListBox12
  Text           20, 258, 128,   8, "j / Production elements",           .TextForBox12
  DropListBox   154, 274, 176,  80, aSubfK_MP(),                         .DropListBox13
  Text           20, 276, 128,   8, "k / Positive/negative aspect",      .TextForBox13
  DropListBox   154, 292, 176,  80, aSubfL_MP(),                         .DropListBox14
  Text           20, 294, 128,   8, "l / Generation",                    .TextForBox14
  DropListBox   154, 310, 176, 144, aSubfM_MP(),                         .DropListBox15
  Text           20, 312, 128,   8, "m / Base of film",                  .TextForBox15
  DropListBox   154, 328, 176, 144, aSubfN_MP(),                         .DropListBox16
  Text           20, 330, 128,   8, "n / Refined categories of color",   .TextForBox16
  DropListBox   154, 346, 176,  80, aSubfO_MP(),                         .DropListBox17
  Text           20, 348, 128,   8, "o / Kind of color stock or print",  .TextForBox17
  DropListBox   154, 364, 176, 144, aSubfP_MP(),                         .DropListBox18
  Text           20, 366, 128,   8, "p / Deterioration stage",           .TextForBox18
  DropListBox   154, 382, 176,  56, aSubfQ_MP(),                         .DropListBox19
  Text           20, 384, 128,   8, "q / Completeness",                  .TextForBox19
  TextBox       154, 400,  80,  12,                                      .TextBox_FilmInspec
  Text           20, 402, 128,   8, "r / Film inspection date",          .TextForBox2
End Dialog

Dim Dialog1 As Dialog1Definition
On Error Resume Next
Dialog Dialog1
If Err = CANCEL Then Exit Sub

If Quit Then Exit Sub

' If the option to derive a new record has been chosen, that is the first piece of
' editing. Before actually creating the new record, check to see if the user settings in
' "Options" will omit some fields. When the macro is finished, display a message about
' those missing fields.

If Dialog1.CheckBox_NewRec = CHECKED Then
    NewRecord = TRUE
    CheckTransferredFields
    If CS.DeriveNewRecord( TRANSFER_FIXED_FIELD ) = FALSE Then
        MsgBox "Sorry, the macro could not make a new record.", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
      Else
        If CS.Reformat Then
        End If
    End If
End If

' If "Type" has been changed, whether or not a new record has been created, change the
' format of the record.

If ChangeType Then
    If CS.ChangeRecordType( VISUAL_MATERIALS ) = FALSE Then
        MsgBox "Sorry, the macro failed to convert the record to Visual Materials format.", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If
End If

' If any elements in the fixed field have been changed, apply those changes to the
' record.

PosFF% = CS.FixedFieldPosition
If PosFF% <> DISPLAY_FF_AT_TOP Then
    CS.FixedFieldPosition = DISPLAY_FF_AT_TOP
    ChangedFFView         = TRUE
End If

If NewRecord Then
    SetFF = CS.SetFixedField( "ELvl", "I" )
End If

If ChangeType Then
    SetFF = CS.SetFixedField( "Type", ffType$ )
End If

If ChangeTech Then
    SetFF = CS.SetFixedField( "Tech", ffTech$ )
End If

If ChangeTime Then
    SetFF = CS.SetFixedField( "Time", ffTime$ )
End If

If ChangeTMat Then
    SetFF = CS.SetFixedField( "TMat", ffTMat$ )
End If

If ChangedFFView Then CS.FixedFieldPosition = PosFF%

' Add an 006 field for information about the original record, if that option has been
' chosen.

If Dialog1.CheckBox_Add006 = CHECKED Then

    Select Case OriginalMaterial$

      Case "Books"

        If Ills$ <> "" Then
            Ills$ = Ills$ & Space$( 4 - Len( Ills$ ) )
          Else
            Ills$ = "    "
        End If
        New006$ = "a" & Ills$
        If Audn$ <> "" Then
            New006$ = New006$ & Audn$
          Else
            New006$ = New006$ & " "
        End If
        New006$ = New006$ & " " 'Make "Form" blank
        If Cont$ <> "" Then
            Cont$ = Cont$ & Space$( 4 - Len( Cont$ ) )
          Else
            Cont$ = "    "
        End If
        New006$ = New006$ & Cont$
        If GPub$ <> "" Then
            New006$ = New006$ & GPub$
          Else
            New006$ = New006$ & " "
        End If
        If Conf$ <> "" Then
            New006$ = New006$ & Conf$
          Else
            New006$ = New006$ & "0"
        End If
        If Fest$ <> "" Then
            New006$ = New006$ & Fest$
          Else
            New006$ = New006$ & "0"
        End If
        If Indx$ <> "" Then
            New006$ = New006$ & Indx$
          Else
            New006$ = New006$ & "0"
        End If
        New006$ = New006$ & " "
        If LitF$ <> "" Then
            New006$ = New006$ & LitF$
          Else
            New006$ = New006$ & "0"
        End If
        If Biog$ <> "" Then
            New006$ = New006$ & Biog$
        End If

      Case "Computer files"

        If Audn$ <> "" Then
            New006$ = "m    " & Audn$
          Else
            New006$ = "m     "
        End If
        If Form$ <> "" Then
            New006$ = New006$ & Form$ & "  "
          Else
            New006$ = New006$ & "   "
        End If
        If File$ <> "" Then
            New006$ = New006$ & File$ & " "
          Else
            New006$ = New006$ & "u "
        End If
        If GPub$ <> "" Then
            New006$ = New006$ & GPub$
        End If

    End Select

    New006$ = "006  " & New006$
    If CS.AddField( 1, New006$ ) = FALSE Then
        MsgBox "Sorry, the macro could not add an 006 field from the original record for " & OriginalMaterial$ & ".", WARNING_MESSAGE, WaltsMacros$
    End If

End If

' If an 007 field has been added, deleted, or edited, change the record accordingly. Only
' do this part if a) at least one 007 field is present or b) the record at one point
' contained at least one 007 field for the Visual Materials format.

If FieldCount% > 0 Or OriginalFieldCount% > 0 Then
    CurrentRow% = 1
    For i = 0 To UBound( aFields, 2 )

' Start by constructing the subfield string for each field that is not marked for
' deletion. Do this by concatenating all the non-empty subfields, separating each code by
' the corresponding subfield from the subfield list in the string "SubfieldCodes$."

      ActionIndicator$ = aFields( FIELD_ACTION, i )
      If ActionIndicator$ <> DELETED_FIELD Then
          TempString$ = aFields( SUBF_A, i ) & BLANK
          For j = SUBF_B To SUBF_R
            TempCode$ = aFields( j, i )
            If TempCode$ <> "" And TempCode$ <> BLANK Then
                TempString$ = TempString$ & DELIMITER & Mid$( SubfieldCodes$, j, 1 ) & BLANK & TempCode$ & BLANK
            End If
          Next j
          TempString$ = Trim$( TempString$ )

          Select Case ActionIndicator$

' If an existing field has been edited (in which case the constructed field will not
' match the original), replace it.

            Case ORIGINAL_FIELD

              If TempString$ <> aFields( WHOLE_FIELD, i ) Then
                  If CS.SetField( CurrentRow%, "007  " & TempString$ ) = FALSE Then
                      MsgBox "Sorry, the macro could not replace an 007 field.", WARNING_MESSAGE, WaltsMacros$
                    Else
                      Change007% = Change007% + 1
                  End If
              End If

' Add a new 007 field as the next one. Do this immdiately if there is no existing 007
' field. If there are already 007 fields, add this new one only if it's unique.

            Case NEW_FIELD

              If OriginalFieldCount% = 0 And Add007% = 0 Then
                  If CS.AddField( CurrentRow% + 1, "007  " & TempString$ ) = FALSE Then
                      MsgBox "Sorry, could not add a new 007 field.", WARNING_MESSAGE, WaltsMacros$
                    Else
                      aFields( FIELD_ACTION, i ) = ORIGINAL_FIELD
                      aFields( WHOLE_FIELD,  i ) = TempString$
                      Add007% = Add007% + 1
                  End If
                Else

' Compare a new field with each existing 007 field, starting with the first, to test for
' duplication. A duplicate field is marked for deletion, which means that it won't be
' compared with any additional 007 fields. A record that is added gets its flag marked as
' "original" so it will be included in comparisons for any additional 007 fields.

                  For k = 0 To i - 1
                    If aFields( FIELD_ACTION, k ) <> DELETED_FIELD Then
                        If TempString$ = aFields( WHOLE_FIELD, k ) Then
                            aFields( FIELD_ACTION, i ) = DELETED_FIELD
                            MsgBox "An 007 field was not added because it was the same as an existing 007 field.", WARNING_MESSAGE, WaltsMacros$
                            Exit For
                          Else
                            If CS.AddField( CurrentRow% + 1, "007  " & TempString$ ) = FALSE Then
                                MsgBox "Sorry, the macro could not add a new 007 field.", WARNING_MESSAGE, WaltsMacros$
                              Else
                                aFields( FIELD_ACTION, i ) = ORIGINAL_FIELD
                                aFields( WHOLE_FIELD,  i ) = TempString$
                                Add007% = Add007% + 1
                            End If
                        End If
                    End If
                  Next k
              End If
          End Select

        Else

' If the field has been marked for deletion, delete it, and prevent the current row
' variable from increasing.

          If CS.DeleteField( "007", CurrentRow% ) = FALSE Then
              MsgBox "Sorry, the macro could not replace an 007 field.", WARNING_MESSAGE, WaltsMacros$
            Else
              CurrentRow% = CurrentRow% - 1
          End If
      End If
      CurrentRow% = CurrentRow% + 1
    Next i

End If

' Display information messages.

If NewRecord Then
    Summation$ = "The bibliographic record from which this record was derived is still open!"
    If NotCopied Then
        Summation$ = Summation$ & " Also, at least one field was not transferred to the derived record because of the settings in Tools > Options > Derive Record."
    End If
    MsgBox Summation$, INFORMATION_MESSAGE, WaltsMacros$
    Exit Sub
End If

' Only display a confirmation that the macro has indeed run if nothing was changed.

If ChangeTech = FALSE And _
   ChangeTime = FALSE And _
   ChangeTMat = FALSE And _
   ChangeType = FALSE And _
   Change007% = 0 And _
   Add007%    = 0 Then
    MsgBox "The record was not changed.", INFORMATION_MESSAGE, WaltsMacros$
End If

End Sub

'****************************************************************************************

Sub CategoryChange

' A change in "Category of Material" may mean an 007 field must be deleted. If this is
' the case (always when "Type" is changed, likely when "TMat" is changed), this
' subroutine marks the row of the array that holds the field as being deleted.

Dim i As Integer

If DlgVisible( "DropListBox_Category" ) Then
    For i = 0 To FieldsRowCount%
      If aFields( SUBF_A, i ) = Category$ Then
          aFields( FIELD_ACTION, i ) = DELETED_FIELD
          DeletedFieldCount% = DeletedFieldCount% + 1
      End If
    Next i
    FieldCount% = FieldCount% - DeletedFieldCount%
End If

End Sub

'****************************************************************************************

Sub CheckTransferredFields

' The settings in "Options" for fields to transfer when deriving a new record may mean
' some fields in the original record won't appear in the new record. That may be
' appropriate, but if it happens, set the value of the "NotCopied" flag to alert the user
' at the end that not everything in the original record has been copied.

Dim DerivedFields$
Dim FieldData$
Dim TagGroupSetting$

Dim FoundField

Dim i As Integer, j As Integer

Dim Group( 18 ) As String

Group( 0  ) = "006"
Group( 1  ) = "007"
Group( 2  ) = "02."
Group( 3  ) = "03."
Group( 4  ) = "04."
Group( 5  ) = "05."
Group( 6  ) = "06."
Group( 7  ) = "07."
Group( 8  ) = "08."
Group( 9  ) = "09."
Group( 10 ) = "1.."
Group( 11 ) = "2.."
Group( 12 ) = "3.."
Group( 13 ) = "4.."
Group( 14 ) = "5.."
Group( 15 ) = "6.."
Group( 16 ) = "7.."
Group( 17 ) = "8.."
Group( 18 ) = "9.."

' First, get the settings in "Options" for transferring fields.

DerivedFields$ = TransferredFieldsOptions

' For each tag group specified in "Options", start looking for that tag group's fields.

For i = 1 To 19
  TagGroupSetting$ = Mid$( DerivedFields$, i, 1 )
  j = 1
  If TagGroupSetting$ = "0" Then
      Do

' If no field in that tag group is found, stop looking after the first attempt.

        If CS.GetField( Group( i ), j, FieldData$ ) = FALSE Then
            If j = 1 Then Exit Do

' If a field in the tag group is found, there are two cases where it doesn't count: In
' the 04X group, fields 040 and 049 automatically appear anyway, and would never be
' copied; and in the 09X group, a blank call number field is supplied (for a profile of
' using LC call numbers), so there is no need to copy an original blank 090.

          Else

            Select Case i

              Case 5
                If Left$( FieldData$, 3 ) Like "04[1-8]" Then
                    NotCopied = TRUE
                    Exit Do
                End If

              Case 10
                If Left$( FieldData$, 3 ) <> "090" Then
                    NotCopied = TRUE
                    Exit Do
                End If

              Case Else
                NotCopied = TRUE
                Exit Do

            End Select

        End If
      Loop Until FoundField = FALSE

' As soon as a field in the original record is found that won't get transferred to the
' derived record, exit this routine; one field is all that is needed to trigger the
' warning message.

      If NotCopied Then Exit For
  End If
Next i

End Sub

'****************************************************************************************

Sub FillArrays

aCategory( 0 )   = "g - Projected graphic"
aCategory( 1 )   = "k - Nonprojected graphic"
aCategory( 2 )   = "m - Motion picture"
aCategory( 3 )   = "o - Kit"
aCategory( 4 )   = "v - Videorecording"

aSubfB_KT( 0 )   = "u - Unspecified"

aSubfB_MP( 0 )   = "c - Film cartridge"
aSubfB_MP( 1 )   = "f - Film cassette"
aSubfB_MP( 2 )   = "o - Film roll"
aSubfB_MP( 3 )   = "r - Film reel"
aSubfB_MP( 4 )   = "u - Unspecified"
aSubfB_MP( 5 )   = "z - Other"

aSubfB_NP( 0  )  = "a - Activity card"
aSubfB_NP( 1  )  = "c - Collage"
aSubfB_NP( 2  )  = "d - Drawing"
aSubfB_NP( 3  )  = "e - Painting"
aSubfB_NP( 4  )  = "f - Photomechanical print"
aSubfB_NP( 5  )  = "g - Photonegative"
aSubfB_NP( 6  )  = "h - Photoprint"
aSubfB_NP( 7  )  = "i - Picture"
aSubfB_NP( 8  )  = "j - Print"
aSubfB_NP( 9  )  = "k - Poster"
aSubfB_NP( 10 )  = "l - Technical drawing"
aSubfB_NP( 11 )  = "n - Chart"
aSubfB_NP( 12 )  = "o - Flash card"
aSubfB_NP( 13 )  = "p - Postcard"
aSubfB_NP( 14 )  = "q - Icon"
aSubfB_NP( 15 )  = "r - Radiograph"
aSubfB_NP( 16 )  = "s - Study print"
aSubfB_NP( 17 )  = "u - Unspecified"
aSubfB_NP( 18 )  = "v - Photograph, type unspecified"
aSubfB_NP( 19 )  = "z - Other"

aSubfB_PR( 0 )   = "c - Filmstrip cartridge"
aSubfB_PR( 1 )   = "d - Filmslip"
aSubfB_PR( 2 )   = "f - Filmstrip, type unspecified"
aSubfB_PR( 3 )   = "o - Filmstrip roll"
aSubfB_PR( 4 )   = "s - Slide"
aSubfB_PR( 5 )   = "t - Transparency"
aSubfB_PR( 6 )   = "u - Unspecified"
aSubfB_PR( 7 )   = "z - Other"

aSubfB_VR( 0 )   = "c - Videocartridge"
aSubfB_VR( 1 )   = "d - Videodisc"
aSubfB_VR( 2 )   = "f - Videocassette"
aSubfB_VR( 3 )   = "r - Videoreel"
aSubfB_VR( 4 )   = "u - Unspecified"
aSubfB_VR( 5 )   = "z - Other"

aSubfD_MP( 0 )   = "b - Black-and-white"
aSubfD_MP( 1 )   = "c - Multicolored"
aSubfD_MP( 2 )   = "h - Hand colored"
aSubfD_MP( 3 )   = "m - Mixed"
aSubfD_MP( 4 )   = "n - Not applicable"
aSubfD_MP( 5 )   = "u - Unknown"
aSubfD_MP( 6 )   = "z - Other"

aSubfD_NP( 0 )   = "a - One color"
aSubfD_NP( 1 )   = "b - Black-and-white"
aSubfD_NP( 2 )   = "c - Multicolored"
aSubfD_NP( 3 )   = "h - Hand-colored"
aSubfD_NP( 4 )   = "m - Mixed"
aSubfD_NP( 5 )   = "u - Unknown"
aSubfD_NP( 6 )   = "z - Other"

aSubfD_PR( 0 )   = "a - One color"
aSubfD_PR( 1 )   = "b - Black-and-white"
aSubfD_PR( 2 )   = "c - Multicolored"
aSubfD_PR( 3 )   = "h - Hand colored"
aSubfD_PR( 4 )   = "m - Mixed"
aSubfD_PR( 5 )   = "n - Not applicable"
aSubfD_PR( 6 )   = "u - Unknown"
aSubfD_PR( 7 )   = "z - Other"

aSubfD_VR( 0 )   = "a - One color [DO NOT USE]"
aSubfD_VR( 1 )   = "b - Black-and-white"
aSubfD_VR( 2 )   = "c - Multicolored"
aSubfD_VR( 3 )   = "m - Mixed"
aSubfD_VR( 4 )   = "n - Not applicable"
aSubfD_VR( 5 )   = "u - Unknown"
aSubfD_VR( 6 )   = "z - Other"

aSubfE_MP( 0 )   = BLANK
aSubfE_MP( 1 )   = "a - Standard sound aperture (reduced frame)"
aSubfE_MP( 2 )   = "b - Nonanamorphic (wide-screen)"
aSubfE_MP( 3 )   = "c - 3D"
aSubfE_MP( 4 )   = "d - Anamorphic (wide-screen)"
aSubfE_MP( 5 )   = "e - Other wide-screen format"
aSubfE_MP( 6 )   = "f - Standard silent aperture (full frame)"
aSubfE_MP( 7 )   = "u - Unknown"
aSubfE_MP( 8 )   = "z - Other"

aSubfE_NP( 0  )  = BLANK
aSubfE_NP( 1  )  = "a - Canvas"
aSubfE_NP( 2  )  = "b - Bristol board"
aSubfE_NP( 3  )  = "c - Cardboard/illustration board"
aSubfE_NP( 4  )  = "d - Glass"
aSubfE_NP( 5  )  = "e - Synthetic"
aSubfE_NP( 6  )  = "f - Skin"
aSubfE_NP( 7  )  = "g - Textile"
aSubfE_NP( 8  )  = "h - Metal"
aSubfE_NP( 9  )  = "i - Plastic"
aSubfE_NP( 10 )  = "l - Vinyl"
aSubfE_NP( 11 )  = "m - Mixed collection"
aSubfE_NP( 12 )  = "n - Vellum"
aSubfE_NP( 13 )  = "o - Paper"
aSubfE_NP( 14 )  = "p - Plaster"
aSubfE_NP( 15 )  = "q - Hardboard"
aSubfE_NP( 16 )  = "r - Porcelain"
aSubfE_NP( 17 )  = "s - Stone"
aSubfE_NP( 18 )  = "t - Wood"
aSubfE_NP( 19 )  = "u - Unknown"
aSubfE_NP( 20 )  = "v - Leather"
aSubfE_NP( 21 )  = "w - Parchment"
aSubfE_NP( 22 )  = "z - Other"

aSubfE_PR( 0 )   = BLANK
aSubfE_PR( 1 )   = "d - Glass"
aSubfE_PR( 2 )   = "e - Synthetic"
aSubfE_PR( 3 )   = "j - Safety film"
aSubfE_PR( 4 )   = "k - Film base, other than safety film"
aSubfE_PR( 5 )   = "m - Mixed collection"
aSubfE_PR( 6 )   = "o - Paper"
aSubfE_PR( 7 )   = "u - Unknown"
aSubfE_PR( 8 )   = "z - Other"

aSubfE_VR( 0  )  = BLANK
aSubfE_VR( 1  )  = "a - Beta (1/2 in.)"
aSubfE_VR( 2  )  = "b - VHS (1/2 in.)"
aSubfE_VR( 3  )  = "c - U-matic (3/4 in.)"
aSubfE_VR( 4  )  = "d - EIAJ (1/2 in.)"
aSubfE_VR( 5  )  = "e - Type C (1 in.)"
aSubfE_VR( 6  )  = "f - Quadruplex"
aSubfE_VR( 7  )  = "g - Laserdisc"
aSubfE_VR( 8  )  = "h - CED (Capacitance Electronic Disc) videodisc"
aSubfE_VR( 9  )  = "i - Betacam (1/2 in.)"
aSubfE_VR( 10 )  = "j - Betacam SP (1/2 in.)"
aSubfE_VR( 11 )  = "k - Super-VHS (1/2 in.)"
aSubfE_VR( 12 )  = "m - M-II (1/2 in.)"
aSubfE_VR( 13 )  = "o - D-2 (3/4 in.)"
aSubfE_VR( 14 )  = "p - 8 mm"
aSubfE_VR( 15 )  = "q - Hi-8 mm"
aSubfE_VR( 16 )  = "s - Blu-ray Disc"
aSubfE_VR( 17 )  = "u - Unknown"
aSubfE_VR( 18 )  = "v - DVD"
aSubfE_VR( 19 )  = "z - Other"

aSubfF_MU( 0 )   = BLANK
aSubfF_MU( 1 )   = "a - Sound on medium"
aSubfF_MU( 2 )   = "b - Sound separate from medium"
aSubfF_MU( 3 )   = "u - Unknown"

aSubfF_NP( 0  )  = BLANK
aSubfF_NP( 1  )  = "a - Canvas"
aSubfF_NP( 2  )  = "b - Bristol board"
aSubfF_NP( 3  )  = "c - Cardboard/illustration board"
aSubfF_NP( 4  )  = "d - Glass"
aSubfF_NP( 5  )  = "e - Synthetic"
aSubfF_NP( 6  )  = "f - Skin"
aSubfF_NP( 7  )  = "g - Textile"
aSubfF_NP( 8  )  = "h - Metal"
aSubfF_NP( 9  )  = "i - Plastic"
aSubfF_NP( 10 )  = "l - Vinyl"
aSubfF_NP( 11 )  = "m - Mixed collection"
aSubfF_NP( 12 )  = "n - Vellum"
aSubfF_NP( 13 )  = "o - Paper"
aSubfF_NP( 14 )  = "p - Plaster"
aSubfF_NP( 15 )  = "q - Hardboard"
aSubfF_NP( 16 )  = "r - Porcelain"
aSubfF_NP( 17 )  = "s - Stone"
aSubfF_NP( 18 )  = "t - Wood"
aSubfF_NP( 19 )  = "u - Unknown"
aSubfF_NP( 20 )  = "v - Leather"
aSubfF_NP( 21 )  = "w - Parchment"
aSubfF_NP( 22 )  = "z - Other"

aSubfG_MU( 0  )  = BLANK
aSubfG_MU( 1  )  = "a - Optical sound track on motion picture film"
aSubfG_MU( 2  )  = "b - Magnetic sound track on motion picture film"
aSubfG_MU( 3  )  = "c - Magnetic audio tape in cartridge"
aSubfG_MU( 4  )  = "d - Sound disc"
aSubfG_MU( 5  )  = "e - Magnetic audio tape on reel"
aSubfG_MU( 6  )  = "f - Magnetic audio tape in cassette"
aSubfG_MU( 7  )  = "g - Optical and magnetic sound track on motion picture film"
aSubfG_MU( 8  )  = "h - Videotape"
aSubfG_MU( 9  )  = "i - Videodisc"
aSubfG_MU( 10 )  = "u - Unknown"
aSubfG_MU( 11 )  = "z - Other"

aSubfH_MP( 0 )   = "a - Standard 8 mm"
aSubfH_MP( 1 )   = "b - Super 8 mm/single 8 mm"
aSubfH_MP( 2 )   = "c - 9.5 mm"
aSubfH_MP( 3 )   = "d - 16 mm"
aSubfH_MP( 4 )   = "e - 28 mm"
aSubfH_MP( 5 )   = "f - 35 mm"
aSubfH_MP( 6 )   = "g - 70 mm"
aSubfH_MP( 7 )   = "u - Unknown"
aSubfH_MP( 8 )   = "z - Other"

aSubfH_PR( 0  )  = "a - Standard 8 mm film width"
aSubfH_PR( 1  )  = "b - Super 8 mm/single 8 mm film width"
aSubfH_PR( 2  )  = "c - 9.5 mm width"
aSubfH_PR( 3  )  = "d - 16 mm width"
aSubfH_PR( 4  )  = "e - 28 mm width"
aSubfH_PR( 5  )  = "f - 35 mm width"
aSubfH_PR( 6  )  = "g - 70 mm width"
aSubfH_PR( 7  )  = "j - 2 x 2 in. or 5 x 5 cm slide"
aSubfH_PR( 8  )  = "k - 2 1/4 x 2 1/4 in. or 6 x 6 cm slide"
aSubfH_PR( 9  )  = "s - 4 x 5 in. or 10 x 13 cm transparency"
aSubfH_PR( 10 )  = "t - 5 x 7 in. or 13 x 18 cm transparency"
aSubfH_PR( 11 )  = "v - 8 x 10 in. or 21 x 26 cm transparency"
aSubfH_PR( 12 )  = "w - 9 x 9 in. or 23 x 23 cm transparency"
aSubfH_PR( 13 )  = "x - 10 x 10 in. or 26 x 26 cm transparency"
aSubfH_PR( 14 )  = "y - 7 x 7 in. or 18 x 18 cm transparency"
aSubfH_PR( 15 )  = "u - Unknown"
aSubfH_PR( 16 )  = "z - Other"

aSubfH_VR( 0 )   = "a - 8 mm"
aSubfH_VR( 1 )   = "m - 1/4 in."
aSubfH_VR( 2 )   = "o - 1/2 in."
aSubfH_VR( 3 )   = "p - 1 in."
aSubfH_VR( 4 )   = "q - 2 in."
aSubfH_VR( 5 )   = "r - 3/4 in."
aSubfH_VR( 6 )   = "u - Unknown"
aSubfH_VR( 7 )   = "z - Other"

aSubfI_MU( 0 )   = BLANK
aSubfI_MU( 1 )   = "k - Mixed"
aSubfI_MU( 2 )   = "m - Monaural"
aSubfI_MU( 3 )   = "n - Not applicable"
aSubfI_MU( 4 )   = "q - Quadraphonic, multichannel, or surround"
aSubfI_MU( 5 )   = "s - Stereophonic"
aSubfI_MU( 6 )   = "u - Unknown"
aSubfI_MU( 7 )   = "z - Other"

aSubfI_PR( 0 )   = BLANK
aSubfI_PR( 1 )   = "c - Cardboard"
aSubfI_PR( 2 )   = "d - Glass"
aSubfI_PR( 3 )   = "e - Synthetic"
aSubfI_PR( 4 )   = "h - Metal"
aSubfI_PR( 5 )   = "j - Metal and glass"
aSubfI_PR( 6 )   = "k - Synthetic and glass"
aSubfI_PR( 7 )   = "m - Mixed collection"
aSubfI_PR( 8 )   = "u - Unknown"
aSubfI_PR( 9 )   = "z - Other"

aSubfJ_MP( 0 )   = BLANK
aSubfJ_MP( 1 )   = "a - Workprint"
aSubfJ_MP( 2 )   = "b - Trims"
aSubfJ_MP( 3 )   = "c - Outtakes"
aSubfJ_MP( 4 )   = "d - Rushes"
aSubfJ_MP( 5 )   = "e - Mixing tracks"
aSubfJ_MP( 6 )   = "f - Title bands/inter-title rolls"
aSubfJ_MP( 7 )   = "g - Production rolls"
aSubfJ_MP( 8 )   = "n - Not applicable"
aSubfJ_MP( 9 )   = "z - Other"

aSubfK_MP( 0 )   = BLANK
aSubfK_MP( 1 )   = "a - Positive"
aSubfK_MP( 2 )   = "b - Negative"
aSubfK_MP( 3 )   = "n - Not applicable"
aSubfK_MP( 4 )   = "u - Unknown"
aSubfK_MP( 5 )   = "z - Other"

aSubfL_MP( 0 )   = BLANK
aSubfL_MP( 1 )   = "d - Duplicate"
aSubfL_MP( 2 )   = "e - Master"
aSubfL_MP( 3 )   = "o - ff"
aSubfL_MP( 4 )   = "r - Reference print/viewing copy"
aSubfL_MP( 5 )   = "u - Unknown"
aSubfL_MP( 6 )   = "z - Other"

aSubfM_MP( 0  )  = BLANK
aSubfM_MP( 1  )  = "a - Safety base, undetermined"
aSubfM_MP( 2  )  = "c - Safety base, acetate undetermined"
aSubfM_MP( 3  )  = "d - Safety base, diacetate"
aSubfM_MP( 4  )  = "i - Nitrate base"
aSubfM_MP( 5  )  = "m - Mixed base (nitrate and safety)"
aSubfM_MP( 6  )  = "n - Not applicable"
aSubfM_MP( 7  )  = "p - Safety base, polyester"
aSubfM_MP( 8  )  = "r - Safety base, mixed"
aSubfM_MP( 9  )  = "t - Safety base, triacetate"
aSubfM_MP( 10 )  = "u - Unknown"
aSubfM_MP( 11 )  = "z - Other"

aSubfN_MP( 0  )  = BLANK
aSubfN_MP( 1  )  = "a - 3 layer color"
aSubfN_MP( 2  )  = "b - 2 color, single strip"
aSubfN_MP( 3  )  = "c - Undetermined 2 color"
aSubfN_MP( 4  )  = "d - Undetermined 3 color"
aSubfN_MP( 5  )  = "e - 3 strip color"
aSubfN_MP( 6  )  = "f - 2 strip color"
aSubfN_MP( 7  )  = "g - Red strip"
aSubfN_MP( 8  )  = "h - Blue or green strip"
aSubfN_MP( 9  )  = "i - Cyan strip"
aSubfN_MP( 10 )  = "j - Magenta strip"
aSubfN_MP( 11 )  = "k - Yellow strip"
aSubfN_MP( 12 )  = "l - S E N 2"
aSubfN_MP( 13 )  = "m - S E N 3"
aSubfN_MP( 14 )  = "n - Not applicable"
aSubfN_MP( 15 )  = "p - Sepia tone"
aSubfN_MP( 16 )  = "q - Other tone"
aSubfN_MP( 17 )  = "r - Tint"
aSubfN_MP( 18 )  = "s - Tinted and toned"
aSubfN_MP( 19 )  = "t - Stencil color"
aSubfN_MP( 20 )  = "u - Unknown"
aSubfN_MP( 21 )  = "v - Hand colored"
aSubfN_MP( 22 )  = "z - Other"

aSubfO_MP( 0 )   = BLANK
aSubfO_MP( 1 )   = "a - Imbibition dye transfer prints"
aSubfO_MP( 2 )   = "b - Three-layer stock"
aSubfO_MP( 3 )   = "c - Three layer stock, low fade"
aSubfO_MP( 4 )   = "d - Duplitized stock"
aSubfO_MP( 5 )   = "n - Not applicable"
aSubfO_MP( 6 )   = "u - Unknown"
aSubfO_MP( 7 )   = "z - Other"

aSubfP_MP( 0  )  = BLANK
aSubfP_MP( 1  )  = "a - None apparent"
aSubfP_MP( 2  )  = "b - Nitrate: suspicious odor"
aSubfP_MP( 3  )  = "c - Nitrate: pungent odor"
aSubfP_MP( 4  )  = "d - Nitrate: brownish, discoloration, fading, dusty"
aSubfP_MP( 5  )  = "e - Nitrate: sticky"
aSubfP_MP( 6  )  = "f - Nitrate: frothy, bubbles, blisters"
aSubfP_MP( 7  )  = "g - Nitrate: congealed"
aSubfP_MP( 8  )  = "h - Nitrate: powder"
aSubfP_MP( 9  )  = "k - Non-nitrate: detectable deterioration"
aSubfP_MP( 10 )  = "l - Non-nitrate: advanced deterioration"
aSubfP_MP( 11 )  = "m - Non-nitrate: disaster"

aSubfQ_MP( 0 )   = BLANK
aSubfQ_MP( 1 )   = "c - Complete"
aSubfQ_MP( 2 )   = "i - Incomplete"
aSubfQ_MP( 3 )   = "n - Not applicable"
aSubfQ_MP( 4 )   = "u - Unknown"

aTech( 0 )       = "a - Animation"
aTech( 1 )       = "c - Animation and live action"
aTech( 2 )       = "l - Live action"
aTech( 3 )       = "n - Not applicable"
aTech( 4 )       = "u - Unknown"
aTech( 5 )       = "z - Other"

aTMat_g( 0 )     = "Please select a code"
aTMat_g( 1 )     = "f - Filmstrip"
aTMat_g( 2 )     = "m - Motion picture"
aTMat_g( 3 )     = "s - Slide"
aTMat_g( 4 )     = "t - Transparency"
aTMat_g( 5 )     = "v - Videorecording"
aTMat_g( 6 )     = "z - Other"

aTMat_k( 0 )     = "Please select a code"
aTMat_k( 1 )     = "a - Art original"
aTMat_k( 2 )     = "c - Art reproduction"
aTMat_k( 3 )     = "i - Picture"
aTMat_k( 4 )     = "k - Graphic"
aTMat_k( 5 )     = "l - Technical drawing"
aTMat_k( 6 )     = "n - Chart"
aTMat_k( 7 )     = "o - Flash card"
aTMat_k( 8 )     = "z - Other"

aTMat_o( 0 )     = "Please select a code"
aTMat_o( 1 )     = "b - Kit"
aTMat_o( 2 )     = "z - Other"

aTMat_r( 0 )     = "Please select a code"
aTMat_r( 1 )     = "a - Art original"
aTMat_r( 2 )     = "c - Art reproduction"
aTMat_r( 3 )     = "d - Diorama"
aTMat_r( 4 )     = "g - Game"
aTMat_r( 5 )     = "p - Microscope slide"
aTMat_r( 6 )     = "q - Model"
aTMat_r( 7 )     = "r - Realia"
aTMat_r( 8 )     = "w - Toy"
aTMat_r( 9 )     = "z - Other"

aTMat_z( 0 )     = "Please select a code"
aTMat_z( 1 )     = "z - Other"

aType( 0 )       = "g - Projected medium"
aType( 1 )       = "k - Two-dimensional nonprojectable graphic"
aType( 2 )       = "r - Three-dimensional artifact or naturally occurring object"
aType( 3 )       = "o - Kit"

aTypeChange( 0 ) = "Select the type of visual material to change the record to:"
aTypeChange( 1 ) = "g - Projected medium"
aTypeChange( 2 ) = "k - Two-dimensional nonprojectable graphic"
aTypeChange( 3 ) = "r - Three-dimensional artifact or naturally occurring object"
aTypeChange( 4 ) = "o - Kit"

End Sub

'****************************************************************************************

Sub SetupFixedField

' This subroutine controls the visibility and content of the elements of the fixed field
' shown in the top part of the dialog box.

Const [2D_NONPROJECTABLE_GRAPHIC] As String = "k"
Const [3D_ARTIFACT_OR_OBJECT]     As String = "r"
Const CHOOSE_CODE                 As Integer = 0
Const PROJECTED_MEDIUM            As String = "g"

' The value of "Type" determines which "Type of Material" codes are available.

Select Case ffType$

  Case PROJECTED_MEDIUM

    DlgListBoxArray "DropListBox_TMat",     aTMat_g()
    If ffTMat$ = FILL_CHAR Then
        DlgValue        "DropListBox_TMat",     CHOOSE_CODE
      Else
        DlgText         "DropListBox_TMat",     ffTMat$
    End If

' If "Type of Material" indicates a motion picture or videorecording, the two elements
' "Tech" and "Time" become available for editing.

    Select Case ffTMat$

      Case MOTION_PICTURE, VIDEORECORDING

        DlgEnable       "TextBox_Time",         ENABLED
        If ffTime$ = "nnn" Or ffTime$ = "" Then
            DlgText         "TextBox_Time",         FILL_CHAR & FILL_CHAR & FILL_CHAR
          Else
            DlgText         "TextBox_Time",         ffTime$
        End If
        DlgEnable       "DropListBox_Tech",     ENABLED

      If ffTMat$ = MOTION_PICTURE Then
          DlgListBoxArray "DropListBox_SMD",      aSubfB_MP()
        Else
          DlgListBoxArray "DropListBox_SMD",      aSubfB_VR()
      End If

    End Select

  Case [2D_NONPROJECTABLE_GRAPHIC]

    DlgListBoxArray "DropListBox_TMat",     aTMat_k()
    If ffTMat$ = "" Or ffTMat$ = FILL_CHAR Then
        DlgValue        "DropListBox_TMat",     CHOOSE_CODE
      Else
        DlgText         "DropListBox_TMat",     ffTMat$
    End If
    DlgText         "DropListBox_Tech",     "n"
    DlgEnable       "DropListBox_Tech",     DISABLED
    DlgText         "TextBox_Time",         "nnn"
    DlgEnable       "TextBox_Time",         DISABLED

  Case [3D_ARTIFACT_OR_OBJECT]

    DlgListBoxArray "DropListBox_TMat",     aTMat_r()
    If ffTMat$ = FILL_CHAR Then
        DlgValue        "DropListBox_TMat",     CHOOSE_CODE
      Else
        DlgText         "DropListBox_TMat",     ffTMat$
    End If
    DlgValue        "DropListBox_Category", 2
    DlgListBoxArray "DropListBox_SMD",      aSubfB_NP()
    DlgText         "DropListBox_Tech",     "n"
    DlgEnable       "DropListBox_Tech",     DISABLED
    DlgText         "TextBox_Time",         "nnn"
    DlgEnable       "TextBox_Time",         DISABLED

  Case KIT

    DlgListBoxArray "DropListBox_TMat",     aTMat_o()
    If ffTMat$ = FILL_CHAR Then
        DlgValue        "DropListBox_TMat",     CHOOSE_CODE
      Else
        DlgText         "DropListBox_TMat",     ffTMat$
    End If
    DlgValue        "DropListBox_Category", 3
    DlgText         "DropListBox_Tech",     "n"
    DlgEnable       "DropListBox_Tech",     DISABLED
    DlgText         "TextBox_Time",         "nnn"
    DlgEnable       "TextBox_Time",         DISABLED

End Select

End Sub

'****************************************************************************************

Sub Setup007( FieldNumber% )

' This procedure sets the visibility and contents of the subfields in the displayed 007
' field.

Const CHOOSE_CODE          As Integer = 0
Const NONPROJECTED_GRAPHIC As String = "k"
Const PROJECTED_GRAPHIC    As String = "g"
Const UNKNOWN_UNSPECIFIED  As String = "u"
Const OTHER                As String = "z"

Dim ActualRowNumber%

' An 007 field targeted for deletion is not actually removed from the array, but it is
' marked as not counting, so the number of 007 fields in the record won't always match
' the number of rows in the array. The function "GetActualRow" keeps the correspondence
' straight as elements in the 007 fields are added or changed.

ActualRowNumber% = GetActualRow( FieldNumber% )

DlgVisible      "DropListBox_Category", VISIBLE
DlgVisible      "TextForBox_Category",  VISIBLE
DlgText         "DropListBox_Category", Category$
aFields( SUBF_A, FieldsRowCount% ) = Left$( DlgText( "DropListBox_Category" ), 1 )

' The "Category of Material" (subfield $a of the 007 field) determines which array to use
' for the displayed field. It mostly corresponds with "Type". For a new 007 field, set
' default values (mostly "unknown") for the mandatory subfields, and leave the other
' subfields blank.

Select Case Category$

  Case FILL_CHAR

    DlgValue        "DropListBox_Category", CHOOSE_CODE

  Case KIT

    DlgText         "DropListBox_SMD",      BLANK
    DlgText         "DropListBox_Color",    BLANK
    DlgText         "DropListBox7",         BLANK
    DlgText         "DropListBox8",         BLANK
    DlgText         "DropListBox9",         BLANK
    DlgText         "DropListBox10",        BLANK
    DlgText         "DropListBox11",        BLANK
    DlgText         "DropListBox12",        BLANK
    DlgText         "DropListBox13",        BLANK
    DlgText         "DropListBox14",        BLANK
    DlgText         "DropListBox15",        BLANK
    DlgText         "DropListBox16",        BLANK
    DlgText         "DropListBox17",        BLANK
    DlgText         "DropListBox18",        BLANK
    DlgText         "DropListBox19",        BLANK
    DlgVisible      "DropListBox_SMD",      INVISIBLE
    DlgVisible      "TextForBox_SMD",       INVISIBLE
    DlgVisible      "DropListBox_Color",    INVISIBLE
    DlgVisible      "TextForBox_Color",     INVISIBLE
    DlgVisible      "DropListBox7",         INVISIBLE
    DlgVisible      "TextForBox7",          INVISIBLE
    DlgVisible      "DropListBox8",         INVISIBLE
    DlgVisible      "TextForBox8",          INVISIBLE
    DlgVisible      "DropListBox9",         INVISIBLE
    DlgVisible      "TextForBox9",          INVISIBLE
    DlgVisible      "DropListBox10",        INVISIBLE
    DlgVisible      "TextForBox10",         INVISIBLE
    DlgVisible      "DropListBox11",        INVISIBLE
    DlgVisible      "TextForBox11",         INVISIBLE
    DlgVisible      "DropListBox12",        INVISIBLE
    DlgVisible      "TextForBox12",         INVISIBLE
    DlgVisible      "DropListBox13",        INVISIBLE
    DlgVisible      "TextForBox13",         INVISIBLE
    DlgVisible      "DropListBox14",        INVISIBLE
    DlgVisible      "TextForBox14",         INVISIBLE
    DlgVisible      "DropListBox15",        INVISIBLE
    DlgVisible      "TextForBox15",         INVISIBLE
    DlgVisible      "DropListBox16",        INVISIBLE
    DlgVisible      "TextForBox16",         INVISIBLE
    DlgVisible      "DropListBox17",        INVISIBLE
    DlgVisible      "TextForBox17",         INVISIBLE
    DlgVisible      "DropListBox18",        INVISIBLE
    DlgVisible      "TextForBox18",         INVISIBLE
    DlgVisible      "DropListBox19",        INVISIBLE
    DlgVisible      "TextForBox19",         INVISIBLE
    DlgVisible      "TextBox_FilmInspec",   INVISIBLE
    DlgVisible      "TextForBox2",          INVISIBLE

  Case MOTION_PICTURE

    DlgListBoxArray "DropListBox_SMD",      aSubfB_MP()
    If New007 Then
        DlgText         "DropListBox_SMD",      UNKNOWN_UNSPECIFIED
        aFields( SUBF_B, ActualRowNumber% ) = Left$( DlgText( "DropListBox_SMD" ), 1 )
      Else
        DlgText         "DropListBox_SMD",      aFields( SUBF_B, ActualRowNumber% )
    End If

    DlgListBoxArray "DropListBox_Color",    aSubfD_MP()
    If New007 Then
        DlgText         "DropListBox_Color",    UNKNOWN_UNSPECIFIED
        aFields( SUBF_D, ActualRowNumber% ) = Left$( DlgText( "DropListBox_Color" ), 1 )
      Else
        DlgText         "DropListBox_Color",    aFields( SUBF_D, ActualRowNumber% )
    End If

    DlgListBoxArray "DropListBox7",         aSubfE_MP()
    If New007 Then
        DlgText         "DropListBox7",         BLANK
        aFields( SUBF_E, ActualRowNumber% ) = Left$( DlgText( "DropListBox7" ), 1 )
      Else
        DlgText         "DropListBox7",         aFields( SUBF_E, ActualRowNumber% )
    End If
    DlgText         "TextForBox7",          "e / Motion picture presentation format"

    DlgListBoxArray "DropListBox8",         aSubfF_MU()
    If New007 Then
        DlgText         "DropListBox8",         BLANK
        aFields( SUBF_F, ActualRowNumber% ) = Left$( DlgText( "DropListBox8" ), 1 )
      Else
        DlgText         "DropListBox8",         aFields( SUBF_F, ActualRowNumber% )
    End If
    DlgText         "TextForBox8",          "f / Sound on medium or separate"

    DlgListBoxArray "DropListBox9",         aSubfG_MU()
    If New007 Then
        DlgText         "DropListBox9",         BLANK
        aFields( SUBF_G, ActualRowNumber% ) = Left$( DlgText( "DropListBox9" ), 1 )
      Else
        DlgText         "DropListBox9",         aFields( SUBF_G, ActualRowNumber% )
    End If
    DlgText         "TextForBox9",          "g / Medium for sound"

    DlgListBoxArray "DropListBox10",        aSubfH_MP()
    If New007 Then
        DlgText         "DropListBox10",        UNKNOWN_UNSPECIFIED
        If Category$ Like "[gmv]" Then
            aFields( SUBF_H, ActualRowNumber% ) = Left$( DlgText( "DropListBox10" ), 1 )
          Else
            aFields( SUBF_H, ActualRowNumber% ) = BLANK
        End If
      Else
        DlgText         "DropListBox10",        aFields( SUBF_H, ActualRowNumber% )
    End If
    DlgText         "TextForBox10",         "h / Dimensions"

    DlgListBoxArray "DropListBox11",        aSubfI_MU()
    If New007 Then
        DlgText         "DropListBox11",        BLANK
        aFields( SUBF_I, ActualRowNumber% ) = Left$( DlgText( "DropListBox11" ), 1 )
      Else
        DlgText         "DropListBox11",        aFields( SUBF_I, ActualRowNumber% )
    End If
    DlgText         "TextForBox11",         "i / Configuration of playback channels"

    If New007 Then
        DlgText         "DropListBox12",        BLANK
        aFields( SUBF_J, ActualRowNumber% ) = Left$( DlgText( "DropListBox12" ), 1 )
      Else
        DlgText         "DropListBox12",        aFields( SUBF_J, ActualRowNumber% )
    End If

    If New007 Then
        DlgText         "DropListBox13",        BLANK
        aFields( SUBF_K, ActualRowNumber% ) = Left$( DlgText( "DropListBox13" ), 1 )
      Else
        DlgText         "DropListBox13",        aFields( SUBF_K, ActualRowNumber% )
    End If

    If New007 Then
        DlgText         "DropListBox14",        BLANK
        aFields( SUBF_L, ActualRowNumber% ) = Left$( DlgText( "DropListBox14" ), 1 )
      Else
        DlgText         "DropListBox14",        aFields( SUBF_L, ActualRowNumber% )
    End If

    If New007 Then
        DlgText         "DropListBox15",        BLANK
        aFields( SUBF_M, ActualRowNumber% ) = Left$( DlgText( "DropListBox15" ), 1 )
      Else
        DlgText         "DropListBox15",        aFields( SUBF_M, ActualRowNumber% )
    End If

    If New007 Then
        DlgText         "DropListBox16",        BLANK
        aFields( SUBF_N, ActualRowNumber% ) = Left$( DlgText( "DropListBox16" ), 1 )
      Else
        DlgText         "DropListBox16",        aFields( SUBF_N, ActualRowNumber% )
    End If

    If New007 Then
        DlgText         "DropListBox17",        BLANK
        aFields( SUBF_O, ActualRowNumber% ) = Left$( DlgText( "DropListBox17" ), 1 )
      Else
        DlgText         "DropListBox17",        aFields( SUBF_O, ActualRowNumber% )
    End If

    If New007 Then
        DlgText         "DropListBox18",        BLANK
        aFields( SUBF_P, ActualRowNumber% ) = Left$( DlgText( "DropListBox18" ), 1 )
      Else
        DlgText         "DropListBox18",        aFields( SUBF_P, ActualRowNumber% )
    End If

    If New007 Then
        DlgText         "DropListBox19",        BLANK
        aFields( SUBF_Q, ActualRowNumber% ) = Left$( DlgText( "DropListBox19" ), 1 )
      Else
        DlgText         "DropListBox19",        aFields( SUBF_Q, ActualRowNumber% )
    End If

    If New007 Then
        DlgText         "TextBox_FilmInspec",   BLANK
        aFields( SUBF_R, ActualRowNumber% ) = DlgText( "TextBox_FilmInspec" )
      Else
        DlgText         "TextBox_FilmInspec",   aFields( SUBF_R, ActualRowNumber% )
    End If

    DlgVisible      "DropListBox_SMD",      VISIBLE
    DlgVisible      "TextForBox_SMD",       VISIBLE
    DlgVisible      "DropListBox_Color",    VISIBLE
    DlgVisible      "TextForBox_Color",     VISIBLE
    DlgVisible      "DropListBox7",         VISIBLE
    DlgVisible      "TextForBox7",          VISIBLE
    DlgVisible      "DropListBox8",         VISIBLE
    DlgVisible      "TextForBox8",          VISIBLE
    DlgVisible      "DropListBox9",         VISIBLE
    DlgVisible      "TextForBox9",          VISIBLE
    DlgVisible      "DropListBox10",        VISIBLE
    DlgVisible      "TextForBox10",         VISIBLE
    DlgVisible      "DropListBox11",        VISIBLE
    DlgVisible      "TextForBox11",         VISIBLE
    DlgVisible      "DropListBox12",        VISIBLE
    DlgVisible      "TextForBox12",         VISIBLE
    DlgVisible      "DropListBox13",        VISIBLE
    DlgVisible      "TextForBox13",         VISIBLE
    DlgVisible      "DropListBox14",        VISIBLE
    DlgVisible      "TextForBox14",         VISIBLE
    DlgVisible      "DropListBox15",        VISIBLE
    DlgVisible      "TextForBox15",         VISIBLE
    DlgVisible      "DropListBox16",        VISIBLE
    DlgVisible      "TextForBox16",         VISIBLE
    DlgVisible      "DropListBox17",        VISIBLE
    DlgVisible      "TextForBox17",         VISIBLE
    DlgVisible      "DropListBox18",        VISIBLE
    DlgVisible      "TextForBox18",         VISIBLE
    DlgVisible      "DropListBox19",        VISIBLE
    DlgVisible      "TextForBox19",         VISIBLE
    DlgVisible      "TextBox_FilmInspec",   VISIBLE
    DlgVisible      "TextForBox2",          VISIBLE

  Case NONPROJECTED_GRAPHIC

    DlgListBoxArray "DropListBox_SMD",      aSubfB_NP()
    If New007 Then
        If ffTMat$ Like "[ilo]" Then
            DlgText         "DropListBox_SMD",      ffTMat$
          Else
            DlgText         "DropListBox_SMD",      UNKNOWN_UNSPECIFIED
        End If
        aFields( SUBF_B, ActualRowNumber% ) = Left$( DlgText( "DropListBox_SMD" ), 1 )
      Else
        DlgText         "DropListBox_SMD",      aFields( SUBF_B, ActualRowNumber% )
    End If

    DlgListBoxArray "DropListBox_Color",    aSubfD_NP()
    If New007 Then
        DlgText         "DropListBox_Color",    UNKNOWN_UNSPECIFIED
        aFields( SUBF_D, ActualRowNumber% ) = Left$( DlgText( "DropListBox_Color" ), 1 )
      Else
        DlgText         "DropListBox_Color",    aFields( SUBF_D, ActualRowNumber% )
    End If

    DlgListBoxArray "DropListBox7",         aSubfE_NP()
    If New007 Then
        DlgText         "DropListBox7",         BLANK
        aFields( SUBF_E, ActualRowNumber% ) = Left$( DlgText( "DropListBox7" ), 1 )
      Else
        DlgText         "DropListBox7",         aFields( SUBF_E, ActualRowNumber% )
    End If
    DlgText         "TextForBox7",          "e / Primary support material"

    DlgListBoxArray "DropListBox8",         aSubfF_NP()
    If New007 Then
        DlgText         "DropListBox8",         BLANK
        aFields( SUBF_F, ActualRowNumber% ) = Left$( DlgText( "DropListBox8" ), 1 )
      Else
        DlgText         "DropListBox8",         aFields( SUBF_F, ActualRowNumber% )
    End If
    DlgText         "TextForBox8",          "f / Secondary support material"

    DlgVisible      "DropListBox_SMD",      VISIBLE
    DlgVisible      "TextForBox_SMD",       VISIBLE
    DlgVisible      "DropListBox_Color",    VISIBLE
    DlgVisible      "TextForBox_Color",     VISIBLE
    DlgVisible      "DropListBox7",         VISIBLE
    DlgVisible      "TextForBox7",          VISIBLE
    DlgVisible      "DropListBox8",         VISIBLE
    DlgVisible      "TextForBox8",          VISIBLE
    DlgVisible      "DropListBox9",         INVISIBLE
    DlgVisible      "TextForBox9",          INVISIBLE
    DlgVisible      "DropListBox10",        INVISIBLE
    DlgVisible      "TextForBox10",         INVISIBLE
    DlgVisible      "DropListBox11",        INVISIBLE
    DlgVisible      "TextForBox11",         INVISIBLE
    DlgVisible      "DropListBox12",        INVISIBLE
    DlgVisible      "TextForBox12",         INVISIBLE
    DlgVisible      "DropListBox13",        INVISIBLE
    DlgVisible      "TextForBox13",         INVISIBLE
    DlgVisible      "DropListBox14",        INVISIBLE
    DlgVisible      "TextForBox14",         INVISIBLE
    DlgVisible      "DropListBox15",        INVISIBLE
    DlgVisible      "TextForBox15",         INVISIBLE
    DlgVisible      "DropListBox16",        INVISIBLE
    DlgVisible      "TextForBox16",         INVISIBLE
    DlgVisible      "DropListBox17",        INVISIBLE
    DlgVisible      "TextForBox17",         INVISIBLE
    DlgVisible      "DropListBox18",        INVISIBLE
    DlgVisible      "TextForBox18",         INVISIBLE
    DlgVisible      "DropListBox19",        INVISIBLE
    DlgVisible      "TextForBox19",         INVISIBLE
    DlgVisible      "TextBox_FilmInspec",   INVISIBLE
    DlgVisible      "TextForBox2",          INVISIBLE

  Case OTHER

    DlgText         "DropListBox_SMD",      BLANK
    DlgText         "DropListBox_Color",    BLANK
    DlgText         "DropListBox7",         BLANK
    DlgText         "DropListBox8",         BLANK
    DlgText         "DropListBox9",         BLANK
    DlgText         "DropListBox10",        BLANK
    DlgText         "DropListBox11",        BLANK
    DlgText         "DropListBox12",        BLANK
    DlgText         "DropListBox13",        BLANK
    DlgText         "DropListBox14",        BLANK
    DlgText         "DropListBox15",        BLANK
    DlgText         "DropListBox16",        BLANK
    DlgText         "DropListBox17",        BLANK
    DlgText         "DropListBox18",        BLANK
    DlgText         "DropListBox19",        BLANK
    DlgVisible      "DropListBox_SMD",      VISIBLE
    DlgVisible      "TextForBox_SMD",       VISIBLE
    DlgVisible      "DropListBox_Color",    INVISIBLE
    DlgVisible      "TextForBox_Color",     INVISIBLE
    DlgVisible      "DropListBox7",         INVISIBLE
    DlgVisible      "TextForBox7",          INVISIBLE
    DlgVisible      "DropListBox8",         INVISIBLE
    DlgVisible      "TextForBox8",          INVISIBLE
    DlgVisible      "DropListBox9",         INVISIBLE
    DlgVisible      "TextForBox9",          INVISIBLE
    DlgVisible      "DropListBox10",        INVISIBLE
    DlgVisible      "TextForBox10",         INVISIBLE
    DlgVisible      "DropListBox11",        INVISIBLE
    DlgVisible      "TextForBox11",         INVISIBLE
    DlgVisible      "DropListBox12",        INVISIBLE
    DlgVisible      "TextForBox12",         INVISIBLE
    DlgVisible      "DropListBox13",        INVISIBLE
    DlgVisible      "TextForBox13",         INVISIBLE
    DlgVisible      "DropListBox14",        INVISIBLE
    DlgVisible      "TextForBox14",         INVISIBLE
    DlgVisible      "DropListBox15",        INVISIBLE
    DlgVisible      "TextForBox15",         INVISIBLE
    DlgVisible      "DropListBox16",        INVISIBLE
    DlgVisible      "TextForBox16",         INVISIBLE
    DlgVisible      "DropListBox17",        INVISIBLE
    DlgVisible      "TextForBox17",         INVISIBLE
    DlgVisible      "DropListBox18",        INVISIBLE
    DlgVisible      "TextForBox18",         INVISIBLE
    DlgVisible      "DropListBox19",        INVISIBLE
    DlgVisible      "TextForBox19",         INVISIBLE
    DlgVisible      "TextBox_FilmInspec",   INVISIBLE
    DlgVisible      "TextForBox2",          INVISIBLE

  Case PROJECTED_GRAPHIC

    DlgListBoxArray "DropListBox_SMD",      aSubfB_PR()
    If New007 Then
        If ffTMat$ Like "[st]" Then
            DlgText         "DropListBox_SMD",      ffTMat$
          Else
            DlgText         "DropListBox_SMD",      UNKNOWN_UNSPECIFIED
        End If
        aFields( SUBF_B, ActualRowNumber% ) = Left$( DlgText( "DropListBox_SMD" ), 1 )
      Else
        DlgText         "DropListBox_SMD",      aFields( SUBF_B, ActualRowNumber% )
    End If

    DlgListBoxArray "DropListBox_Color",    aSubfD_PR()
    If New007 Then
        DlgText         "DropListBox_Color",    UNKNOWN_UNSPECIFIED
        aFields( SUBF_D, ActualRowNumber% ) = Left$( DlgText( "DropListBox_Color" ), 1 )
      Else
        DlgText         "DropListBox_Color",    aFields( SUBF_D, ActualRowNumber% )
    End If

    DlgListBoxArray "DropListBox7",         aSubfE_PR()
    If New007 Then
        DlgText         "DropListBox7",         BLANK
        aFields( SUBF_E, ActualRowNumber% ) = Left$( DlgText( "DropListBox7" ), 1 )
      Else
        DlgText         "DropListBox7",         aFields( SUBF_E, ActualRowNumber% )
    End If
    DlgText         "TextForBox7",          "e / Base of emulsion"

    DlgListBoxArray "DropListBox8",         aSubfF_MU()
    If New007 Then
        DlgText         "DropListBox8",         BLANK
        aFields( SUBF_F, ActualRowNumber% ) = Left$( DlgText( "DropListBox8" ), 1 )
      Else
        DlgText         "DropListBox8",         aFields( SUBF_F, ActualRowNumber% )
    End If
    DlgText         "TextForBox8",          "f / Sound on medium or separate"

    DlgListBoxArray "DropListBox9",         aSubfG_MU()
    If New007 Then
        DlgText         "DropListBox9",         BLANK
        aFields( SUBF_G, ActualRowNumber% ) = Left$( DlgText( "DropListBox9" ), 1 )
      Else
        DlgText         "DropListBox9",         aFields( SUBF_G, ActualRowNumber% )
    End If
    DlgText         "TextForBox9",          "g / Medium for sound"

    DlgListBoxArray "DropListBox10",        aSubfH_PR()
    If New007 Then
        DlgText         "DropListBox10",        UNKNOWN_UNSPECIFIED
        If Category$ Like "[gmv]" Then
            aFields( SUBF_H, ActualRowNumber% ) = Left$( DlgText( "DropListBox10" ), 1 )
          Else
            aFields( SUBF_H, ActualRowNumber% ) = BLANK
        End If
      Else
        DlgText         "DropListBox10",        aFields( SUBF_H, ActualRowNumber% )
    End If
    DlgText         "TextForBox10",         "h / Dimensions"

    DlgListBoxArray "DropListBox11",        aSubfI_PR()
    If New007 Then
        DlgText         "DropListBox11",        BLANK
        aFields( SUBF_I, ActualRowNumber% ) = Left$( DlgText( "DropListBox11" ), 1 )
      Else
        DlgText         "DropListBox11",        aFields( SUBF_I, ActualRowNumber% )
    End If
    DlgText         "TextForBox11",         "i / Secondary support material"

    DlgVisible      "DropListBox_SMD",      VISIBLE
    DlgVisible      "TextForBox_SMD",       VISIBLE
    DlgVisible      "DropListBox_Color",    VISIBLE
    DlgVisible      "TextForBox_Color",     VISIBLE
    DlgVisible      "DropListBox7",         VISIBLE
    DlgVisible      "TextForBox7",          VISIBLE
    DlgVisible      "DropListBox8",         VISIBLE
    DlgVisible      "TextForBox8",          VISIBLE
    DlgVisible      "DropListBox9",         VISIBLE
    DlgVisible      "TextForBox9",          VISIBLE
    DlgVisible      "DropListBox10",        VISIBLE
    DlgVisible      "TextForBox10",         VISIBLE
    DlgVisible      "DropListBox11",        VISIBLE
    DlgVisible      "TextForBox11",         VISIBLE
    DlgVisible      "DropListBox12",        INVISIBLE
    DlgVisible      "TextForBox12",         INVISIBLE
    DlgVisible      "DropListBox13",        INVISIBLE
    DlgVisible      "TextForBox13",         INVISIBLE
    DlgVisible      "DropListBox14",        INVISIBLE
    DlgVisible      "TextForBox14",         INVISIBLE
    DlgVisible      "DropListBox15",        INVISIBLE
    DlgVisible      "TextForBox15",         INVISIBLE
    DlgVisible      "DropListBox16",        INVISIBLE
    DlgVisible      "TextForBox16",         INVISIBLE
    DlgVisible      "DropListBox17",        INVISIBLE
    DlgVisible      "TextForBox17",         INVISIBLE
    DlgVisible      "DropListBox18",        INVISIBLE
    DlgVisible      "TextForBox18",         INVISIBLE
    DlgVisible      "DropListBox19",        INVISIBLE
    DlgVisible      "TextForBox19",         INVISIBLE
    DlgVisible      "TextBox_FilmInspec",   INVISIBLE
    DlgVisible      "TextForBox2",          INVISIBLE

  Case VIDEORECORDING

    DlgListBoxArray "DropListBox_SMD",      aSubfB_VR()
    If New007 Then
        DlgText         "DropListBox_SMD",      UNKNOWN_UNSPECIFIED
        aFields( SUBF_B, ActualRowNumber% ) = Left$( DlgText( "DropListBox_SMD" ), 1 )
      Else
        DlgText         "DropListBox_SMD",      aFields( SUBF_B, ActualRowNumber% )
    End If

    DlgListBoxArray "DropListBox_Color",    aSubfD_VR()
    If New007 Then
        DlgText         "DropListBox_Color",    UNKNOWN_UNSPECIFIED
        aFields( SUBF_D, ActualRowNumber% ) = Left$( DlgText( "DropListBox_Color" ), 1 )
      Else
        DlgText         "DropListBox_Color",    aFields( SUBF_D, ActualRowNumber% )
    End If

    DlgListBoxArray "DropListBox7",         aSubfE_VR()
    If New007 Then
        DlgText         "DropListBox7",         BLANK
        aFields( SUBF_E, ActualRowNumber% ) = Left$( DlgText( "DropListBox7" ), 1 )
      Else
        DlgText         "DropListBox7",         aFields( SUBF_E, ActualRowNumber% )
    End If
    DlgText         "TextForBox7",          "e / Videorecording format"

    DlgListBoxArray "DropListBox8",         aSubfF_MU()
    If New007 Then
        DlgText         "DropListBox8",         BLANK
        aFields( SUBF_F, ActualRowNumber% ) = Left$( DlgText( "DropListBox8" ), 1 )
      Else
        DlgText         "DropListBox8",         aFields( SUBF_F, ActualRowNumber% )
    End If
    DlgText         "TextForBox8",          "f / Sound on medium or separate"

    DlgListBoxArray "DropListBox9",         aSubfG_MU()
    If New007 Then
        DlgText         "DropListBox9",         BLANK
        aFields( SUBF_G, ActualRowNumber% ) = Left$( DlgText( "DropListBox9" ), 1 )
      Else
        DlgText         "DropListBox9",         aFields( SUBF_G, ActualRowNumber% )
    End If
    DlgText         "TextForBox9",          "g / Medium for sound"

    DlgListBoxArray "DropListBox10",        aSubfH_VR()
    If New007 Then
        DlgText         "DropListBox10",        UNKNOWN_UNSPECIFIED
        If Category$ Like "[gmv]" Then
            aFields( SUBF_H, ActualRowNumber% ) = Left$( DlgText( "DropListBox10" ), 1 )
          Else
            aFields( SUBF_H, ActualRowNumber% ) = BLANK
        End If
      Else
        DlgText         "DropListBox10",        aFields( SUBF_H, ActualRowNumber% )
    End If
    DlgText         "TextForBox10",         "h / Dimensions"

    DlgListBoxArray "DropListBox11",        aSubfI_MU()
    If New007 Then
        DlgText         "DropListBox11",        BLANK
        aFields( SUBF_I, ActualRowNumber% ) = Left$( DlgText( "DropListBox11" ), 1 )
      Else
        DlgText         "DropListBox11",        aFields( SUBF_I, ActualRowNumber% )
    End If
    DlgText         "TextForBox11",         "i / Configuration of playback channels"

    DlgVisible      "DropListBox_SMD",      VISIBLE
    DlgVisible      "TextForBox_SMD",       VISIBLE
    DlgVisible      "DropListBox_Color",    VISIBLE
    DlgVisible      "TextForBox_Color",     VISIBLE
    DlgVisible      "DropListBox7",         VISIBLE
    DlgVisible      "TextForBox7",          VISIBLE
    DlgVisible      "DropListBox8",         VISIBLE
    DlgVisible      "TextForBox8",          VISIBLE
    DlgVisible      "DropListBox9",         VISIBLE
    DlgVisible      "TextForBox9",          VISIBLE
    DlgVisible      "DropListBox10",        VISIBLE
    DlgVisible      "TextForBox10",         VISIBLE
    DlgVisible      "DropListBox11",        VISIBLE
    DlgVisible      "TextForBox11",         VISIBLE
    DlgVisible      "DropListBox12",        INVISIBLE
    DlgVisible      "TextForBox12",         INVISIBLE
    DlgVisible      "DropListBox13",        INVISIBLE
    DlgVisible      "TextForBox13",         INVISIBLE
    DlgVisible      "DropListBox14",        INVISIBLE
    DlgVisible      "TextForBox14",         INVISIBLE
    DlgVisible      "DropListBox15",        INVISIBLE
    DlgVisible      "TextForBox15",         INVISIBLE
    DlgVisible      "DropListBox16",        INVISIBLE
    DlgVisible      "TextForBox16",         INVISIBLE
    DlgVisible      "DropListBox17",        INVISIBLE
    DlgVisible      "TextForBox17",         INVISIBLE
    DlgVisible      "DropListBox18",        INVISIBLE
    DlgVisible      "TextForBox18",         INVISIBLE
    DlgVisible      "DropListBox19",        INVISIBLE
    DlgVisible      "TextForBox19",         INVISIBLE
    DlgVisible      "TextBox_FilmInspec",   INVISIBLE
    DlgVisible      "TextForBox2",          INVISIBLE

End Select

End Sub

'****************************************************************************************

Function DigitsToWords( CountOfFields%, PositionOfString% ) As String

Const INITIAL As Integer = 0  'The value to capitalize the "O" in "One".

' This function adjusts the verb number, and turns the digit "1" to "one", for nice
' reading. The parameter "x" is the number of fields, "y" is whether the word "one"
' begins a sentence (and thus gets capitalized) or not.

If FieldCount% = 1 then
    If PositionOfString% = INITIAL Then
        DigitsToWords = "One 007 field was"
      Else
        DigitsToWords = "one 007 field was"
    End If
  Else
    DigitsToWords = Trim$( Str$( FieldCount% ) ) & " 007 fields were"
End If

End Function

'****************************************************************************************

Function GetActualRow( FieldNumber% )

' If an 007 field is to be deleted, the first element of its row in the array is marked
' with an "X" for deletion when the macro concludes. Because the field number refers to
' current 007 fields (that is, fields NOT to be deleted), it will not be synchronized in
' any way with the actual rows if the array. This function takes the field number as a
' parameter and calculates which row in the array the number is actually referring to.

Dim RowNumber%
Dim ValidFieldCount%

Dim i As Integer

If DeletedFieldCount% = 0 Then
    RowNumber% = FieldNumber% - 1
  Else
    For i = 0 To UBound( aFields, 2 )
      If aFields( WHOLE_FIELD, i ) <> DELETED_FIELD Then
          ValidFieldCount% = ValidFieldCount% + 1
          If ValidFieldCount% = FieldNumber% Then
              RowNumber% = i
              Exit For
          End If
      End If
    Next i
End If

GetActualRow = RowNumber%

End Function

'****************************************************************************************

Function TransferredFieldsOptions As String

' This function finds the "Options.xml" file which contains the settings for which fields
' to transfer when deriving a new record. The default setting is to transfer no fields
' below 100, which may cause the omission of useful information, such as geographic
' coverage or language. If the record to be derived from contains fields which won't
' transfer, alert the user to that fact, without being precise about the fields or
' actually copying them anyway.

Const MAX_ATTEMPTS_ENVIRON As Integer = 128  'The maximum number of reads of environment strings to try to get the user profile path.
Const NORMAL_FILE          As Integer = 0    'Attribute of a normal file.
Const NORMAL_FILE_ARCHIVE  As Integer = 32   'Attribute of a normal file with archive bit set?

Dim AppData$
Dim Attributes%
Dim DeriveField$
Dim EnvironmentString$
Dim FileNum%
Dim ItemKey$                 : ItemKey$ = "DeriveRecordFields"
Dim OptionsXmlPath$
Dim QUOTE As String*1        : QUOTE    = Chr$( 034 )

Dim i As Integer, p As Integer

i = 1
Do
  EnvironmentString$ = Environ( i )
  If Left$( EnvironmentString$, 8 ) = "APPDATA=" Then
      AppData$ = Mid$( EnvironmentString$, 9 )
      Exit Do
  End If
  i = i + 1
Loop Until EnvironmentString$ = "" Or i > MAX_ATTEMPTS_ENVIRON
If i = 1 Or i > MAX_ATTEMPTS_ENVIRON Then GoTo NoPath:

' The complete path to the file is built by adding the information specified in the
' Connexion client documentation to the path to the user profile, obtained above.

OptionsXmlPath$ = AppData$ & "\OCLC\Connex\Profiles\MyProfile\Options.xml"

On Error GoTo NoPath:
Attributes% = GetAttr( OptionsXmlPath$ )

' In "Options.xml", get the string that tells the Client what fields to copy when
' deriving a new record. Read the file, a line at a time, by calling "Line Input"
' repeatedly. The line containing the term "DeriveRecordFields" holds this string, in
' which fields to copy are labeled "1" and fields to ignore are "0."

If Attributes% = NORMAL_FILE Or Attributes% = NORMAL_FILE_ARCHIVE Then
    FileNum% = FreeFile
    On Error GoTo OtherFileProblem:
    Open OptionsXmlPath$ For Input As #FileNum%
    i = 1
    Do Until Eof( FileNum% )
      Line Input #FileNum%, ItemKey$
      p = InStr( ItemKey$, QUOTE & "DeriveRecordFields" & QUOTE )
      If p <> 0 Then
          p = InStr( ItemKey$, "value=" )
          If p <> 0 Then
              DeriveField$ = Mid$( ItemKey$, p + 7 )
              p = InStr( DeriveField$, QUOTE )
              If p <> 0 Then
                  DeriveField$ = Left$( DeriveField$, p - 1 )
              End If
              Exit Do
            Else
              GoTo NoPath:
          End If
      End If
      i = i + 1
    Loop
    Close
    Reset
    If p = 0 Then GoTo NoPath:
End If

TransferredFieldsOptions = DeriveField$

NoPath:
OtherFileProblem:

End Function

'****************************************************************************************

Function Dialog1ControlFunction( Id$, Action%, SVal& )

Const CONTROL_CHANGE                  As Integer = 2
Const INITIALIZE                      As Integer = 1
Const KEEP_DLG_OPEN                   As Integer = -1
Const MSGBOX_RETURN_CANCEL            As Integer = 2
Const MSGBOX_RETURN_YES               As Integer = 6
Const MSGBOX_SETBUTTONS_YES_NO_CANCEL As Integer = 3
Const TEXTBOX_CHANGE                  As Integer = 3
Const WARNING_QUERY                   As Integer = 32

Dim Answer%
Dim CharT$
Dim NewCategory$
Dim NewInspec$
Dim NewTech$
Dim NewTime$
Dim NewTMat$
Dim NewType$

Dim BadInput                 : BadInput = FALSE

Dim i As Integer, j As Integer

Select Case Action%

  Case INITIALIZE

ReInitialize:

' A record of format other than Visual Materials allows only one action: Using the drop-
' down box to change the record's Type. A checkbox offers the option of creating a new
' record at the same time, its default state being checked. Otherwise, the fixed field
' reflects the values already in the record.

    If ffType$ Like "[gkor]" Then
        DlgListBoxArray "DropListBox_Type",     aType()
        DlgText         "DropListBox_Type",     ffType$

        Select Case ffTMat$

          Case "a", "c", "i", "k", "l", "n", "o"
            DlgListBoxArray "DropListBox_TMat",     aTMat_k()
            DlgEnable       "DropListBox_Tech",     DISABLED
            DlgEnable       "TextBox_Time",         DISABLED

          Case "b"
            DlgListBoxArray "DropListBox_TMat",     aTMat_o()
            DlgEnable       "DropListBox_Tech",     DISABLED
            DlgEnable       "TextBox_Time",         DISABLED

          Case "f", "s"
            DlgListBoxArray "DropListBox_TMat",     aTMat_g()
            DlgEnable       "DropListBox_Tech",     DISABLED
            DlgEnable       "TextBox_Time",         DISABLED

          Case "m", "v"
            DlgListBoxArray "DropListBox_TMat",     aTMat_g()
            DlgEnable       "DropListBox_Tech",     ENABLED
            DlgEnable       "TextBox_Time",         ENABLED

          Case "d", "g", "p", "q", "r", "w"
            DlgListBoxArray "DropListBox_TMat",     aTMat_r()
            DlgEnable       "DropListBox_Tech",     DISABLED
            DlgEnable       "TextBox_Time",         DISABLED

          Case "z"
            DlgListBoxArray "DropListBox_TMat",     aTMat_z()
            DlgEnable       "DropListBox_Tech",     DISABLED
            DlgEnable       "TextBox_Time",         DISABLED

          Case Chr$( 252 )

            Select Case ffType$
              Case "g"
                DlgListBoxArray "DropListBox_TMat",     aTMat_g()
                DlgEnable       "DropListBox_Tech",     DISABLED
                DlgEnable       "TextBox_Time",         DISABLED
              Case "k"
                DlgListBoxArray "DropListBox_TMat",     aTMat_k()
                DlgEnable       "DropListBox_Tech",     DISABLED
                DlgEnable       "TextBox_Time",         DISABLED
              Case "o"
                DlgListBoxArray "DropListBox_TMat",     aTMat_o()
                DlgEnable       "DropListBox_Tech",     DISABLED
                DlgEnable       "TextBox_Time",         DISABLED
              Case "r"
                DlgListBoxArray "DropListBox_TMat",     aTMat_r()
                DlgEnable       "DropListBox_Tech",     DISABLED
                DlgEnable       "TextBox_Time",         DISABLED
            End Select

        End Select

        DlgText         "DropListBox_TMat",     ffTMat$
        DlgText         "DropListBox_Tech",     ffTech$
        DlgText         "TextBox_Time",         ffTime$
        DlgVisible      "Add007Button",         VISIBLE
      Else
        DlgListBoxArray "DropListBox_Type",     aTypeChange()
        DlgValue        "DropListBox_Type",     0
        DlgEnable       "DropListBox_TMat",     DISABLED
        DlgEnable       "DropListBox_Tech",     DISABLED
        DlgText         "DropListBox_Tech",     "n"
        DlgText         "TextBox_Time",         "nnn"
        DlgEnable       "TextBox_Time",         DISABLED
        DlgVisible      "Add007Button",         INVISIBLE
        DlgValue        "CheckBox_NewRec",      CHECKED
    End If
    If OriginalMaterial$ = "Books" Or OriginalMaterial$ = "Computer files" Or OriginalMaterial$ = "Mixed materials" Then
        DlgVisible      "CheckBox_Add006",      VISIBLE
        DlgVisible      "TextFor_Add006",       VISIBLE
        DlgText         "TextFor_Add006",       OriginalMaterial$
      Else
        DlgVisible      "CheckBox_Add006",      INVISIBLE
        DlgVisible      "TextFor_Add006",       INVISIBLE
    End If

' If the record contains no 007 field, the bottom part of the dialog box shows only the
' button to add an 007 field.

    If FieldCount% = 0 Then
        DlgVisible      "CheckBox_Copy007",     INVISIBLE
        DlgVisible      "GroupBox2",            INVISIBLE
        DlgVisible      "DropListBox_Category", INVISIBLE
        DlgVisible      "TextForBox_Category",  INVISIBLE
        DlgVisible      "DropListBox_SMD",      INVISIBLE
        DlgVisible      "TextForBox_SMD",       INVISIBLE
        DlgVisible      "DropListBox_Color",    INVISIBLE
        DlgVisible      "TextForBox_Color",     INVISIBLE
        DlgVisible      "DropListBox7",         INVISIBLE
        DlgVisible      "TextForBox7",          INVISIBLE
        DlgVisible      "DropListBox8",         INVISIBLE
        DlgVisible      "TextForBox8",          INVISIBLE
        DlgVisible      "DropListBox9",         INVISIBLE
        DlgVisible      "TextForBox9",          INVISIBLE
        DlgVisible      "DropListBox10",        INVISIBLE
        DlgVisible      "TextForBox10",         INVISIBLE
        DlgVisible      "DropListBox11",        INVISIBLE
        DlgVisible      "TextForBox11",         INVISIBLE
        DlgVisible      "DropListBox12",        INVISIBLE
        DlgVisible      "TextForBox12",         INVISIBLE
        DlgVisible      "DropListBox13",        INVISIBLE
        DlgVisible      "TextForBox13",         INVISIBLE
        DlgVisible      "DropListBox14",        INVISIBLE
        DlgVisible      "TextForBox14",         INVISIBLE
        DlgVisible      "DropListBox15",        INVISIBLE
        DlgVisible      "TextForBox15",         INVISIBLE
        DlgVisible      "DropListBox16",        INVISIBLE
        DlgVisible      "TextForBox16",         INVISIBLE
        DlgVisible      "DropListBox17",        INVISIBLE
        DlgVisible      "TextForBox17",         INVISIBLE
        DlgVisible      "DropListBox18",        INVISIBLE
        DlgVisible      "TextForBox18",         INVISIBLE
        DlgVisible      "DropListBox19",        INVISIBLE
        DlgVisible      "TextForBox19",         INVISIBLE
        DlgVisible      "TextBox_FilmInspec",   INVISIBLE
        DlgVisible      "TextForBox2",          INVISIBLE
        DlgText         "Add007Button",         "Add new &007"
        If ffTMat$ = FILL_CHAR Then
            DlgVisible      "Add007Button",         INVISIBLE
        End If

' Otherwise, the button is visible, and its text is a direction to add another 007 field.

      Else
        FieldNumber% = 1
        DlgText         "Add007Button",         "Add another &007"
    End If

' The drop-down list showing the number of relevant 007 fields only shows when there are
' two or more.

    If FieldCount% < 2 Then
        DlgVisible      "CountLegend",          INVISIBLE
        DlgVisible      "DropListBox22",        INVISIBLE
    End If

    If FieldCount% > 0 Then Setup007( FieldNumber% )


  Case CONTROL_CHANGE

    If FieldCount% > 0 Then
        FieldNumber% = Val( DlgText( "DropListBox22" ) )
    End If

    Select Case Id$

      Case "Add007Button"

Add007:

        DlgVisible      "CheckBox_Copy007",     VISIBLE
        DlgVisible      "GroupBox2",            VISIBLE
        DlgText         "Add007Button",         "Add another &007"
        ReDim aFieldList( FieldCount% )
        For i = 0 To FieldCount%
          aFieldList( i ) = Str$( i + 1 )
        Next i
        FieldCount%  = FieldCount% + 1
        FieldNumber% = FieldCount%
        DlgListBoxArray "DropListBox22",        aFieldList()
        DlgValue        "DropListBox22",        FieldNumber% - 1
        If FieldCount% < 2 Then
            DlgVisible      "CountLegend",          INVISIBLE
            DlgVisible      "DropListBox22",        INVISIBLE
          Else
            DlgVisible      "CountLegend",          VISIBLE
            DlgVisible      "DropListBox22",        VISIBLE
        End If
        If OriginalFieldCount% = 0 Then
            FieldsRowCount% = 0
          Else
            FieldsRowCount% = FieldsRowCount% + 1
        End If
        ReDim Preserve aFields( SUBF_R, FieldsRowCount% )
        aFields( FIELD_ACTION, FieldsRowCount% ) = "N"
        If DlgValue( "CheckBox_Copy007" ) = CHECKED Then
            New007 = FALSE
            For i = SUBF_B To SUBF_R
              aFields( i, FieldsRowCount% ) = aFields( i, FieldsRowCount% - 1 )
            Next i
            DlgValue        "CheckBox_Copy007",     UNCHECKED
          Else
            New007     = TRUE
            ffTMat$    = Left$( DlgText( "DropListBox_TMat" ), 1 )
            ChangeTMat = TRUE
            Select Case ffTMat$
              Case "a", "c", "i", "k", "l", "n", "o"
                Category$ = "k"
              Case "b"
                Category$ = "o"
              Case "f", "s", "t"
                Category$ = "g"
              Case "d", "g", "p", "q", "r", "w", "z"
                Category$ = "z"
              Case "m", "v"
                Category$ = ffTMat$
            End Select
        End If
        Setup007( FieldNumber% )
        Dialog1ControlFunction = KEEP_DLG_OPEN

      Case "DropListBox_Type"

' Changing the value of "Type" is a big deal; it means changing all the other values in
' the fixed field part of the dialog box, and will invalidate the record's associated 007
' fields.

        DlgEnable       "OK",                   DISABLED
        ffType$    = Left$( DlgText( "DropListBox_Type" ), 1 )
        ChangeType = TRUE
        DlgEnable       "CheckBox_NewRec",      ENABLED
'        DlgValue        "CheckBox_NewRec",      CHECKED
        DlgVisible      "CheckBox_Add006",      VISIBLE
        If DlgValue( "CheckBox_Add006" ) = UNCHECKED Then
            DlgValue        "CheckBox_Add006",      UNCHECKED
          Else
            DlgValue        "CheckBox_Add006",      CHECKED
        End If
        DlgVisible      "TextFor_Add006",       VISIBLE
        ffTMat$    = FILL_CHAR
        DlgEnable       "DropListBox_TMat",     ENABLED
        ChangeTMat = TRUE
        ChangeTech = TRUE
        ChangeTime = TRUE
        SetupFixedField
        CategoryChange
        GoTo ReInitialize:

      Case "DropListBox_TMat"

' Once a code has been selected for Type of Material, it is possible to add an 007 field.
' Also, some other elements of the fixed field may change. If "Type of Material" is
' changed, its associated 007 field may be invalid; confirm any deletion with a message
' box.

        ffTMat$ = Left$( DlgText( "DropListBox_TMat" ), 1 )
        If ffTMat$ <> "" And ffTMat$ <> "P" Then
            DlgEnable       "OK",                   ENABLED
            DlgVisible      "Add007Button",         VISIBLE
            Select Case ffTMat$
              Case "f", "s", "t"
                Category$ = "g"
                DlgEnable       "DropListBox_Tech",     DISABLED
              Case "m"
                Category$ = "m"
                DlgEnable       "DropListBox_Tech",     ENABLED
              Case "a", "c", "i", "k", "l", "n", "o"
                Category$ = "k"
                DlgEnable       "DropListBox_Tech",     DISABLED
              Case "v"
                Category$ = "v"
                DlgEnable       "DropListBox_Tech",     ENABLED
              Case "b"
                Category$ = "o"
                DlgEnable       "DropListBox_Tech",     DISABLED
              Case "d", "g", "p", "q", "r", "w", "z"
                Category$ = "z"
                DlgEnable       "DropListBox_Tech",     DISABLED
            End Select
            SetupFixedField
            If FieldCount% > 0 Then
                Answer% = MsgBox( "Delete associated 007 field?", MSGBOX_SETBUTTONS_YES_NO_CANCEL + WARNING_QUERY, WaltsMacros$ )

                Select Case Answer%

                  Case MSGBOX_RETURN_YES
                    CategoryChange
                    GoTo ReInitialize:

                  Case MSGBOX_RETURN_CANCEL
                    Quit = TRUE
                    DlgEnd          0

                End Select

            End If

            If FieldCount% > 0 Then Setup007( FieldNumber% )
        End If

      Case "DropListBox_Category"

        NewCategory$ = Left$( DlgText( "DropListBox_Category" ), 1 )
        ffTMat$      = Left$( DlgText( "DropListBox_TMat" ), 1 )
        ChangeTMat   = TRUE
        Setup007( FieldNumber% )

' Write every change to a drop list box as soon as it's made, to enable toggling back and
' forth between fields without losing changes.

      Case "DropListBox_SMD"
        aFields( SUBF_B, GetActualRow( FieldNumber% ) ) = Left$( DlgText( "DropListBox_SMD" ), 1 )

      Case "DropListBox_Color"
        aFields( SUBF_D, GetActualRow( FieldNumber% ) ) = Left$( DlgText( "DropListBox_Color" ), 1 )

      Case "DropListBox7"
        aFields( SUBF_E, GetActualRow( FieldNumber% ) ) = Left$( DlgText( "DropListBox7" ), 1 )

      Case "DropListBox8"
        aFields( SUBF_F, GetActualRow( FieldNumber% ) ) = Left$( DlgText( "DropListBox8" ), 1 )

      Case "DropListBox9"
        aFields( SUBF_G, GetActualRow( FieldNumber% ) ) = Left$( DlgText( "DropListBox9" ), 1 )

      Case "DropListBox10"
        aFields( SUBF_H, GetActualRow( FieldNumber% ) ) = Left$( DlgText( "DropListBox10" ), 1 )

      Case "DropListBox11"
        aFields( SUBF_I, GetActualRow( FieldNumber% ) ) = Left$( DlgText( "DropListBox11" ), 1 )

      Case "DropListBox12"
        aFields( SUBF_J, GetActualRow( FieldNumber% ) ) = Left$( DlgText( "DropListBox12" ), 1 )

      Case "DropListBox13"
        aFields( SUBF_K, GetActualRow( FieldNumber% ) ) = Left$( DlgText( "DropListBox13" ), 1 )

      Case "DropListBox14"
        aFields( SUBF_L, GetActualRow( FieldNumber% ) ) = Left$( DlgText( "DropListBox14" ), 1 )

      Case "DropListBox15"
        aFields( SUBF_M, GetActualRow( FieldNumber% ) ) = Left$( DlgText( "DropListBox15" ), 1 )

      Case "DropListBox16"
        aFields( SUBF_N, GetActualRow( FieldNumber% ) ) = Left$( DlgText( "DropListBox16" ), 1 )

      Case "DropListBox17"
        aFields( SUBF_O, GetActualRow( FieldNumber% ) ) = Left$( DlgText( "DropListBox17" ), 1 )

      Case "DropListBox18"
        aFields( SUBF_P, GetActualRow( FieldNumber% ) ) = Left$( DlgText( "DropListBox18" ), 1 )

      Case "DropListBox19"
        aFields( SUBF_Q, GetActualRow( FieldNumber% ) ) = Left$( DlgText( "DropListBox19" ), 1 )

      Case "DropListBox22"
        Setup007( FieldNumber% )

      Case "OK"

' When the OK button is clicked, check some values for validity. The presence of invalid
' codes keeps the dialog box open so they can be fixed.

        NewType$ = Left$( DlgText( "DropListBox_Type" ), 1 )
        If NewType$ = "S" Then
            Quit = TRUE
            DlgEnd          0
          Else
            If NewType$ <> OriginalType$ Then
                ffType$    = NewType$
                ChangeType = TRUE
              Else
                ChangeType = FALSE
            End If
        End If
        NewTMat$ = Left$( DlgText( "DropListBox_TMat" ), 1 )
        If NewTMat$ <> OriginalTMat$ Then
            ffTMat$    = NewTMat$
            ChangeTMat = TRUE
          Else
            ChangeTMat = FALSE
        End If
        NewTech$ = Left$( DlgText( "DropListBox_Tech" ), 1 )
        If NewTech$ <> ffTech$ Then
            ffTech$    = NewTech$
            ChangeTech = TRUE
          Else
            ChangeTech = FALSE
        End If
        If NewTime$ = "" Then
            NewTime$ = Trim$( DlgText( "TextBox_Time" ) )
        End If
        If NewTime$ = FILL_CHAR & FILL_CHAR & FILL_CHAR Then
            NewTime$ = "---"
        End If
        If Len( NewTime$ ) > 3 Then
            MsgBox "The number entered in Time is too long", WARNING_MESSAGE, WaltsMacros$
            DlgFocus        "TextBox_Time"
            BadInput               = TRUE
            Dialog1ControlFunction = KEEP_DLG_OPEN
          Else
            For i = 1 To Len( NewTime$ )
              CharT$ = Mid$( NewTime$, i, 1 )
              If CharT$ Like "[!- n0-9]" Then
                  MsgBox "Invalid characters have been input in Time", WARNING_MESSAGE, WaltsMacros$
                  DlgFocus        "TextBox_Time"
                  BadInput               = TRUE
                  Dialog1ControlFunction = KEEP_DLG_OPEN
                  Exit For
              End If
            Next i
        End If
        If NewTime$ <> ffTime$ Then
            ffTime$    = NewTime$
            ChangeTime = TRUE
          Else
            ChangeTime = FALSE
        End If
        If BadInput = FALSE Then
            NewInspec$ = Trim$( DlgText( "TextBox_FilmInspec" ) )
            If Len( NewInspec$ ) > 6 Then
                MsgBox "The number entered in 007 subfield $r is too long", WARNING_MESSAGE, WaltsMacros$
                DlgFocus        "TextBox_FilmInspec"
                BadInput               = TRUE
                Dialog1ControlFunction = KEEP_DLG_OPEN
              Else
                For i = 1 To Len( NewInspec$ )
                  If Mid$( NewInspec$, i, 1 ) Like "[!-0-9]" Then
                      MsgBox "Invalid characters have been input in 007 subfield $r", WARNING_MESSAGE, WaltsMacros$
                      DlgFocus        "TextBox_FilmInspec"
                      BadInput               = TRUE
                      Dialog1ControlFunction = KEEP_DLG_OPEN
                      Exit For
                  End If
                Next i
            End If
        End If

    End Select

  Case TEXTBOX_CHANGE

    If Id$ = "TextBox_Time" Then
        NewTime$ = Trim$( DlgText( "TextBox_Time" ) )
    End If

End Select

End Function
'252799371
'
'Macro name: VisMatHelper
'Macro book: C:\Users\wnickeson.UR\AppData\Roaming\OCLC\Connex\Macros\Extras1.mbk
'Saved: 8/22/2023 10:00:21 AM using "MacroBookInspector" macro by Walter F. Nickeson.
